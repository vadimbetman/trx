   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"main.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.tspact_toggle,"ax",%progbits
  17              		.align	2
  19              	tspact_toggle:
  20              	.LFB61:
  21              		.file 1 "apps/layer1/main.c"
   1:apps/layer1/main.c **** /* main program of Free Software for Calypso Phone */
   2:apps/layer1/main.c **** 
   3:apps/layer1/main.c **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:apps/layer1/main.c ****  *
   5:apps/layer1/main.c ****  * All Rights Reserved
   6:apps/layer1/main.c ****  *
   7:apps/layer1/main.c ****  * This program is free software; you can redistribute it and/or modify
   8:apps/layer1/main.c ****  * it under the terms of the GNU General Public License as published by
   9:apps/layer1/main.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:apps/layer1/main.c ****  * (at your option) any later version.
  11:apps/layer1/main.c ****  *
  12:apps/layer1/main.c ****  * This program is distributed in the hope that it will be useful,
  13:apps/layer1/main.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:apps/layer1/main.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:apps/layer1/main.c ****  * GNU General Public License for more details.
  16:apps/layer1/main.c ****  *
  17:apps/layer1/main.c ****  * You should have received a copy of the GNU General Public License along
  18:apps/layer1/main.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:apps/layer1/main.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:apps/layer1/main.c ****  *
  21:apps/layer1/main.c ****  */
  22:apps/layer1/main.c **** 
  23:apps/layer1/main.c **** #include <stdint.h>
  24:apps/layer1/main.c **** #include <stdio.h>
  25:apps/layer1/main.c **** 
  26:apps/layer1/main.c **** #include <debug.h>
  27:apps/layer1/main.c **** #include <memory.h>
  28:apps/layer1/main.c **** #include <string.h>
  29:apps/layer1/main.c **** #include <delay.h>
  30:apps/layer1/main.c **** #include <rffe.h>
  31:apps/layer1/main.c **** #include <keypad.h>
  32:apps/layer1/main.c **** #include <board.h>
  33:apps/layer1/main.c **** 
  34:apps/layer1/main.c **** #include <abb/twl3025.h>
  35:apps/layer1/main.c **** #include <rf/trf6151.h>
  36:apps/layer1/main.c **** 
  37:apps/layer1/main.c **** #include <comm/sercomm.h>
  38:apps/layer1/main.c **** #include <comm/timer.h>
  39:apps/layer1/main.c **** 
  40:apps/layer1/main.c **** #include <calypso/clock.h>
  41:apps/layer1/main.c **** #include <calypso/tpu.h>
  42:apps/layer1/main.c **** #include <calypso/tsp.h>
  43:apps/layer1/main.c **** #include <calypso/irq.h>
  44:apps/layer1/main.c **** #include <calypso/misc.h>
  45:apps/layer1/main.c **** #include <calypso/sim.h>
  46:apps/layer1/main.c **** 
  47:apps/layer1/main.c **** #include <layer1/sync.h>
  48:apps/layer1/main.c **** #include <layer1/async.h>
  49:apps/layer1/main.c **** #include <layer1/tpu_window.h>
  50:apps/layer1/main.c **** #include <layer1/l23_api.h>
  51:apps/layer1/main.c **** 
  52:apps/layer1/main.c **** #include <fb/framebuffer.h>
  53:apps/layer1/main.c **** 
  54:apps/layer1/main.c **** const char *hr = "======================================================================\n";
  55:apps/layer1/main.c **** 
  56:apps/layer1/main.c **** /* MAIN program **************************************************************/
  57:apps/layer1/main.c **** 
  58:apps/layer1/main.c **** static void key_handler(enum key_codes code, enum key_states state);
  59:apps/layer1/main.c **** 
  60:apps/layer1/main.c **** int main(void)
  61:apps/layer1/main.c **** {
  62:apps/layer1/main.c **** 	uint8_t atr[20];
  63:apps/layer1/main.c **** 	uint8_t atrLength = 0;
  64:apps/layer1/main.c **** 
  65:apps/layer1/main.c **** 	board_init(1);
  66:apps/layer1/main.c **** 
  67:apps/layer1/main.c **** 	puts("\n\nVADIMBETMAN Layer 1 (revision " GIT_REVISION ")\n");
  68:apps/layer1/main.c **** 	puts(hr);
  69:apps/layer1/main.c **** 
  70:apps/layer1/main.c **** 	/* Dump device identification */
  71:apps/layer1/main.c **** 	dump_dev_id();
  72:apps/layer1/main.c **** 	puts(hr);
  73:apps/layer1/main.c **** 
  74:apps/layer1/main.c **** 	keypad_set_handler(&key_handler);
  75:apps/layer1/main.c **** 
  76:apps/layer1/main.c **** 	/* Dump clock config after PLL set */
  77:apps/layer1/main.c **** 	calypso_clk_dump();
  78:apps/layer1/main.c **** 	puts(hr);
  79:apps/layer1/main.c **** 
  80:apps/layer1/main.c **** 	fb_clear();
  81:apps/layer1/main.c **** 
  82:apps/layer1/main.c **** 	fb_setfg(FB_COLOR_BLACK);
  83:apps/layer1/main.c **** 	fb_setbg(FB_COLOR_WHITE);
  84:apps/layer1/main.c **** 	fb_setfont(FB_FONT_HELVB14);
  85:apps/layer1/main.c **** 
  86:apps/layer1/main.c **** 	fb_gotoxy(2,20);
  87:apps/layer1/main.c **** 	fb_putstr("Layer 1",framebuffer->width-4);
  88:apps/layer1/main.c **** 
  89:apps/layer1/main.c **** 	fb_setfg(FB_COLOR_RED);
  90:apps/layer1/main.c **** 	fb_setbg(FB_COLOR_BLUE);
  91:apps/layer1/main.c **** 
  92:apps/layer1/main.c **** 	fb_gotoxy(2,25);
  93:apps/layer1/main.c **** 	fb_boxto(framebuffer->width-3,38);
  94:apps/layer1/main.c **** 
  95:apps/layer1/main.c **** 	fb_setfg(FB_COLOR_WHITE);
  96:apps/layer1/main.c **** 	fb_setfont(FB_FONT_HELVR08);
  97:apps/layer1/main.c **** 	fb_gotoxy(8,33);
  98:apps/layer1/main.c **** 	fb_putstr("vadimbetman",framebuffer->width-4);
  99:apps/layer1/main.c **** 
 100:apps/layer1/main.c **** 	fb_flush();
 101:apps/layer1/main.c **** 
 102:apps/layer1/main.c **** 	/* initialize SIM */
 103:apps/layer1/main.c **** 	calypso_sim_init();
 104:apps/layer1/main.c **** 
 105:apps/layer1/main.c **** 	puts("Power up simcard:\n");
 106:apps/layer1/main.c **** 	memset(atr,0,sizeof(atr));
 107:apps/layer1/main.c **** 	atrLength = calypso_sim_powerup(atr);
 108:apps/layer1/main.c **** 
 109:apps/layer1/main.c **** 	layer1_init();
 110:apps/layer1/main.c **** 
 111:apps/layer1/main.c **** 	tpu_frame_irq_en(1, 1);
 112:apps/layer1/main.c **** 
 113:apps/layer1/main.c **** 	while (1) {
 114:apps/layer1/main.c **** 		l1a_compl_execute();
 115:apps/layer1/main.c **** 		osmo_timers_update();
 116:apps/layer1/main.c **** 		sim_handler();
 117:apps/layer1/main.c **** 		l1a_l23_handler();
 118:apps/layer1/main.c **** 	}
 119:apps/layer1/main.c **** 
 120:apps/layer1/main.c **** 	/* NOT REACHED */
 121:apps/layer1/main.c **** 
 122:apps/layer1/main.c **** 	twl3025_power_off();
 123:apps/layer1/main.c **** }
 124:apps/layer1/main.c **** 
 125:apps/layer1/main.c **** static int afcout = 0;
 126:apps/layer1/main.c **** 
 127:apps/layer1/main.c **** static void tspact_toggle(uint8_t num)
 128:apps/layer1/main.c **** {
  22              		.loc 1 128 0
  23              		.cfi_startproc
  24              		@ Function supports interworking.
  25              		@ args = 0, pretend = 0, frame = 0
  26              		@ frame_needed = 0, uses_anonymous_args = 0
  27              	.LVL0:
  28 0000 38402DE9 		stmfd	sp!, {r3, r4, r5, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 16
  31              		.cfi_offset 3, -16
  32              		.cfi_offset 4, -12
  33              		.cfi_offset 5, -8
  34              		.cfi_offset 14, -4
  35              		.loc 1 128 0
  36 0004 0040A0E1 		mov	r4, r0
 129:apps/layer1/main.c **** 	printf("TSPACT%u toggle\n", num);
 130:apps/layer1/main.c **** 	tsp_act_toggle((1 << num));
  37              		.loc 1 130 0
  38 0008 0150A0E3 		mov	r5, #1
 129:apps/layer1/main.c **** 	printf("TSPACT%u toggle\n", num);
  39              		.loc 1 129 0
  40 000c 0410A0E1 		mov	r1, r4
  41              		.loc 1 130 0
  42 0010 1544A0E1 		mov	r4, r5, asl r4
 129:apps/layer1/main.c **** 	printf("TSPACT%u toggle\n", num);
  43              		.loc 1 129 0
  44 0014 28009FE5 		ldr	r0, .L2
  45              	.LVL1:
  46 0018 FEFFFFEB 		bl	printf
  47              	.LVL2:
  48              		.loc 1 130 0
  49 001c 0408A0E1 		mov	r0, r4, asl #16
  50 0020 2008A0E1 		mov	r0, r0, lsr #16
  51 0024 FEFFFFEB 		bl	tsp_act_toggle
  52              	.LVL3:
  53              	.LBB24:
  54              	.LBB25:
  55              		.file 2 "include/calypso/tpu.h"
   1:include/calypso/tpu.h **** #ifndef _CALYPSO_TPU_H
   2:include/calypso/tpu.h **** #define _CALYPSO_TPU_H
   3:include/calypso/tpu.h **** 
   4:include/calypso/tpu.h **** #define BITS_PER_TDMA		1250
   5:include/calypso/tpu.h **** #define QBITS_PER_TDMA		(BITS_PER_TDMA * 4)	/* 5000 */
   6:include/calypso/tpu.h **** #define TPU_RANGE		QBITS_PER_TDMA
   7:include/calypso/tpu.h **** #define	SWITCH_TIME		(TPU_RANGE-10)
   8:include/calypso/tpu.h **** 
   9:include/calypso/tpu.h **** /* Assert or de-assert TPU reset */
  10:include/calypso/tpu.h **** void tpu_reset(int active);
  11:include/calypso/tpu.h **** /* Enable or Disable a new scenario loaded into the TPU */
  12:include/calypso/tpu.h **** void tpu_enable(int active);
  13:include/calypso/tpu.h **** /* Enable or Disable the clock of the TPU Module */
  14:include/calypso/tpu.h **** void tpu_clk_enable(int active);
  15:include/calypso/tpu.h **** /* Enable Frame Interrupt generation on next frame.  DSP will reset it */
  16:include/calypso/tpu.h **** void tpu_dsp_frameirq_enable(void);
  17:include/calypso/tpu.h **** /* Is a Frame interrupt still pending for the DSP ? */
  18:include/calypso/tpu.h **** int tpu_dsp_fameirq_pending(void);
  19:include/calypso/tpu.h **** /* Rewind the TPU, i.e. restart enqueueing instructions at the base addr */
  20:include/calypso/tpu.h **** void tpu_rewind(void);
  21:include/calypso/tpu.h **** /* Enqueue a raw TPU instruction */
  22:include/calypso/tpu.h **** void tpu_enqueue(uint16_t instr);
  23:include/calypso/tpu.h **** /* Initialize TPU and TPU driver */
  24:include/calypso/tpu.h **** void tpu_init(void);
  25:include/calypso/tpu.h **** /* (Busy)Wait until TPU is idle */
  26:include/calypso/tpu.h **** void tpu_wait_idle(void);
  27:include/calypso/tpu.h **** /* Enable FRAME interrupt generation */
  28:include/calypso/tpu.h **** void tpu_frame_irq_en(int mcu, int dsp);
  29:include/calypso/tpu.h **** /* Force the generation of a DSP interrupt */
  30:include/calypso/tpu.h **** void tpu_force_dsp_frame_irq(void);
  31:include/calypso/tpu.h **** 
  32:include/calypso/tpu.h **** /* Get the current TPU SYNCHRO register */
  33:include/calypso/tpu.h **** uint16_t tpu_get_synchro(void);
  34:include/calypso/tpu.h **** /* Get the current TPU OFFSET register */
  35:include/calypso/tpu.h **** uint16_t tpu_get_offset(void);
  36:include/calypso/tpu.h **** 
  37:include/calypso/tpu.h **** enum tpu_instr {
  38:include/calypso/tpu.h **** 	TPU_INSTR_AT		= (1 << 13),
  39:include/calypso/tpu.h **** 	TPU_INSTR_OFFSET	= (2 << 13),
  40:include/calypso/tpu.h **** 	TPU_INSTR_SYNCHRO	= (3 << 13),	/* Loading delta synchro value in TPU synchro register */
  41:include/calypso/tpu.h **** 	TPU_INSTR_WAIT		= (5 << 13),	/* Wait a certain period (in GSM qbits) */
  42:include/calypso/tpu.h **** 	TPU_INSTR_SLEEP		= (0 << 13),	/* Stop the sequencer by disabling TPU ENABLE bit in ctrl reg */
  43:include/calypso/tpu.h **** 	/* data processing */
  44:include/calypso/tpu.h **** 	TPU_INSTR_MOVE		= (4 << 13),
  45:include/calypso/tpu.h **** };
  46:include/calypso/tpu.h **** 
  47:include/calypso/tpu.h **** /* Addresses internal to the TPU, only accessible via MOVE */
  48:include/calypso/tpu.h **** enum tpu_reg_int {
  49:include/calypso/tpu.h **** 	TPUI_TSP_CTRL1	= 0x00,
  50:include/calypso/tpu.h **** 	TPUI_TSP_CTRL2	= 0x01,
  51:include/calypso/tpu.h **** 	TPUI_TX_1	= 0x04,
  52:include/calypso/tpu.h **** 	TPUI_TX_2	= 0x03,
  53:include/calypso/tpu.h **** 	TPUI_TX_3	= 0x02,
  54:include/calypso/tpu.h **** 	TPUI_TX_4	= 0x05,
  55:include/calypso/tpu.h **** 	TPUI_TSP_ACT_L	= 0x06,
  56:include/calypso/tpu.h **** 	TPUI_TSP_ACT_U	= 0x07,
  57:include/calypso/tpu.h **** 	TPUI_TSP_SET1	= 0x09,
  58:include/calypso/tpu.h **** 	TPUI_TSP_SET2	= 0x0a,
  59:include/calypso/tpu.h **** 	TPUI_TSP_SET3	= 0x0b,
  60:include/calypso/tpu.h **** 	TPUI_DSP_INT_PG	= 0x10,
  61:include/calypso/tpu.h **** 	TPUI_GAUGING_EN = 0x11,
  62:include/calypso/tpu.h **** };
  63:include/calypso/tpu.h **** 
  64:include/calypso/tpu.h **** enum tpui_ctrl2_bits {
  65:include/calypso/tpu.h **** 	TPUI_CTRL2_RD		= (1 << 0),
  66:include/calypso/tpu.h **** 	TPUI_CTRL2_WR		= (1 << 1),
  67:include/calypso/tpu.h **** };
  68:include/calypso/tpu.h **** 
  69:include/calypso/tpu.h **** static inline uint16_t tpu_mod5000(int16_t time)
  70:include/calypso/tpu.h **** {
  71:include/calypso/tpu.h **** 	if (time < 0)
  72:include/calypso/tpu.h **** 		return time + 5000;
  73:include/calypso/tpu.h **** 	if (time >= 5000)
  74:include/calypso/tpu.h **** 		return time - 5000;
  75:include/calypso/tpu.h **** 	return time;
  76:include/calypso/tpu.h **** }
  77:include/calypso/tpu.h **** 
  78:include/calypso/tpu.h **** /* Enqueue a SLEEP operation (stop sequencer by disabling TPU ENABLE bit) */
  79:include/calypso/tpu.h **** static inline void tpu_enq_sleep(void)
  80:include/calypso/tpu.h **** {
  81:include/calypso/tpu.h **** 	tpu_enqueue(TPU_INSTR_SLEEP);
  56              		.loc 2 81 0
  57 0028 0000A0E3 		mov	r0, #0
  58 002c FEFFFFEB 		bl	tpu_enqueue
  59              	.LVL4:
  60              	.LBE25:
  61              	.LBE24:
 131:apps/layer1/main.c **** 	tpu_enq_sleep();
 132:apps/layer1/main.c **** 	tpu_enable(1);
  62              		.loc 1 132 0
  63 0030 0500A0E1 		mov	r0, r5
  64 0034 FEFFFFEB 		bl	tpu_enable
  65              	.LVL5:
 133:apps/layer1/main.c **** 	tpu_wait_idle();
  66              		.loc 1 133 0
  67 0038 FEFFFFEB 		bl	tpu_wait_idle
  68              	.LVL6:
 134:apps/layer1/main.c **** }
  69              		.loc 1 134 0
  70 003c 3840BDE8 		ldmfd	sp!, {r3, r4, r5, lr}
  71 0040 1EFF2FE1 		bx	lr
  72              	.L3:
  73              		.align	2
  74              	.L2:
  75 0044 00000000 		.word	.LC0
  76              		.cfi_endproc
  77              	.LFE61:
  79              		.section	.text.key_handler,"ax",%progbits
  80              		.align	2
  82              	key_handler:
  83              	.LFB62:
 135:apps/layer1/main.c **** 
 136:apps/layer1/main.c **** static void key_handler(enum key_codes code, enum key_states state)
 137:apps/layer1/main.c **** {
  84              		.loc 1 137 0
  85              		.cfi_startproc
  86              		@ Function supports interworking.
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              	.LVL7:
 138:apps/layer1/main.c **** 	if (state != PRESSED)
  90              		.loc 1 138 0
  91 0000 000051E3 		cmp	r1, #0
 137:apps/layer1/main.c **** {
  92              		.loc 1 137 0
  93 0004 08402DE9 		stmfd	sp!, {r3, lr}
  94              	.LCFI1:
  95              		.cfi_def_cfa_offset 8
  96              		.cfi_offset 3, -8
  97              		.cfi_offset 14, -4
  98              		.loc 1 138 0
  99 0008 2700001A 		bne	.L4
 100              	.LVL8:
 101              	.LBB28:
 102              	.LBB29:
 139:apps/layer1/main.c **** 		return;
 140:apps/layer1/main.c **** 
 141:apps/layer1/main.c **** 	switch (code) {
 103              		.loc 1 141 0
 104 000c 040040E2 		sub	r0, r0, #4
 105              	.LVL9:
 106 0010 050050E3 		cmp	r0, #5
 107 0014 00F19F97 		ldrls	pc, [pc, r0, asl #2]
 108 0018 220000EA 		b	.L6
 109              	.L8:
 110 001c 34000000 		.word	.L7
 111 0020 3C000000 		.word	.L9
 112 0024 48000000 		.word	.L10
 113 0028 50000000 		.word	.L11
 114 002c A8000000 		.word	.L6
 115 0030 70000000 		.word	.L12
 116              	.L7:
 142:apps/layer1/main.c **** 	case KEY_4:
 143:apps/layer1/main.c **** 		tspact_toggle(6);	/* TRENA (RFFE) */
 117              		.loc 1 143 0
 118 0034 0600A0E3 		mov	r0, #6
 119              	.LVL10:
 120 0038 000000EA 		b	.L18
 121              	.LVL11:
 122              	.L9:
 144:apps/layer1/main.c **** 		break;
 145:apps/layer1/main.c **** 	case KEY_5:
 146:apps/layer1/main.c **** 		tspact_toggle(8);	/* GSM_TXEN (RFFE) */
 123              		.loc 1 146 0
 124 003c 0800A0E3 		mov	r0, #8
 125              	.LVL12:
 126              	.L18:
 127 0040 FEFFFFEB 		bl	tspact_toggle
 128              	.LVL13:
 129 0044 170000EA 		b	.L6
 130              	.LVL14:
 131              	.L10:
 147:apps/layer1/main.c **** 		break;
 148:apps/layer1/main.c **** 	case KEY_6:
 149:apps/layer1/main.c **** 		tspact_toggle(1);	/* PAENA (RFFE) */
 132              		.loc 1 149 0
 133 0048 0100A0E3 		mov	r0, #1
 134              	.LVL15:
 135 004c FBFFFFEA 		b	.L18
 136              	.LVL16:
 137              	.L11:
 150:apps/layer1/main.c **** 		break;
 151:apps/layer1/main.c **** 	case KEY_7:			/* decrement AFC OUT */
 152:apps/layer1/main.c **** 		afcout -= 100;
 138              		.loc 1 152 0
 139 0050 5C309FE5 		ldr	r3, .L21
 140 0054 002093E5 		ldr	r2, [r3]
 141 0058 642042E2 		sub	r2, r2, #100
 153:apps/layer1/main.c **** 		if (afcout < -4096)
 142              		.loc 1 153 0
 143 005c 010A72E3 		cmn	r2, #4096
 154:apps/layer1/main.c **** 			afcout = -4096;
 144              		.loc 1 154 0
 145 0060 50209FB5 		ldrlt	r2, .L21+4
 146 0064 002083E5 		str	r2, [r3]
 155:apps/layer1/main.c **** 		twl3025_afc_set(afcout);
 147              		.loc 1 155 0
 148 0068 F000D3E1 		ldrsh	r0, [r3]
 149              	.LVL17:
 150 006c 080000EA 		b	.L19
 151              	.LVL18:
 152              	.L12:
 156:apps/layer1/main.c **** 		printf("AFC OUT: %u\n", twl3025_afcout_get());
 157:apps/layer1/main.c **** 		break;
 158:apps/layer1/main.c **** 	case KEY_9:			/* increase AFC OUT */
 159:apps/layer1/main.c **** 		afcout += 100;
 153              		.loc 1 159 0
 154 0070 3C309FE5 		ldr	r3, .L21
 155 0074 000093E5 		ldr	r0, [r3]
 156              	.LVL19:
 160:apps/layer1/main.c **** 		if (afcout > 4095)
 157              		.loc 1 160 0
 158 0078 3C209FE5 		ldr	r2, .L21+8
 159:apps/layer1/main.c **** 		afcout += 100;
 159              		.loc 1 159 0
 160 007c 640080E2 		add	r0, r0, #100
 161 0080 020050E1 		cmp	r0, r2
 162 0084 0200A0A1 		movge	r0, r2
 163 0088 000083E5 		str	r0, [r3]
 161:apps/layer1/main.c **** 			afcout = 4095;
 162:apps/layer1/main.c **** 		twl3025_afc_set(afcout);
 164              		.loc 1 162 0
 165 008c 0008A0E1 		mov	r0, r0, asl #16
 166 0090 4008A0E1 		mov	r0, r0, asr #16
 167              	.L19:
 168 0094 FEFFFFEB 		bl	twl3025_afc_set
 169              	.LVL20:
 163:apps/layer1/main.c **** 		printf("AFC OUT: %u\n", twl3025_afcout_get());
 170              		.loc 1 163 0
 171 0098 FEFFFFEB 		bl	twl3025_afcout_get
 172              	.LVL21:
 173 009c 0010A0E1 		mov	r1, r0
 174 00a0 18009FE5 		ldr	r0, .L21+12
 175 00a4 FEFFFFEB 		bl	printf
 176              	.LVL22:
 177              	.L6:
 164:apps/layer1/main.c **** 		break;
 165:apps/layer1/main.c **** 	default:
 166:apps/layer1/main.c **** 		break;
 167:apps/layer1/main.c **** 	}
 168:apps/layer1/main.c **** 	/* power down SIM, TODO:  this will happen with every key pressed,
 169:apps/layer1/main.c ****        put it somewhere else ! */
 170:apps/layer1/main.c **** 	calypso_sim_powerdown();
 178              		.loc 1 170 0
 179 00a8 FEFFFFEB 		bl	calypso_sim_powerdown
 180              	.LVL23:
 181              	.L4:
 182              	.LBE29:
 183              	.LBE28:
 171:apps/layer1/main.c **** }
 184              		.loc 1 171 0
 185 00ac 0840BDE8 		ldmfd	sp!, {r3, lr}
 186 00b0 1EFF2FE1 		bx	lr
 187              	.L22:
 188              		.align	2
 189              	.L21:
 190 00b4 00000000 		.word	.LANCHOR0
 191 00b8 00F0FFFF 		.word	-4096
 192 00bc FF0F0000 		.word	4095
 193 00c0 11000000 		.word	.LC1
 194              		.cfi_endproc
 195              	.LFE62:
 197              		.section	.text.startup.main,"ax",%progbits
 198              		.align	2
 199              		.global	main
 201              	main:
 202              	.LFB60:
  61:apps/layer1/main.c **** {
 203              		.loc 1 61 0
 204              		.cfi_startproc
 205              		@ Function supports interworking.
 206              		@ args = 0, pretend = 0, frame = 24
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208              	.LVL24:
 209 0000 F0432DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, lr}
 210              	.LCFI2:
 211              		.cfi_def_cfa_offset 28
 212              		.cfi_offset 4, -28
 213              		.cfi_offset 5, -24
 214              		.cfi_offset 6, -20
 215              		.cfi_offset 7, -16
 216              		.cfi_offset 8, -12
 217              		.cfi_offset 9, -8
 218              		.cfi_offset 14, -4
  65:apps/layer1/main.c **** 	board_init(1);
 219              		.loc 1 65 0
 220 0004 0100A0E3 		mov	r0, #1
  61:apps/layer1/main.c **** {
 221              		.loc 1 61 0
 222 0008 1CD04DE2 		sub	sp, sp, #28
 223              	.LCFI3:
 224              		.cfi_def_cfa_offset 56
  68:apps/layer1/main.c **** 	puts(hr);
 225              		.loc 1 68 0
 226 000c 54419FE5 		ldr	r4, .L25
  65:apps/layer1/main.c **** 	board_init(1);
 227              		.loc 1 65 0
 228 0010 FEFFFFEB 		bl	board_init
 229              	.LVL25:
  67:apps/layer1/main.c **** 	puts("\n\nVADIMBETMAN Layer 1 (revision " GIT_REVISION ")\n");
 230              		.loc 1 67 0
 231 0014 50019FE5 		ldr	r0, .L25+4
 232 0018 FEFFFFEB 		bl	puts
 233              	.LVL26:
  68:apps/layer1/main.c **** 	puts(hr);
 234              		.loc 1 68 0
 235 001c 000094E5 		ldr	r0, [r4]
 236 0020 FEFFFFEB 		bl	puts
 237              	.LVL27:
  71:apps/layer1/main.c **** 	dump_dev_id();
 238              		.loc 1 71 0
 239 0024 FEFFFFEB 		bl	dump_dev_id
 240              	.LVL28:
  72:apps/layer1/main.c **** 	puts(hr);
 241              		.loc 1 72 0
 242 0028 000094E5 		ldr	r0, [r4]
 243 002c FEFFFFEB 		bl	puts
 244              	.LVL29:
  74:apps/layer1/main.c **** 	keypad_set_handler(&key_handler);
 245              		.loc 1 74 0
 246 0030 38019FE5 		ldr	r0, .L25+8
 247 0034 FEFFFFEB 		bl	keypad_set_handler
 248              	.LVL30:
  77:apps/layer1/main.c **** 	calypso_clk_dump();
 249              		.loc 1 77 0
 250 0038 FEFFFFEB 		bl	calypso_clk_dump
 251              	.LVL31:
  78:apps/layer1/main.c **** 	puts(hr);
 252              		.loc 1 78 0
 253 003c 000094E5 		ldr	r0, [r4]
 254              	.LBB60:
 255              	.LBB61:
 256              		.file 3 "include/fb/framebuffer.h"
   1:include/fb/framebuffer.h **** #ifndef _FB_FRAMEBUFFER_H
   2:include/fb/framebuffer.h **** #define _FB_FRAMEBUFFER_H
   3:include/fb/framebuffer.h **** 
   4:include/fb/framebuffer.h **** #include <fb/font.h>
   5:include/fb/framebuffer.h **** #include <stdint.h>
   6:include/fb/framebuffer.h **** 
   7:include/fb/framebuffer.h **** /* color is encoded as <special><red><green><blue> */
   8:include/fb/framebuffer.h **** /* if a color is "special", then the RGB components most likely
   9:include/fb/framebuffer.h ****    don't make sense. Use "special" colours when you have to
  10:include/fb/framebuffer.h ****    mask out bits with transparency or you have to encode
  11:include/fb/framebuffer.h ****    colours in a fixed color palette... */
  12:include/fb/framebuffer.h **** 
  13:include/fb/framebuffer.h **** #define FB_COLOR_WHITE		0x00ffffffU
  14:include/fb/framebuffer.h **** #define FB_COLOR_BLACK		0x00000000U
  15:include/fb/framebuffer.h **** #define FB_COLOR_TRANSP		0x01ffffffU
  16:include/fb/framebuffer.h **** 
  17:include/fb/framebuffer.h **** #define FB_COLOR_RGB(r,g,b) ((((r) & 0xff)<<16)|(((g)&0xff)<<8)|((b)&0xff))
  18:include/fb/framebuffer.h **** #define FB_COLOR_RED		FB_COLOR_RGB(0xff,0x00,0x00)
  19:include/fb/framebuffer.h **** #define FB_COLOR_GREEN		FB_COLOR_RGB(0x00,0xff,0x00)
  20:include/fb/framebuffer.h **** #define FB_COLOR_BLUE		FB_COLOR_RGB(0x00,0x00,0xff)
  21:include/fb/framebuffer.h **** 
  22:include/fb/framebuffer.h **** /* encode */
  23:include/fb/framebuffer.h **** 
  24:include/fb/framebuffer.h **** /* decode */
  25:include/fb/framebuffer.h **** #define FB_COLOR_IS_SPECIAL(v)     (!!((v) & 0xff000000U))
  26:include/fb/framebuffer.h **** #define FB_COLOR_TO_R(v)		(((v)>>16) & 0xff)
  27:include/fb/framebuffer.h **** #define FB_COLOR_TO_G(v)		(((v)>> 8) & 0xff)
  28:include/fb/framebuffer.h **** #define FB_COLOR_TO_B(v)		( (v)      & 0xff)
  29:include/fb/framebuffer.h **** 
  30:include/fb/framebuffer.h **** struct framebuffer {
  31:include/fb/framebuffer.h **** 	char name[8];				// keep it short!
  32:include/fb/framebuffer.h **** 	void (*init)();				// (re)initialize
  33:include/fb/framebuffer.h **** 	void (*clear)();			// clear display
  34:include/fb/framebuffer.h **** 	void (*boxto)(uint16_t x,uint16_t y);	// draw box to xy
  35:include/fb/framebuffer.h **** 	void (*lineto)(uint16_t x,uint16_t y);	// draw line to xy
  36:include/fb/framebuffer.h **** 	int (*putstr)(char *c,int maxwidth);	// put text in current font to fb
  37:include/fb/framebuffer.h **** 	void (*flush)();			// flush changes
  38:include/fb/framebuffer.h **** 
  39:include/fb/framebuffer.h **** 	uint16_t width,height;			// width/height of fb
  40:include/fb/framebuffer.h **** 	uint16_t cursor_x,cursor_y;		// current cursor
  41:include/fb/framebuffer.h **** 	uint32_t fg_color,bg_color;		// current fg/bg color
  42:include/fb/framebuffer.h **** 	enum fb_font_id font;			// current font
  43:include/fb/framebuffer.h **** };
  44:include/fb/framebuffer.h **** 
  45:include/fb/framebuffer.h **** /* there is a single framebuffer, the specific driver defines
  46:include/fb/framebuffer.h ****    the "framebuffer" symbol */
  47:include/fb/framebuffer.h **** extern struct framebuffer *framebuffer;
  48:include/fb/framebuffer.h **** 
  49:include/fb/framebuffer.h **** static inline void
  50:include/fb/framebuffer.h **** fb_init(){
  51:include/fb/framebuffer.h **** 	framebuffer->init();
  52:include/fb/framebuffer.h **** }
  53:include/fb/framebuffer.h **** 
  54:include/fb/framebuffer.h **** static inline void
  55:include/fb/framebuffer.h **** fb_clear(){
  56:include/fb/framebuffer.h **** 	framebuffer->clear();
 257              		.loc 3 56 0
 258 0040 2C419FE5 		ldr	r4, .L25+12
 259              	.LBE61:
 260              	.LBE60:
  78:apps/layer1/main.c **** 	puts(hr);
 261              		.loc 1 78 0
 262 0044 FEFFFFEB 		bl	puts
 263              	.LVL32:
 264              	.LBB63:
 265              	.LBB62:
 266              		.loc 3 56 0
 267 0048 003094E5 		ldr	r3, [r4]
 268 004c 0CC093E5 		ldr	ip, [r3, #12]
 269 0050 0FE0A0E1 		mov	lr, pc
 270 0054 1CFF2FE1 		bx	ip
 271              	.LVL33:
 272              	.LBE62:
 273              	.LBE63:
 274              	.LBB64:
 275              	.LBB65:
  57:include/fb/framebuffer.h **** }
  58:include/fb/framebuffer.h **** 
  59:include/fb/framebuffer.h **** static inline void
  60:include/fb/framebuffer.h **** fb_boxto(uint16_t x,uint16_t y){
  61:include/fb/framebuffer.h **** 	framebuffer->boxto(x,y);
  62:include/fb/framebuffer.h **** }
  63:include/fb/framebuffer.h **** 
  64:include/fb/framebuffer.h **** static inline void
  65:include/fb/framebuffer.h **** fb_lineto(uint16_t x,uint16_t y){
  66:include/fb/framebuffer.h **** 	framebuffer->lineto(x,y);
  67:include/fb/framebuffer.h **** }
  68:include/fb/framebuffer.h **** 
  69:include/fb/framebuffer.h **** static inline int
  70:include/fb/framebuffer.h **** fb_putstr(char *str,int maxwidth){
  71:include/fb/framebuffer.h **** 	return framebuffer->putstr(str,maxwidth);
  72:include/fb/framebuffer.h **** }
  73:include/fb/framebuffer.h **** 
  74:include/fb/framebuffer.h **** static inline void
  75:include/fb/framebuffer.h **** fb_flush(){
  76:include/fb/framebuffer.h **** 	framebuffer->flush();
  77:include/fb/framebuffer.h **** }
  78:include/fb/framebuffer.h **** 
  79:include/fb/framebuffer.h **** static inline void
  80:include/fb/framebuffer.h **** fb_gotoxy(uint16_t x,uint16_t y){
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
  83:include/fb/framebuffer.h **** }
  84:include/fb/framebuffer.h **** 
  85:include/fb/framebuffer.h **** static inline void
  86:include/fb/framebuffer.h **** fb_setfg(uint32_t color){
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 276              		.loc 3 87 0
 277 0058 003094E5 		ldr	r3, [r4]
 278              	.LBE65:
 279              	.LBE64:
  87:apps/layer1/main.c **** 	fb_putstr("Layer 1",framebuffer->width-4);
 280              		.loc 1 87 0
 281 005c B012D3E1 		ldrh	r1, [r3, #32]
 282              	.LBB68:
 283              	.LBB66:
 284              		.loc 3 87 0
 285 0060 0050A0E3 		mov	r5, #0
 286              	.LBE66:
 287              	.LBE68:
 288              	.LBB69:
 289              	.LBB70:
  88:include/fb/framebuffer.h **** }
  89:include/fb/framebuffer.h **** 
  90:include/fb/framebuffer.h **** static inline void
  91:include/fb/framebuffer.h **** fb_setbg(uint32_t color){
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
  93:include/fb/framebuffer.h **** }
  94:include/fb/framebuffer.h **** 
  95:include/fb/framebuffer.h **** static inline void
  96:include/fb/framebuffer.h **** fb_setfont(enum fb_font_id fid){
  97:include/fb/framebuffer.h **** 	framebuffer->font = fid;
 290              		.loc 3 97 0
 291 0064 0160A0E3 		mov	r6, #1
 292              	.LBE70:
 293              	.LBE69:
 294              	.LBB72:
 295              	.LBB73:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 296              		.loc 3 92 0
 297 0068 FF84E0E3 		mvn	r8, #-16777216
 298              	.LBE73:
 299              	.LBE72:
 300              	.LBB75:
 301              	.LBB76:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 302              		.loc 3 81 0
 303 006c 0290A0E3 		mov	r9, #2
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 304              		.loc 3 82 0
 305 0070 1470A0E3 		mov	r7, #20
 306              	.LBE76:
 307              	.LBE75:
 308              	.LBB78:
 309              	.LBB67:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 310              		.loc 3 87 0
 311 0074 285083E5 		str	r5, [r3, #40]
 312              	.LVL34:
 313              	.LBE67:
 314              	.LBE78:
 315              	.LBB79:
 316              	.LBB74:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 317              		.loc 3 92 0
 318 0078 2C8083E5 		str	r8, [r3, #44]
 319              	.LVL35:
 320              	.LBE74:
 321              	.LBE79:
 322              	.LBB80:
 323              	.LBB71:
 324              		.loc 3 97 0
 325 007c 3060C3E5 		strb	r6, [r3, #48]
 326              	.LVL36:
 327              	.LBE71:
 328              	.LBE80:
 329              	.LBB81:
 330              	.LBB77:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 331              		.loc 3 81 0
 332 0080 B492C3E1 		strh	r9, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 333              		.loc 3 82 0
 334 0084 B672C3E1 		strh	r7, [r3, #38]	@ movhi
 335              	.LVL37:
 336              	.LBE77:
 337              	.LBE81:
 338              	.LBB82:
 339              	.LBB83:
  71:include/fb/framebuffer.h **** 	return framebuffer->putstr(str,maxwidth);
 340              		.loc 3 71 0
 341 0088 041041E2 		sub	r1, r1, #4
 342              	.LVL38:
 343 008c E4009FE5 		ldr	r0, .L25+16
 344 0090 18C093E5 		ldr	ip, [r3, #24]
 345 0094 0FE0A0E1 		mov	lr, pc
 346 0098 1CFF2FE1 		bx	ip
 347              	.LVL39:
 348              	.LBE83:
 349              	.LBE82:
 350              	.LBB84:
 351              	.LBB85:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 352              		.loc 3 87 0
 353 009c 003094E5 		ldr	r3, [r4]
 354              	.LBE85:
 355              	.LBE84:
  93:apps/layer1/main.c **** 	fb_boxto(framebuffer->width-3,38);
 356              		.loc 1 93 0
 357 00a0 B002D3E1 		ldrh	r0, [r3, #32]
 358              	.LBB87:
 359              	.LBB86:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 360              		.loc 3 87 0
 361 00a4 FF28A0E3 		mov	r2, #16711680
 362 00a8 282083E5 		str	r2, [r3, #40]
 363              	.LVL40:
 364              	.LBE86:
 365              	.LBE87:
  93:apps/layer1/main.c **** 	fb_boxto(framebuffer->width-3,38);
 366              		.loc 1 93 0
 367 00ac 030040E2 		sub	r0, r0, #3
 368              	.LBB88:
 369              	.LBB89:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 370              		.loc 3 92 0
 371 00b0 FF20A0E3 		mov	r2, #255
 372 00b4 2C2083E5 		str	r2, [r3, #44]
 373              	.LVL41:
 374              	.LBE89:
 375              	.LBE88:
 376              	.LBB90:
 377              	.LBB91:
  61:include/fb/framebuffer.h **** 	framebuffer->boxto(x,y);
 378              		.loc 3 61 0
 379 00b8 0008A0E1 		mov	r0, r0, asl #16
 380              	.LBE91:
 381              	.LBE90:
 382              	.LBB93:
 383              	.LBB94:
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 384              		.loc 3 82 0
 385 00bc 1920A0E3 		mov	r2, #25
 386 00c0 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 387              	.LVL42:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 388              		.loc 3 81 0
 389 00c4 B492C3E1 		strh	r9, [r3, #36]	@ movhi
 390              	.LBE94:
 391              	.LBE93:
 392              	.LBB95:
 393              	.LBB92:
  61:include/fb/framebuffer.h **** 	framebuffer->boxto(x,y);
 394              		.loc 3 61 0
 395 00c8 2008A0E1 		mov	r0, r0, lsr #16
 396 00cc 2610A0E3 		mov	r1, #38
 397 00d0 10C093E5 		ldr	ip, [r3, #16]
 398 00d4 0FE0A0E1 		mov	lr, pc
 399 00d8 1CFF2FE1 		bx	ip
 400              	.LVL43:
 401              	.LBE92:
 402              	.LBE95:
 403              	.LBB96:
 404              	.LBB97:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 405              		.loc 3 87 0
 406 00dc 003094E5 		ldr	r3, [r4]
 407              	.LBE97:
 408              	.LBE96:
 409              	.LBB99:
 410              	.LBB100:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 411              		.loc 3 81 0
 412 00e0 0820A0E3 		mov	r2, #8
 413              	.LBE100:
 414              	.LBE99:
  98:apps/layer1/main.c **** 	fb_putstr("vadimbetman",framebuffer->width-4);
 415              		.loc 1 98 0
 416 00e4 B012D3E1 		ldrh	r1, [r3, #32]
 417              	.LBB102:
 418              	.LBB101:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 419              		.loc 3 81 0
 420 00e8 B422C3E1 		strh	r2, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 421              		.loc 3 82 0
 422 00ec 2120A0E3 		mov	r2, #33
 423 00f0 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 424              	.LBE101:
 425              	.LBE102:
 426              	.LBB103:
 427              	.LBB104:
  71:include/fb/framebuffer.h **** 	return framebuffer->putstr(str,maxwidth);
 428              		.loc 3 71 0
 429 00f4 041041E2 		sub	r1, r1, #4
 430              	.LBE104:
 431              	.LBE103:
 432              	.LBB106:
 433              	.LBB98:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 434              		.loc 3 87 0
 435 00f8 288083E5 		str	r8, [r3, #40]
 436              	.LVL44:
 437              	.LBE98:
 438              	.LBE106:
 439              	.LBB107:
 440              	.LBB108:
 441              		.loc 3 97 0
 442 00fc 3050C3E5 		strb	r5, [r3, #48]
 443              	.LVL45:
 444              	.LBE108:
 445              	.LBE107:
 446              	.LBB109:
 447              	.LBB105:
  71:include/fb/framebuffer.h **** 	return framebuffer->putstr(str,maxwidth);
 448              		.loc 3 71 0
 449 0100 74009FE5 		ldr	r0, .L25+20
 450 0104 18C093E5 		ldr	ip, [r3, #24]
 451 0108 0FE0A0E1 		mov	lr, pc
 452 010c 1CFF2FE1 		bx	ip
 453              	.LVL46:
 454              	.LBE105:
 455              	.LBE109:
 456              	.LBB110:
 457              	.LBB111:
  76:include/fb/framebuffer.h **** 	framebuffer->flush();
 458              		.loc 3 76 0
 459 0110 003094E5 		ldr	r3, [r4]
 460 0114 1CC093E5 		ldr	ip, [r3, #28]
 461 0118 0FE0A0E1 		mov	lr, pc
 462 011c 1CFF2FE1 		bx	ip
 463              	.LVL47:
 464              	.LBE111:
 465              	.LBE110:
 103:apps/layer1/main.c **** 	calypso_sim_init();
 466              		.loc 1 103 0
 467 0120 FEFFFFEB 		bl	calypso_sim_init
 468              	.LVL48:
 105:apps/layer1/main.c **** 	puts("Power up simcard:\n");
 469              		.loc 1 105 0
 470 0124 54009FE5 		ldr	r0, .L25+24
 471 0128 FEFFFFEB 		bl	puts
 472              	.LVL49:
 106:apps/layer1/main.c **** 	memset(atr,0,sizeof(atr));
 473              		.loc 1 106 0
 474 012c 0510A0E1 		mov	r1, r5
 475 0130 0720A0E1 		mov	r2, r7
 476 0134 04008DE2 		add	r0, sp, #4
 477 0138 FEFFFFEB 		bl	memset
 478              	.LVL50:
 107:apps/layer1/main.c **** 	atrLength = calypso_sim_powerup(atr);
 479              		.loc 1 107 0
 480 013c 04008DE2 		add	r0, sp, #4
 481 0140 FEFFFFEB 		bl	calypso_sim_powerup
 482              	.LVL51:
 109:apps/layer1/main.c **** 	layer1_init();
 483              		.loc 1 109 0
 484 0144 FEFFFFEB 		bl	layer1_init
 485              	.LVL52:
 111:apps/layer1/main.c **** 	tpu_frame_irq_en(1, 1);
 486              		.loc 1 111 0
 487 0148 0600A0E1 		mov	r0, r6
 488 014c 0610A0E1 		mov	r1, r6
 489 0150 FEFFFFEB 		bl	tpu_frame_irq_en
 490              	.LVL53:
 491              	.L24:
 114:apps/layer1/main.c **** 		l1a_compl_execute();
 492              		.loc 1 114 0 discriminator 1
 493 0154 FEFFFFEB 		bl	l1a_compl_execute
 494              	.LVL54:
 115:apps/layer1/main.c **** 		osmo_timers_update();
 495              		.loc 1 115 0 discriminator 1
 496 0158 FEFFFFEB 		bl	osmo_timers_update
 497              	.LVL55:
 116:apps/layer1/main.c **** 		sim_handler();
 498              		.loc 1 116 0 discriminator 1
 499 015c FEFFFFEB 		bl	sim_handler
 500              	.LVL56:
 117:apps/layer1/main.c **** 		l1a_l23_handler();
 501              		.loc 1 117 0 discriminator 1
 502 0160 FEFFFFEB 		bl	l1a_l23_handler
 503              	.LVL57:
 504 0164 FAFFFFEA 		b	.L24
 505              	.L26:
 506              		.align	2
 507              	.L25:
 508 0168 00000000 		.word	.LANCHOR1
 509 016c 1E000000 		.word	.LC2
 510 0170 00000000 		.word	key_handler
 511 0174 00000000 		.word	framebuffer
 512 0178 5D000000 		.word	.LC3
 513 017c 65000000 		.word	.LC4
 514 0180 71000000 		.word	.LC5
 515              		.cfi_endproc
 516              	.LFE60:
 518              		.global	hr
 519              		.section	.rodata.str1.1,"aMS",%progbits,1
 520              	.LC0:
 521 0000 54535041 		.ascii	"TSPACT%u toggle\012\000"
 521      43542575 
 521      20746F67 
 521      676C650A 
 521      00
 522              	.LC1:
 523 0011 41464320 		.ascii	"AFC OUT: %u\012\000"
 523      4F55543A 
 523      2025750A 
 523      00
 524              	.LC2:
 525 001e 0A0A5641 		.ascii	"\012\012VADIMBETMAN Layer 1 (revision osmocon_v0.0."
 525      44494D42 
 525      45544D41 
 525      4E204C61 
 525      79657220 
 526 004b 302D3137 		.ascii	"0-1766-g9ec3f72)\012\000"
 526      36362D67 
 526      39656333 
 526      66373229 
 526      0A00
 527              	.LC3:
 528 005d 4C617965 		.ascii	"Layer 1\000"
 528      72203100 
 529              	.LC4:
 530 0065 76616469 		.ascii	"vadimbetman\000"
 530      6D626574 
 530      6D616E00 
 531              	.LC5:
 532 0071 506F7765 		.ascii	"Power up simcard:\012\000"
 532      72207570 
 532      2073696D 
 532      63617264 
 532      3A0A00
 533              	.LC6:
 534 0084 3D3D3D3D 		.ascii	"==================================================="
 534      3D3D3D3D 
 534      3D3D3D3D 
 534      3D3D3D3D 
 534      3D3D3D3D 
 535 00b7 3D3D3D3D 		.ascii	"===================\012\000"
 535      3D3D3D3D 
 535      3D3D3D3D 
 535      3D3D3D3D 
 535      3D3D3D0A 
 536              		.data
 537              		.align	2
 538              		.set	.LANCHOR1,. + 0
 541              	hr:
 542 0000 84000000 		.word	.LC6
 543              		.bss
 544              		.align	2
 545              		.set	.LANCHOR0,. + 0
 548              	afcout:
 549 0000 00000000 		.space	4
 550              		.text
 551              	.Letext0:
 552              		.file 4 "/opt/arm/install/arm-none-eabi/sys-include/stdint.h"
 553              		.file 5 "include/keypad.h"
 554              		.file 6 "include/layer1/sync.h"
 555              		.file 7 "include/fb/font.h"
 556              		.file 8 "include/calypso/tsp.h"
 557              		.file 9 "include/abb/twl3025.h"
 558              		.file 10 "include/calypso/sim.h"
 559              		.file 11 "include/board.h"
 560              		.file 12 "include/stdio.h"
 561              		.file 13 "include/calypso/misc.h"
 562              		.file 14 "include/calypso/clock.h"
 563              		.file 15 "include/layer1/async.h"
 564              		.file 16 "include/comm/timer.h"
 565              		.file 17 "include/layer1/l23_api.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccTTwfv4.s:17     .text.tspact_toggle:00000000 $a
     /tmp/ccTTwfv4.s:19     .text.tspact_toggle:00000000 tspact_toggle
     /tmp/ccTTwfv4.s:75     .text.tspact_toggle:00000044 $d
     /tmp/ccTTwfv4.s:80     .text.key_handler:00000000 $a
     /tmp/ccTTwfv4.s:82     .text.key_handler:00000000 key_handler
     /tmp/ccTTwfv4.s:110    .text.key_handler:0000001c $d
     /tmp/ccTTwfv4.s:118    .text.key_handler:00000034 $a
     /tmp/ccTTwfv4.s:190    .text.key_handler:000000b4 $d
     /tmp/ccTTwfv4.s:198    .text.startup.main:00000000 $a
     /tmp/ccTTwfv4.s:201    .text.startup.main:00000000 main
     /tmp/ccTTwfv4.s:508    .text.startup.main:00000168 $d
     /tmp/ccTTwfv4.s:541    .data:00000000 hr
     /tmp/ccTTwfv4.s:537    .data:00000000 $d
     /tmp/ccTTwfv4.s:544    .bss:00000000 $d
     /tmp/ccTTwfv4.s:548    .bss:00000000 afcout
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
printf
tsp_act_toggle
tpu_enqueue
tpu_enable
tpu_wait_idle
twl3025_afc_set
twl3025_afcout_get
calypso_sim_powerdown
board_init
puts
dump_dev_id
keypad_set_handler
calypso_clk_dump
calypso_sim_init
memset
calypso_sim_powerup
layer1_init
tpu_frame_irq_en
l1a_compl_execute
osmo_timers_update
sim_handler
l1a_l23_handler
framebuffer
