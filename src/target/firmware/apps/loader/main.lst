   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"main.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.msgb_pull_u8,"ax",%progbits
  17              		.align	2
  19              	msgb_pull_u8:
  20              	.LFB33:
  21              		.file 1 "../../shared/libosmocore/include/osmocom/core/msgb.h"
   1:../../shared/libosmocore/include/osmocom/core/msgb.h **** #ifndef _MSGB_H
   2:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define _MSGB_H
   3:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
   4:../../shared/libosmocore/include/osmocom/core/msgb.h **** /* (C) 2008 by Harald Welte <laforge@gnumonks.org>
   5:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * All Rights Reserved
   6:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
   7:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This program is free software; you can redistribute it and/or modify
   8:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * it under the terms of the GNU General Public License as published by
   9:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * the Free Software Foundation; either version 2 of the License, or
  10:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * (at your option) any later version.
  11:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
  12:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This program is distributed in the hope that it will be useful,
  13:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * GNU General Public License for more details.
  16:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
  17:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * You should have received a copy of the GNU General Public License along
  18:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
  21:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
  22:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  23:../../shared/libosmocore/include/osmocom/core/msgb.h **** #include <stdint.h>
  24:../../shared/libosmocore/include/osmocom/core/msgb.h **** #include <osmocom/core/linuxlist.h>
  25:../../shared/libosmocore/include/osmocom/core/msgb.h **** #include <osmocom/core/utils.h>
  26:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  27:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \defgroup msgb Message buffers
  28:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  @{
  29:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
  30:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  31:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \file msgb.h
  32:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \brief Osmocom message buffers
  33:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * The Osmocom message buffers are modelled after the 'struct skb'
  34:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * inside the Linux kernel network stack.  As they exist in userspace,
  35:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * they are much simplified.  However, terminology such as headroom,
  36:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * tailroom, push/pull/put etc. remains the same.
  37:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
  38:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  39:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define MSGB_DEBUG
  40:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  41:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief Osmocom message buffer */
  42:../../shared/libosmocore/include/osmocom/core/msgb.h **** struct msgb {
  43:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	struct llist_head list; /*!< \brief linked list header */
  44:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  45:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  46:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	/* Part of which TRX logical channel we were received / transmitted */
  47:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	/* FIXME: move them into the control buffer */
  48:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	union {
  49:../../shared/libosmocore/include/osmocom/core/msgb.h **** 		void *dst; /*!< \brief reference of origin/destination */
  50:../../shared/libosmocore/include/osmocom/core/msgb.h **** 		struct gsm_bts_trx *trx;
  51:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	};
  52:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	struct gsm_lchan *lchan; /*!< \brief logical channel */
  53:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  54:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *l1h; /*!< \brief pointer to Layer1 header (if any) */
  55:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *l2h; /*!< \brief pointer to A-bis layer 2 header: OML, RSL(RLL), NS */
  56:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *l3h; /*!< \brief pointer to Layer 3 header. For OML: FOM; RSL: 04.08; GPRS: BSSGP *
  57:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *l4h; /*!< \brief pointer to layer 4 header */
  58:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  59:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned long cb[5]; /*!< \brief control buffer */
  60:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  61:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	uint16_t data_len;   /*!< \brief length of underlying data array */
  62:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	uint16_t len;	     /*!< \brief length of bytes used in msgb */
  63:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  64:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *head;	/*!< \brief start of underlying memory buffer */
  65:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *tail;	/*!< \brief end of message in buffer */
  66:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *data;	/*!< \brief start of message in buffer */
  67:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char _data[0]; /*!< \brief optional immediate data array */
  68:../../shared/libosmocore/include/osmocom/core/msgb.h **** };
  69:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  70:../../shared/libosmocore/include/osmocom/core/msgb.h **** extern struct msgb *msgb_alloc(uint16_t size, const char *name);
  71:../../shared/libosmocore/include/osmocom/core/msgb.h **** extern void msgb_free(struct msgb *m);
  72:../../shared/libosmocore/include/osmocom/core/msgb.h **** extern void msgb_enqueue(struct llist_head *queue, struct msgb *msg);
  73:../../shared/libosmocore/include/osmocom/core/msgb.h **** extern struct msgb *msgb_dequeue(struct llist_head *queue);
  74:../../shared/libosmocore/include/osmocom/core/msgb.h **** extern void msgb_reset(struct msgb *m);
  75:../../shared/libosmocore/include/osmocom/core/msgb.h **** uint16_t msgb_length(const struct msgb *msg);
  76:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  77:../../shared/libosmocore/include/osmocom/core/msgb.h **** #ifdef MSGB_DEBUG
  78:../../shared/libosmocore/include/osmocom/core/msgb.h **** #include <osmocom/core/panic.h>
  79:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define MSGB_ABORT(msg, fmt, args ...) do {		\
  80:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	osmo_panic("msgb(%p): " fmt, msg, ## args);	\
  81:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	} while(0)
  82:../../shared/libosmocore/include/osmocom/core/msgb.h **** #else
  83:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define MSGB_ABORT(msg, fmt, args ...)
  84:../../shared/libosmocore/include/osmocom/core/msgb.h **** #endif
  85:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  86:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief obtain L1 header of msgb */
  87:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define msgb_l1(m)	((void *)(m->l1h))
  88:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief obtain L2 header of msgb */
  89:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define msgb_l2(m)	((void *)(m->l2h))
  90:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief obtain L3 header of msgb */
  91:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define msgb_l3(m)	((void *)(m->l3h))
  92:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief obtain SMS header of msgb */
  93:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define msgb_sms(m)	((void *)(m->l4h))
  94:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  95:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief determine length of L1 message
  96:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
  97:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns size of L1 message in bytes
  98:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
  99:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function computes the number of bytes between the tail of the
 100:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * message and the layer 1 header.
 101:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 102:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline unsigned int msgb_l1len(const struct msgb *msgb)
 103:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 104:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l1(msgb);
 105:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 106:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 107:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief determine length of L2 message
 108:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 109:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns size of L2 message in bytes
 110:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 111:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function computes the number of bytes between the tail of the
 112:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * message and the layer 2 header.
 113:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 114:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline unsigned int msgb_l2len(const struct msgb *msgb)
 115:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 116:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l2(msgb);
 117:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 118:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 119:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief determine length of L3 message
 120:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 121:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns size of L3 message in bytes
 122:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 123:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function computes the number of bytes between the tail of the
 124:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * message and the layer 3 header.
 125:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 126:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline unsigned int msgb_l3len(const struct msgb *msgb)
 127:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 128:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l3(msgb);
 129:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 130:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 131:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief determine the length of the header
 132:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 133:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns number of bytes between start of buffer and start of msg
 134:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 135:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function computes the length difference between the underlying
 136:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * data buffer and the used section of the \a msgb.
 137:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 138:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline unsigned int msgb_headlen(const struct msgb *msgb)
 139:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 140:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->len - msgb->data_len;
 141:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 142:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 143:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief determine how much tail room is left in msgb
 144:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 145:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns number of bytes remaining at end of msgb
 146:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 147:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function computes the amount of octets left in the underlying
 148:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * data buffer after the end of the message.
 149:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 150:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline int msgb_tailroom(const struct msgb *msgb)
 151:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 152:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return (msgb->head + msgb->data_len) - msgb->tail;
 153:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 154:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 155:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief determine the amount of headroom in msgb
 156:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 157:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns number of bytes left ahead of message start in msgb
 158:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 159:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function computes the amount of bytes left in the underlying
 160:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * data buffer before the start of the actual message.
 161:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 162:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline int msgb_headroom(const struct msgb *msgb)
 163:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 164:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return (msgb->data - msgb->head);
 165:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 166:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 167:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief append data to end of message buffer
 168:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 169:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] len number of bytes to append to message
 170:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns pointer to start of newly-appended data
 171:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 172:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function will move the \a tail pointer of the message buffer \a
 173:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * len bytes further, thus enlarging the message by \a len bytes.
 174:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 175:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * The return value is a pointer to start of the newly added section at
 176:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * the end of the message and can be used for actually filling/copying
 177:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * data into it.
 178:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 179:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline unsigned char *msgb_put(struct msgb *msgb, unsigned int len)
 180:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 181:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *tmp = msgb->tail;
 182:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	if (msgb_tailroom(msgb) < (int) len)
 183:../../shared/libosmocore/include/osmocom/core/msgb.h **** 		MSGB_ABORT(msgb, "Not enough tailroom msgb_push (%u < %u)\n",
 184:../../shared/libosmocore/include/osmocom/core/msgb.h **** 			   msgb_tailroom(msgb), len);
 185:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->tail += len;
 186:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->len += len;
 187:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return tmp;
 188:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 189:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 190:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief append a uint8 value to the end of the message
 191:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 192:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] word unsigned 8bit byte to be appended
 193:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 194:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline void msgb_put_u8(struct msgb *msgb, uint8_t word)
 195:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 196:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	uint8_t *space = msgb_put(msgb, 1);
 197:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	space[0] = word & 0xFF;
 198:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 199:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 200:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief append a uint16 value to the end of the message
 201:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 202:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] word unsigned 16bit byte to be appended
 203:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 204:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline void msgb_put_u16(struct msgb *msgb, uint16_t word)
 205:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 206:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	uint8_t *space = msgb_put(msgb, 2);
 207:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	space[0] = word >> 8 & 0xFF;
 208:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	space[1] = word & 0xFF;
 209:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 210:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 211:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief append a uint32 value to the end of the message
 212:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 213:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] word unsigned 32bit byte to be appended
 214:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 215:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline void msgb_put_u32(struct msgb *msgb, uint32_t word)
 216:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 217:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	uint8_t *space = msgb_put(msgb, 4);
 218:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	space[0] = word >> 24 & 0xFF;
 219:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	space[1] = word >> 16 & 0xFF;
 220:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	space[2] = word >> 8 & 0xFF;
 221:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	space[3] = word & 0xFF;
 222:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 223:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 224:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief remove data from end of message
 225:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 226:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] len number of bytes to remove from end
 227:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 228:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline unsigned char *msgb_get(struct msgb *msgb, unsigned int len)
 229:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 230:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *tmp = msgb->data - len;
 231:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	if (msgb_length(msgb) < len)
 232:../../shared/libosmocore/include/osmocom/core/msgb.h **** 		MSGB_ABORT(msgb, "msgb too small to get %u (len %u)\n",
 233:../../shared/libosmocore/include/osmocom/core/msgb.h **** 			   len, msgb_length(msgb));
 234:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->tail -= len;
 235:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->len -= len;
 236:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return tmp;
 237:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 238:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief remove uint8 from end of message
 239:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 240:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns 8bit value taken from end of msgb
 241:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 242:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline uint8_t msgb_get_u8(struct msgb *msgb)
 243:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 244:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	uint8_t *space = msgb_get(msgb, 1);
 245:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return space[0];
 246:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 247:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief remove uint16 from end of message
 248:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 249:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns 16bit value taken from end of msgb
 250:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 251:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline uint16_t msgb_get_u16(struct msgb *msgb)
 252:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 253:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	uint8_t *space = msgb_get(msgb, 2);
 254:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return space[0] << 8 | space[1];
 255:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 256:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief remove uint32 from end of message
 257:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 258:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns 32bit value taken from end of msgb
 259:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 260:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline uint32_t msgb_get_u32(struct msgb *msgb)
 261:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 262:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	uint8_t *space = msgb_get(msgb, 4);
 263:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return space[0] << 24 | space[1] << 16 | space[2] << 8 | space[3];
 264:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 265:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 266:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief prepend (push) some data to start of message
 267:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 268:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] len number of bytes to pre-pend
 269:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns pointer to newly added portion at start of \a msgb
 270:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 271:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function moves the \a data pointer of the \ref msgb further
 272:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * to the front (by \a len bytes), thereby enlarging the message by \a
 273:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * len bytes.
 274:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 275:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * The return value is a pointer to the newly added section in the
 276:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * beginning of the message.  It can be used to fill/copy data into it.
 277:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 278:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline unsigned char *msgb_push(struct msgb *msgb, unsigned int len)
 279:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 280:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	if (msgb_headroom(msgb) < (int) len)
 281:../../shared/libosmocore/include/osmocom/core/msgb.h **** 		MSGB_ABORT(msgb, "Not enough headroom msgb_push (%u < %u)\n",
 282:../../shared/libosmocore/include/osmocom/core/msgb.h **** 			   msgb_headroom(msgb), len);
 283:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->data -= len;
 284:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->len += len;
 285:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->data;
 286:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 287:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief remove (pull) a header from the front of the message buffer
 288:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 289:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] len number of octets to be pulled
 290:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns pointer to new start of msgb
 291:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 292:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function moves the \a data pointer of the \ref msgb further back
 293:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * in the message, thereby shrinking the size of the message by \a len
 294:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * bytes.
 295:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 296:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline unsigned char *msgb_pull(struct msgb *msgb, unsigned int len)
 297:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 298:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->len -= len;
 299:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->data += len;
 300:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 301:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 302:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief remove uint8 from front of message
 303:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 304:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns 8bit value taken from end of msgb
 305:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 306:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline uint8_t msgb_pull_u8(struct msgb *msgb)
 307:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
  22              		.loc 1 307 0
  23              		.cfi_startproc
  24              		@ Function supports interworking.
  25              		@ args = 0, pretend = 0, frame = 0
  26              		@ frame_needed = 0, uses_anonymous_args = 0
  27              		@ link register save eliminated.
  28              	.LVL0:
  29              	.LBB34:
  30              	.LBB35:
 298:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->len -= len;
  31              		.loc 1 298 0
  32 0000 B633D0E1 		ldrh	r3, [r0, #54]
  33 0004 013043E2 		sub	r3, r3, #1
  34 0008 B633C0E1 		strh	r3, [r0, #54]	@ movhi
 299:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->data += len;
  35              		.loc 1 299 0
  36 000c 403090E5 		ldr	r3, [r0, #64]
  37 0010 012083E2 		add	r2, r3, #1
  38 0014 402080E5 		str	r2, [r0, #64]
  39              	.LVL1:
  40              	.LBE35:
  41              	.LBE34:
 308:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	uint8_t *space = msgb_pull(msgb, 1) - 1;
 309:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return space[0];
 310:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
  42              		.loc 1 310 0
  43 0018 0000D3E5 		ldrb	r0, [r3]	@ zero_extendqisi2
  44              	.LVL2:
  45 001c 1EFF2FE1 		bx	lr
  46              		.cfi_endproc
  47              	.LFE33:
  49              		.section	.text.msgb_pull_u32,"ax",%progbits
  50              		.align	2
  52              	msgb_pull_u32:
  53              	.LFB35:
 311:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief remove uint16 from front of message
 312:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 313:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns 16bit value taken from end of msgb
 314:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 315:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline uint16_t msgb_pull_u16(struct msgb *msgb)
 316:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 317:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	uint8_t *space = msgb_pull(msgb, 2) - 2;
 318:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return space[0] << 8 | space[1];
 319:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 320:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief remove uint32 from front of message
 321:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 322:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns 32bit value taken from end of msgb
 323:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 324:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline uint32_t msgb_pull_u32(struct msgb *msgb)
 325:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
  54              		.loc 1 325 0
  55              		.cfi_startproc
  56              		@ Function supports interworking.
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		@ link register save eliminated.
  60              	.LVL3:
  61              	.LBB36:
  62              	.LBB37:
 298:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->len -= len;
  63              		.loc 1 298 0
  64 0000 B633D0E1 		ldrh	r3, [r0, #54]
  65 0004 043043E2 		sub	r3, r3, #4
  66 0008 B633C0E1 		strh	r3, [r0, #54]	@ movhi
 299:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->data += len;
  67              		.loc 1 299 0
  68 000c 403090E5 		ldr	r3, [r0, #64]
  69 0010 042083E2 		add	r2, r3, #4
  70 0014 402080E5 		str	r2, [r0, #64]
  71              	.LVL4:
  72              	.LBE37:
  73              	.LBE36:
 326:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	uint8_t *space = msgb_pull(msgb, 4) - 4;
 327:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return space[0] << 24 | space[1] << 16 | space[2] << 8 | space[3];
  74              		.loc 1 327 0
  75 0018 0120D3E5 		ldrb	r2, [r3, #1]	@ zero_extendqisi2
  76 001c 0010D3E5 		ldrb	r1, [r3]	@ zero_extendqisi2
  77 0020 0228A0E1 		mov	r2, r2, asl #16
  78 0024 012C82E1 		orr	r2, r2, r1, asl #24
  79 0028 0310D3E5 		ldrb	r1, [r3, #3]	@ zero_extendqisi2
  80 002c 0200D3E5 		ldrb	r0, [r3, #2]	@ zero_extendqisi2
  81              	.LVL5:
  82 0030 012082E1 		orr	r2, r2, r1
 328:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
  83              		.loc 1 328 0
  84 0034 000482E1 		orr	r0, r2, r0, asl #8
  85 0038 1EFF2FE1 		bx	lr
  86              		.cfi_endproc
  87              	.LFE35:
  89              		.section	.text.flush_uart,"ax",%progbits
  90              		.align	2
  92              	flush_uart:
  93              	.LFB61:
  94              		.file 2 "apps/loader/main.c"
   1:apps/loader/main.c **** /* boot loader for Calypso phones */
   2:apps/loader/main.c **** 
   3:apps/loader/main.c **** /* (C) 2010 by Ingo Albrecht <prom@berlin.ccc.de>
   4:apps/loader/main.c ****  *
   5:apps/loader/main.c ****  * All Rights Reserved
   6:apps/loader/main.c ****  *
   7:apps/loader/main.c ****  * This program is free software; you can redistribute it and/or modify
   8:apps/loader/main.c ****  * it under the terms of the GNU General Public License as published by
   9:apps/loader/main.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:apps/loader/main.c ****  * (at your option) any later version.
  11:apps/loader/main.c ****  *
  12:apps/loader/main.c ****  * This program is distributed in the hope that it will be useful,
  13:apps/loader/main.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:apps/loader/main.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:apps/loader/main.c ****  * GNU General Public License for more details.
  16:apps/loader/main.c ****  *
  17:apps/loader/main.c ****  * You should have received a copy of the GNU General Public License along
  18:apps/loader/main.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:apps/loader/main.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:apps/loader/main.c ****  *
  21:apps/loader/main.c ****  */
  22:apps/loader/main.c **** 
  23:apps/loader/main.c **** #include <stdint.h>
  24:apps/loader/main.c **** #include <stdio.h>
  25:apps/loader/main.c **** #include <string.h>
  26:apps/loader/main.c **** 
  27:apps/loader/main.c **** #include <debug.h>
  28:apps/loader/main.c **** #include <memory.h>
  29:apps/loader/main.c **** #include <delay.h>
  30:apps/loader/main.c **** #include <rffe.h>
  31:apps/loader/main.c **** #include <keypad.h>
  32:apps/loader/main.c **** #include <board.h>
  33:apps/loader/main.c **** #include <console.h>
  34:apps/loader/main.c **** #include <manifest.h>
  35:apps/loader/main.c **** 
  36:apps/loader/main.c **** #include <osmocom/core/crc16.h>
  37:apps/loader/main.c **** 
  38:apps/loader/main.c **** #include <abb/twl3025.h>
  39:apps/loader/main.c **** #include <rf/trf6151.h>
  40:apps/loader/main.c **** 
  41:apps/loader/main.c **** #include <comm/sercomm.h>
  42:apps/loader/main.c **** 
  43:apps/loader/main.c **** #include <calypso/clock.h>
  44:apps/loader/main.c **** #include <calypso/tpu.h>
  45:apps/loader/main.c **** #include <calypso/tsp.h>
  46:apps/loader/main.c **** #include <calypso/irq.h>
  47:apps/loader/main.c **** #include <calypso/misc.h>
  48:apps/loader/main.c **** #include <calypso/backlight.h>
  49:apps/loader/main.c **** #include <uart.h>
  50:apps/loader/main.c **** #include <calypso/timer.h>
  51:apps/loader/main.c **** #include <fb/framebuffer.h>
  52:apps/loader/main.c **** 
  53:apps/loader/main.c **** #include <flash/cfi_flash.h>
  54:apps/loader/main.c **** 
  55:apps/loader/main.c **** #include "protocol.h"
  56:apps/loader/main.c **** 
  57:apps/loader/main.c **** /* Main Program */
  58:apps/loader/main.c **** const char *hr =
  59:apps/loader/main.c ****     "======================================================================\n";
  60:apps/loader/main.c **** 
  61:apps/loader/main.c **** static void key_handler(enum key_codes code, enum key_states state);
  62:apps/loader/main.c **** static void cmd_handler(uint8_t dlci, struct msgb *msg);
  63:apps/loader/main.c **** 
  64:apps/loader/main.c **** int flag = 0;
  65:apps/loader/main.c **** static int sercomm_uart;
  66:apps/loader/main.c **** 
  67:apps/loader/main.c **** static void flush_uart(void)
  68:apps/loader/main.c **** {
  95              		.loc 2 68 0
  96              		.cfi_startproc
  97              		@ Function supports interworking.
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              	.LVL6:
 101 0000 38402DE9 		stmfd	sp!, {r3, r4, r5, lr}
 102              	.LCFI0:
 103              		.cfi_def_cfa_offset 16
 104              		.cfi_offset 3, -16
 105              		.cfi_offset 4, -12
 106              		.cfi_offset 5, -8
 107              		.cfi_offset 14, -4
  69:apps/loader/main.c **** 	unsigned i;
  70:apps/loader/main.c **** 	for (i = 0; i < 500; i++) {
  71:apps/loader/main.c **** 		uart_poll(sercomm_uart);
 108              		.loc 2 71 0
 109 0004 20509FE5 		ldr	r5, .L7
  68:apps/loader/main.c **** {
 110              		.loc 2 68 0
 111 0008 7D4FA0E3 		mov	r4, #500
 112              	.LVL7:
 113              	.L5:
 114              		.loc 2 71 0 discriminator 2
 115 000c 0000D5E5 		ldrb	r0, [r5]	@ zero_extendqisi2
 116 0010 FEFFFFEB 		bl	uart_poll
 117              	.LVL8:
  72:apps/loader/main.c **** 		delay_ms(1);
 118              		.loc 2 72 0 discriminator 2
 119 0014 0100A0E3 		mov	r0, #1
 120 0018 FEFFFFEB 		bl	delay_ms
 121              	.LVL9:
  70:apps/loader/main.c **** 	for (i = 0; i < 500; i++) {
 122              		.loc 2 70 0 discriminator 2
 123 001c 014054E2 		subs	r4, r4, #1
 124              	.LVL10:
 125 0020 F9FFFF1A 		bne	.L5
  73:apps/loader/main.c **** 	}
  74:apps/loader/main.c **** }
 126              		.loc 2 74 0
 127 0024 3840BDE8 		ldmfd	sp!, {r3, r4, r5, lr}
 128              	.LVL11:
 129 0028 1EFF2FE1 		bx	lr
 130              	.L8:
 131              		.align	2
 132              	.L7:
 133 002c 00000000 		.word	.LANCHOR0
 134              		.cfi_endproc
 135              	.LFE61:
 137              		.section	.text.msgb_put,"ax",%progbits
 138              		.align	2
 140              	msgb_put:
 141              	.LFB23:
 180:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 142              		.loc 1 180 0
 143              		.cfi_startproc
 144              		@ Function supports interworking.
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              	.LVL12:
 148              	.LBB40:
 149              	.LBB41:
 152:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return (msgb->head + msgb->data_len) - msgb->tail;
 150              		.loc 1 152 0
 151 0000 B433D0E1 		ldrh	r3, [r0, #52]
 152 0004 382090E5 		ldr	r2, [r0, #56]
 153              	.LBE41:
 154              	.LBE40:
 180:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 155              		.loc 1 180 0
 156 0008 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 157              	.LCFI1:
 158              		.cfi_def_cfa_offset 16
 159              		.cfi_offset 4, -16
 160              		.cfi_offset 5, -12
 161              		.cfi_offset 6, -8
 162              		.cfi_offset 14, -4
 181:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *tmp = msgb->tail;
 163              		.loc 1 181 0
 164 000c 3C6090E5 		ldr	r6, [r0, #60]
 165              	.LVL13:
 166              	.LBB43:
 167              	.LBB42:
 152:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return (msgb->head + msgb->data_len) - msgb->tail;
 168              		.loc 1 152 0
 169 0010 032082E0 		add	r2, r2, r3
 170 0014 022066E0 		rsb	r2, r6, r2
 171              	.LBE42:
 172              	.LBE43:
 182:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	if (msgb_tailroom(msgb) < (int) len)
 173              		.loc 1 182 0
 174 0018 010052E1 		cmp	r2, r1
 180:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 175              		.loc 1 180 0
 176 001c 0040A0E1 		mov	r4, r0
 177 0020 0150A0E1 		mov	r5, r1
 182:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	if (msgb_tailroom(msgb) < (int) len)
 178              		.loc 1 182 0
 183:../../shared/libosmocore/include/osmocom/core/msgb.h **** 		MSGB_ABORT(msgb, "Not enough tailroom msgb_push (%u < %u)\n",
 179              		.loc 1 183 0
 180 0024 2C009FB5 		ldrlt	r0, .L11
 181              	.LVL14:
 182 0028 0410A0B1 		movlt	r1, r4
 183              	.LVL15:
 184 002c 0530A0B1 		movlt	r3, r5
 185 0030 FEFFFFBB 		bllt	osmo_panic
 186              	.LVL16:
 187              	.L10:
 185:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->tail += len;
 188              		.loc 1 185 0
 189 0034 3C3094E5 		ldr	r3, [r4, #60]
 190 0038 053083E0 		add	r3, r3, r5
 191 003c 3C3084E5 		str	r3, [r4, #60]
 186:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->len += len;
 192              		.loc 1 186 0
 193 0040 B633D4E1 		ldrh	r3, [r4, #54]
 194 0044 035085E0 		add	r5, r5, r3
 195              	.LVL17:
 188:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 196              		.loc 1 188 0
 197 0048 0600A0E1 		mov	r0, r6
 186:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->len += len;
 198              		.loc 1 186 0
 199 004c B653C4E1 		strh	r5, [r4, #54]	@ movhi
 188:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 200              		.loc 1 188 0
 201 0050 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 202              	.LVL18:
 203 0054 1EFF2FE1 		bx	lr
 204              	.L12:
 205              		.align	2
 206              	.L11:
 207 0058 00000000 		.word	.LC0
 208              		.cfi_endproc
 209              	.LFE23:
 211              		.section	.text.msgb_put_u16,"ax",%progbits
 212              		.align	2
 214              	msgb_put_u16:
 215              	.LFB25:
 205:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 216              		.loc 1 205 0
 217              		.cfi_startproc
 218              		@ Function supports interworking.
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221              	.LVL19:
 222 0000 10402DE9 		stmfd	sp!, {r4, lr}
 223              	.LCFI2:
 224              		.cfi_def_cfa_offset 8
 225              		.cfi_offset 4, -8
 226              		.cfi_offset 14, -4
 205:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 227              		.loc 1 205 0
 228 0004 0140A0E1 		mov	r4, r1
 206:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	uint8_t *space = msgb_put(msgb, 2);
 229              		.loc 1 206 0
 230 0008 0210A0E3 		mov	r1, #2
 231              	.LVL20:
 232 000c FEFFFFEB 		bl	msgb_put
 233              	.LVL21:
 207:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	space[0] = word >> 8 & 0xFF;
 234              		.loc 1 207 0
 235 0010 2434A0E1 		mov	r3, r4, lsr #8
 236 0014 0030C0E5 		strb	r3, [r0]
 208:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	space[1] = word & 0xFF;
 237              		.loc 1 208 0
 238 0018 0140C0E5 		strb	r4, [r0, #1]
 209:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 239              		.loc 1 209 0
 240 001c 1040BDE8 		ldmfd	sp!, {r4, lr}
 241 0020 1EFF2FE1 		bx	lr
 242              		.cfi_endproc
 243              	.LFE25:
 245              		.section	.text.msgb_put_u8,"ax",%progbits
 246              		.align	2
 248              	msgb_put_u8:
 249              	.LFB24:
 195:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 250              		.loc 1 195 0
 251              		.cfi_startproc
 252              		@ Function supports interworking.
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255              	.LVL22:
 256 0000 10402DE9 		stmfd	sp!, {r4, lr}
 257              	.LCFI3:
 258              		.cfi_def_cfa_offset 8
 259              		.cfi_offset 4, -8
 260              		.cfi_offset 14, -4
 195:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 261              		.loc 1 195 0
 262 0004 0140A0E1 		mov	r4, r1
 196:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	uint8_t *space = msgb_put(msgb, 1);
 263              		.loc 1 196 0
 264 0008 0110A0E3 		mov	r1, #1
 265              	.LVL23:
 266 000c FEFFFFEB 		bl	msgb_put
 267              	.LVL24:
 197:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	space[0] = word & 0xFF;
 268              		.loc 1 197 0
 269 0010 0040C0E5 		strb	r4, [r0]
 198:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 270              		.loc 1 198 0
 271 0014 1040BDE8 		ldmfd	sp!, {r4, lr}
 272 0018 1EFF2FE1 		bx	lr
 273              		.cfi_endproc
 274              	.LFE24:
 276              		.section	.text.loader_send_simple,"ax",%progbits
 277              		.align	2
 279              	loader_send_simple:
 280              	.LFB66:
  75:apps/loader/main.c **** 
  76:apps/loader/main.c **** static void device_poweroff(void)
  77:apps/loader/main.c **** {
  78:apps/loader/main.c **** 	flush_uart();
  79:apps/loader/main.c **** 	twl3025_power_off();
  80:apps/loader/main.c **** }
  81:apps/loader/main.c **** 
  82:apps/loader/main.c **** static void device_reset(void)
  83:apps/loader/main.c **** {
  84:apps/loader/main.c **** 	flush_uart();
  85:apps/loader/main.c **** 	wdog_reset();
  86:apps/loader/main.c **** }
  87:apps/loader/main.c **** 
  88:apps/loader/main.c **** static void device_enter_loader(unsigned char bootrom)
  89:apps/loader/main.c **** {
  90:apps/loader/main.c **** 	flush_uart();
  91:apps/loader/main.c **** 
  92:apps/loader/main.c **** 	calypso_bootrom(bootrom);
  93:apps/loader/main.c **** 	void (*entry) (void) = (void (*)(void))0;
  94:apps/loader/main.c **** 	entry();
  95:apps/loader/main.c **** }
  96:apps/loader/main.c **** 
  97:apps/loader/main.c **** static void device_jump(void *entry)
  98:apps/loader/main.c **** {
  99:apps/loader/main.c **** 	flush_uart();
 100:apps/loader/main.c **** 
 101:apps/loader/main.c **** 	void (*f) (void) = (void (*)(void))entry;
 102:apps/loader/main.c **** 	f();
 103:apps/loader/main.c **** }
 104:apps/loader/main.c **** 
 105:apps/loader/main.c **** static void loader_send_simple(struct msgb *msg, uint8_t dlci, uint8_t command)
 106:apps/loader/main.c **** {
 281              		.loc 2 106 0
 282              		.cfi_startproc
 283              		@ Function supports interworking.
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 286              	.LVL25:
 287 0000 38402DE9 		stmfd	sp!, {r3, r4, r5, lr}
 288              	.LCFI4:
 289              		.cfi_def_cfa_offset 16
 290              		.cfi_offset 3, -16
 291              		.cfi_offset 4, -12
 292              		.cfi_offset 5, -8
 293              		.cfi_offset 14, -4
 294              		.loc 2 106 0
 295 0004 0040A0E1 		mov	r4, r0
 296 0008 0150A0E1 		mov	r5, r1
 107:apps/loader/main.c **** 	msgb_put_u8(msg, command);
 297              		.loc 2 107 0
 298 000c 0210A0E1 		mov	r1, r2
 299              	.LVL26:
 300 0010 FEFFFFEB 		bl	msgb_put_u8
 301              	.LVL27:
 108:apps/loader/main.c **** 	sercomm_sendmsg(dlci, msg);
 302              		.loc 2 108 0
 303 0014 0500A0E1 		mov	r0, r5
 304 0018 0410A0E1 		mov	r1, r4
 305 001c FEFFFFEB 		bl	sercomm_sendmsg
 306              	.LVL28:
 109:apps/loader/main.c **** }
 307              		.loc 2 109 0
 308 0020 3840BDE8 		ldmfd	sp!, {r3, r4, r5, lr}
 309              	.LVL29:
 310 0024 1EFF2FE1 		bx	lr
 311              		.cfi_endproc
 312              	.LFE66:
 314              		.section	.text.msgb_put_u32,"ax",%progbits
 315              		.align	2
 317              	msgb_put_u32:
 318              	.LFB26:
 216:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 319              		.loc 1 216 0
 320              		.cfi_startproc
 321              		@ Function supports interworking.
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 324              	.LVL30:
 325 0000 10402DE9 		stmfd	sp!, {r4, lr}
 326              	.LCFI5:
 327              		.cfi_def_cfa_offset 8
 328              		.cfi_offset 4, -8
 329              		.cfi_offset 14, -4
 216:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 330              		.loc 1 216 0
 331 0004 0140A0E1 		mov	r4, r1
 217:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	uint8_t *space = msgb_put(msgb, 4);
 332              		.loc 1 217 0
 333 0008 0410A0E3 		mov	r1, #4
 334              	.LVL31:
 335 000c FEFFFFEB 		bl	msgb_put
 336              	.LVL32:
 218:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	space[0] = word >> 24 & 0xFF;
 337              		.loc 1 218 0
 338 0010 243CA0E1 		mov	r3, r4, lsr #24
 339 0014 0030C0E5 		strb	r3, [r0]
 219:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	space[1] = word >> 16 & 0xFF;
 340              		.loc 1 219 0
 341 0018 2438A0E1 		mov	r3, r4, lsr #16
 342 001c 0130C0E5 		strb	r3, [r0, #1]
 220:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	space[2] = word >> 8 & 0xFF;
 343              		.loc 1 220 0
 344 0020 2434A0E1 		mov	r3, r4, lsr #8
 345 0024 0230C0E5 		strb	r3, [r0, #2]
 221:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	space[3] = word & 0xFF;
 346              		.loc 1 221 0
 347 0028 0340C0E5 		strb	r4, [r0, #3]
 222:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 348              		.loc 1 222 0
 349 002c 1040BDE8 		ldmfd	sp!, {r4, lr}
 350              	.LVL33:
 351 0030 1EFF2FE1 		bx	lr
 352              		.cfi_endproc
 353              	.LFE26:
 355              		.section	.text.key_handler,"ax",%progbits
 356              		.align	2
 358              	key_handler:
 359              	.LFB70:
 110:apps/loader/main.c **** 
 111:apps/loader/main.c **** extern unsigned char _start;
 112:apps/loader/main.c **** 
 113:apps/loader/main.c **** static void loader_send_init(uint8_t dlci)
 114:apps/loader/main.c **** {
 115:apps/loader/main.c **** 	struct msgb *msg = sercomm_alloc_msgb(9);
 116:apps/loader/main.c **** 	msgb_put_u8(msg, LOADER_INIT);
 117:apps/loader/main.c **** 	msgb_put_u32(msg, 0);
 118:apps/loader/main.c **** 	msgb_put_u32(msg, &_start);
 119:apps/loader/main.c **** 	sercomm_sendmsg(dlci, msg);
 120:apps/loader/main.c **** }
 121:apps/loader/main.c **** 
 122:apps/loader/main.c **** flash_t the_flash;
 123:apps/loader/main.c **** 
 124:apps/loader/main.c **** extern void putchar_asm(uint32_t c);
 125:apps/loader/main.c **** 
 126:apps/loader/main.c **** static const uint8_t phone_ack[] = { 0x1b, 0xf6, 0x02, 0x00, 0x41, 0x03, 0x42 };
 127:apps/loader/main.c **** 
 128:apps/loader/main.c **** int main(void)
 129:apps/loader/main.c **** {
 130:apps/loader/main.c **** 	/* Simulate a compal loader saying "ACK" */
 131:apps/loader/main.c **** 	int i = 0;
 132:apps/loader/main.c **** 	for (i = 0; i < sizeof(phone_ack); i++) {
 133:apps/loader/main.c **** 		putchar_asm(phone_ack[i]);
 134:apps/loader/main.c **** 	}
 135:apps/loader/main.c **** 
 136:apps/loader/main.c **** 	/* initialize board without interrupts */
 137:apps/loader/main.c **** 	board_init(0);
 138:apps/loader/main.c **** 	sercomm_uart = sercomm_get_uart();
 139:apps/loader/main.c **** 
 140:apps/loader/main.c **** 	/* Say hi */
 141:apps/loader/main.c **** 	puts("\n\nVADIMBETMAN Loader (revision " GIT_REVISION ")\n");
 142:apps/loader/main.c **** 	puts(hr);
 143:apps/loader/main.c **** 
 144:apps/loader/main.c **** 	fb_clear();
 145:apps/loader/main.c **** 
 146:apps/loader/main.c **** 	fb_setfg(FB_COLOR_BLACK);
 147:apps/loader/main.c **** 	fb_setbg(FB_COLOR_WHITE);
 148:apps/loader/main.c **** 	fb_setfont(FB_FONT_HELVB14);
 149:apps/loader/main.c **** 
 150:apps/loader/main.c **** 	fb_gotoxy(2,20);
 151:apps/loader/main.c **** 	fb_putstr("loader",framebuffer->width-4);
 152:apps/loader/main.c **** 
 153:apps/loader/main.c **** 	fb_setfg(FB_COLOR_RED);
 154:apps/loader/main.c **** 	fb_setbg(FB_COLOR_BLUE);
 155:apps/loader/main.c **** 
 156:apps/loader/main.c **** 	fb_gotoxy(2,25);
 157:apps/loader/main.c **** 	fb_boxto(framebuffer->width-3,38);
 158:apps/loader/main.c **** 
 159:apps/loader/main.c **** 	fb_setfg(FB_COLOR_WHITE);
 160:apps/loader/main.c **** 	fb_setfont(FB_FONT_HELVR08);
 161:apps/loader/main.c **** 	fb_gotoxy(8,33);
 162:apps/loader/main.c **** 	fb_putstr("vadimbetman",framebuffer->width-4);
 163:apps/loader/main.c **** 
 164:apps/loader/main.c **** 	fb_flush();
 165:apps/loader/main.c **** 
 166:apps/loader/main.c **** 	/* Identify environment */
 167:apps/loader/main.c **** 	printf("Running on %s in environment %s\n", manifest_board,
 168:apps/loader/main.c **** 	       manifest_environment);
 169:apps/loader/main.c **** 
 170:apps/loader/main.c **** 	/* Initialize flash driver */
 171:apps/loader/main.c **** 	if (flash_init(&the_flash, 0)) {
 172:apps/loader/main.c **** 		puts("Failed to initialize flash!\n");
 173:apps/loader/main.c **** 	} else {
 174:apps/loader/main.c **** 		printf("Found flash of %d bytes at 0x%x with %d regions\n",
 175:apps/loader/main.c **** 		       the_flash.f_size, the_flash.f_base,
 176:apps/loader/main.c **** 		       the_flash.f_nregions);
 177:apps/loader/main.c **** 
 178:apps/loader/main.c **** 		int i;
 179:apps/loader/main.c **** 		for (i = 0; i < the_flash.f_nregions; i++) {
 180:apps/loader/main.c **** 			printf("  Region %d of %d pages with %d bytes each.\n",
 181:apps/loader/main.c **** 			       i,
 182:apps/loader/main.c **** 			       the_flash.f_regions[i].fr_bnum,
 183:apps/loader/main.c **** 			       the_flash.f_regions[i].fr_bsize);
 184:apps/loader/main.c **** 		}
 185:apps/loader/main.c **** 
 186:apps/loader/main.c **** 	}
 187:apps/loader/main.c **** 
 188:apps/loader/main.c **** 	/* Set up a key handler for powering off */
 189:apps/loader/main.c **** 	keypad_set_handler(&key_handler);
 190:apps/loader/main.c **** 
 191:apps/loader/main.c **** 	/* Set up loader communications */
 192:apps/loader/main.c **** 	sercomm_register_rx_cb(SC_DLCI_LOADER, &cmd_handler);
 193:apps/loader/main.c **** 
 194:apps/loader/main.c **** 	/* Notify any running osmoload about our startup */
 195:apps/loader/main.c **** 	loader_send_init(SC_DLCI_LOADER);
 196:apps/loader/main.c **** 
 197:apps/loader/main.c **** 	/* Wait for events */
 198:apps/loader/main.c **** 	while (1) {
 199:apps/loader/main.c **** 		keypad_poll();
 200:apps/loader/main.c **** 		uart_poll(sercomm_uart);
 201:apps/loader/main.c **** 	}
 202:apps/loader/main.c **** 
 203:apps/loader/main.c **** 	/* NOT REACHED */
 204:apps/loader/main.c **** 
 205:apps/loader/main.c **** 	twl3025_power_off();
 206:apps/loader/main.c **** }
 207:apps/loader/main.c **** 
 208:apps/loader/main.c **** static void cmd_handler(uint8_t dlci, struct msgb *msg)
 209:apps/loader/main.c **** {
 210:apps/loader/main.c **** 	if (msg->data_len < 1) {
 211:apps/loader/main.c **** 		return;
 212:apps/loader/main.c **** 	}
 213:apps/loader/main.c **** 
 214:apps/loader/main.c **** 	uint8_t command = msgb_pull_u8(msg);
 215:apps/loader/main.c **** 
 216:apps/loader/main.c **** 	int res;
 217:apps/loader/main.c **** 
 218:apps/loader/main.c **** 	flash_lock_t lock;
 219:apps/loader/main.c **** 
 220:apps/loader/main.c **** 	void *data;
 221:apps/loader/main.c **** 
 222:apps/loader/main.c **** 	uint8_t chip;
 223:apps/loader/main.c **** 	uint8_t nbytes;
 224:apps/loader/main.c **** 	uint16_t crc, mycrc;
 225:apps/loader/main.c **** 	uint32_t address;
 226:apps/loader/main.c **** 
 227:apps/loader/main.c **** 	struct msgb *reply = sercomm_alloc_msgb(256);	// XXX
 228:apps/loader/main.c **** 
 229:apps/loader/main.c **** 	if (!reply) {
 230:apps/loader/main.c **** 		printf("Failed to allocate reply buffer!\n");
 231:apps/loader/main.c **** 		goto out;
 232:apps/loader/main.c **** 	}
 233:apps/loader/main.c **** 
 234:apps/loader/main.c **** 	switch (command) {
 235:apps/loader/main.c **** 
 236:apps/loader/main.c **** 	case LOADER_PING:
 237:apps/loader/main.c **** 		loader_send_simple(reply, dlci, LOADER_PING);
 238:apps/loader/main.c **** 		break;
 239:apps/loader/main.c **** 
 240:apps/loader/main.c **** 	case LOADER_RESET:
 241:apps/loader/main.c **** 		loader_send_simple(reply, dlci, LOADER_RESET);
 242:apps/loader/main.c **** 		device_reset();
 243:apps/loader/main.c **** 		break;
 244:apps/loader/main.c **** 
 245:apps/loader/main.c **** 	case LOADER_POWEROFF:
 246:apps/loader/main.c **** 		loader_send_simple(reply, dlci, LOADER_POWEROFF);
 247:apps/loader/main.c **** 		device_poweroff();
 248:apps/loader/main.c **** 		break;
 249:apps/loader/main.c **** 
 250:apps/loader/main.c **** 	case LOADER_ENTER_ROM_LOADER:
 251:apps/loader/main.c **** 		loader_send_simple(reply, dlci, LOADER_ENTER_ROM_LOADER);
 252:apps/loader/main.c **** 		device_enter_loader(1);
 253:apps/loader/main.c **** 		break;
 254:apps/loader/main.c **** 
 255:apps/loader/main.c **** 	case LOADER_ENTER_FLASH_LOADER:
 256:apps/loader/main.c **** 		loader_send_simple(reply, dlci, LOADER_ENTER_FLASH_LOADER);
 257:apps/loader/main.c **** 		device_enter_loader(0);
 258:apps/loader/main.c **** 		break;
 259:apps/loader/main.c **** 
 260:apps/loader/main.c **** 	case LOADER_MEM_READ:
 261:apps/loader/main.c **** 
 262:apps/loader/main.c **** 		nbytes = msgb_pull_u8(msg);
 263:apps/loader/main.c **** 		address = msgb_pull_u32(msg);
 264:apps/loader/main.c **** 
 265:apps/loader/main.c **** 		crc = osmo_crc16(0, (void *)address, nbytes);
 266:apps/loader/main.c **** 
 267:apps/loader/main.c **** 		msgb_put_u8(reply, LOADER_MEM_READ);
 268:apps/loader/main.c **** 		msgb_put_u8(reply, nbytes);
 269:apps/loader/main.c **** 		msgb_put_u16(reply, crc);
 270:apps/loader/main.c **** 		msgb_put_u32(reply, address);
 271:apps/loader/main.c **** 
 272:apps/loader/main.c **** 		memcpy(msgb_put(reply, nbytes), (void *)address, nbytes);
 273:apps/loader/main.c **** 
 274:apps/loader/main.c **** 		sercomm_sendmsg(dlci, reply);
 275:apps/loader/main.c **** 
 276:apps/loader/main.c **** 		break;
 277:apps/loader/main.c **** 
 278:apps/loader/main.c **** 	case LOADER_MEM_WRITE:
 279:apps/loader/main.c **** 
 280:apps/loader/main.c **** 		nbytes = msgb_pull_u8(msg);
 281:apps/loader/main.c **** 		crc = msgb_pull_u16(msg);
 282:apps/loader/main.c **** 		address = msgb_pull_u32(msg);
 283:apps/loader/main.c **** 
 284:apps/loader/main.c **** 		data = msgb_pull(msg, nbytes) - nbytes;
 285:apps/loader/main.c **** 
 286:apps/loader/main.c **** 		mycrc = osmo_crc16(0, data, nbytes);
 287:apps/loader/main.c **** 
 288:apps/loader/main.c **** 		if (mycrc == crc) {
 289:apps/loader/main.c **** 			memcpy((void *)address, data, nbytes);
 290:apps/loader/main.c **** 		}
 291:apps/loader/main.c **** 
 292:apps/loader/main.c **** 		msgb_put_u8(reply, LOADER_MEM_WRITE);
 293:apps/loader/main.c **** 		msgb_put_u8(reply, nbytes);
 294:apps/loader/main.c **** 		msgb_put_u16(reply, mycrc);
 295:apps/loader/main.c **** 		msgb_put_u32(reply, address);
 296:apps/loader/main.c **** 
 297:apps/loader/main.c **** 		sercomm_sendmsg(dlci, reply);
 298:apps/loader/main.c **** 
 299:apps/loader/main.c **** 		break;
 300:apps/loader/main.c **** 
 301:apps/loader/main.c **** 	case LOADER_JUMP:
 302:apps/loader/main.c **** 
 303:apps/loader/main.c **** 		address = msgb_pull_u32(msg);
 304:apps/loader/main.c **** 
 305:apps/loader/main.c **** 		msgb_put_u8(reply, LOADER_JUMP);
 306:apps/loader/main.c **** 		msgb_put_u32(reply, address);
 307:apps/loader/main.c **** 
 308:apps/loader/main.c **** 		sercomm_sendmsg(dlci, reply);
 309:apps/loader/main.c **** 
 310:apps/loader/main.c **** 		device_jump((void *)address);
 311:apps/loader/main.c **** 
 312:apps/loader/main.c **** 		break;
 313:apps/loader/main.c **** 
 314:apps/loader/main.c **** 	case LOADER_FLASH_INFO:
 315:apps/loader/main.c **** 
 316:apps/loader/main.c **** 		msgb_put_u8(reply, LOADER_FLASH_INFO);
 317:apps/loader/main.c **** 		msgb_put_u8(reply, 1);	// nchips
 318:apps/loader/main.c **** 
 319:apps/loader/main.c **** 		// chip 1
 320:apps/loader/main.c **** 		msgb_put_u32(reply, the_flash.f_base);
 321:apps/loader/main.c **** 		msgb_put_u32(reply, the_flash.f_size);
 322:apps/loader/main.c **** 		msgb_put_u8(reply, the_flash.f_nregions);
 323:apps/loader/main.c **** 
 324:apps/loader/main.c **** 		int i;
 325:apps/loader/main.c **** 		for (i = 0; i < the_flash.f_nregions; i++) {
 326:apps/loader/main.c **** 			msgb_put_u32(reply, the_flash.f_regions[i].fr_bnum);
 327:apps/loader/main.c **** 			msgb_put_u32(reply, the_flash.f_regions[i].fr_bsize);
 328:apps/loader/main.c **** 		}
 329:apps/loader/main.c **** 
 330:apps/loader/main.c **** 		sercomm_sendmsg(dlci, reply);
 331:apps/loader/main.c **** 
 332:apps/loader/main.c **** 		break;
 333:apps/loader/main.c **** 
 334:apps/loader/main.c **** 	case LOADER_FLASH_ERASE:
 335:apps/loader/main.c **** 	case LOADER_FLASH_UNLOCK:
 336:apps/loader/main.c **** 	case LOADER_FLASH_LOCK:
 337:apps/loader/main.c **** 	case LOADER_FLASH_LOCKDOWN:
 338:apps/loader/main.c **** 
 339:apps/loader/main.c **** 		chip = msgb_pull_u8(msg);
 340:apps/loader/main.c **** 		address = msgb_pull_u32(msg);
 341:apps/loader/main.c **** 
 342:apps/loader/main.c **** 		if (command == LOADER_FLASH_ERASE) {
 343:apps/loader/main.c **** 			res = flash_block_erase(&the_flash, address);
 344:apps/loader/main.c **** 		}
 345:apps/loader/main.c **** 		if (command == LOADER_FLASH_UNLOCK) {
 346:apps/loader/main.c **** 			res = flash_block_unlock(&the_flash, address);
 347:apps/loader/main.c **** 		}
 348:apps/loader/main.c **** 		if (command == LOADER_FLASH_LOCK) {
 349:apps/loader/main.c **** 			res = flash_block_lock(&the_flash, address);
 350:apps/loader/main.c **** 		}
 351:apps/loader/main.c **** 		if (command == LOADER_FLASH_LOCKDOWN) {
 352:apps/loader/main.c **** 			res = flash_block_lockdown(&the_flash, address);
 353:apps/loader/main.c **** 		}
 354:apps/loader/main.c **** 
 355:apps/loader/main.c **** 		msgb_put_u8(reply, command);
 356:apps/loader/main.c **** 		msgb_put_u8(reply, chip);
 357:apps/loader/main.c **** 		msgb_put_u32(reply, address);
 358:apps/loader/main.c **** 		msgb_put_u32(reply, (res != 0));
 359:apps/loader/main.c **** 
 360:apps/loader/main.c **** 		sercomm_sendmsg(dlci, reply);
 361:apps/loader/main.c **** 
 362:apps/loader/main.c **** 		break;
 363:apps/loader/main.c **** 
 364:apps/loader/main.c **** 	case LOADER_FLASH_GETLOCK:
 365:apps/loader/main.c **** 
 366:apps/loader/main.c **** 		chip = msgb_pull_u8(msg);
 367:apps/loader/main.c **** 		address = msgb_pull_u32(msg);
 368:apps/loader/main.c **** 
 369:apps/loader/main.c **** 		lock = flash_block_getlock(&the_flash, address);
 370:apps/loader/main.c **** 
 371:apps/loader/main.c **** 		msgb_put_u8(reply, command);
 372:apps/loader/main.c **** 		msgb_put_u8(reply, chip);
 373:apps/loader/main.c **** 		msgb_put_u32(reply, address);
 374:apps/loader/main.c **** 
 375:apps/loader/main.c **** 		switch (lock) {
 376:apps/loader/main.c **** 		case FLASH_UNLOCKED:
 377:apps/loader/main.c **** 			msgb_put_u32(reply, LOADER_FLASH_UNLOCKED);
 378:apps/loader/main.c **** 			break;
 379:apps/loader/main.c **** 		case FLASH_LOCKED:
 380:apps/loader/main.c **** 			msgb_put_u32(reply, LOADER_FLASH_LOCKED);
 381:apps/loader/main.c **** 			break;
 382:apps/loader/main.c **** 		case FLASH_LOCKED_DOWN:
 383:apps/loader/main.c **** 			msgb_put_u32(reply, LOADER_FLASH_LOCKED_DOWN);
 384:apps/loader/main.c **** 			break;
 385:apps/loader/main.c **** 		default:
 386:apps/loader/main.c **** 			msgb_put_u32(reply, 0xFFFFFFFF);
 387:apps/loader/main.c **** 			break;
 388:apps/loader/main.c **** 		}
 389:apps/loader/main.c **** 
 390:apps/loader/main.c **** 		sercomm_sendmsg(dlci, reply);
 391:apps/loader/main.c **** 
 392:apps/loader/main.c **** 		break;
 393:apps/loader/main.c **** 
 394:apps/loader/main.c **** 	case LOADER_FLASH_PROGRAM:
 395:apps/loader/main.c **** 
 396:apps/loader/main.c **** 		nbytes = msgb_pull_u8(msg);
 397:apps/loader/main.c **** 		crc = msgb_pull_u16(msg);
 398:apps/loader/main.c **** 		msgb_pull_u8(msg);	// XXX align
 399:apps/loader/main.c **** 		chip = msgb_pull_u8(msg);
 400:apps/loader/main.c **** 		address = msgb_pull_u32(msg);
 401:apps/loader/main.c **** 
 402:apps/loader/main.c **** 		data = msgb_pull(msg, nbytes) - nbytes;
 403:apps/loader/main.c **** 
 404:apps/loader/main.c **** 		mycrc = osmo_crc16(0, data, nbytes);
 405:apps/loader/main.c **** 
 406:apps/loader/main.c **** 		if (mycrc == crc) {
 407:apps/loader/main.c **** 			res = flash_program(&the_flash, address, data, nbytes);
 408:apps/loader/main.c **** 		}
 409:apps/loader/main.c **** 
 410:apps/loader/main.c **** 		msgb_put_u8(reply, LOADER_FLASH_PROGRAM);
 411:apps/loader/main.c **** 		msgb_put_u8(reply, nbytes);
 412:apps/loader/main.c **** 		msgb_put_u16(reply, mycrc);
 413:apps/loader/main.c **** 		msgb_put_u8(reply, 0);	// XXX align
 414:apps/loader/main.c **** 		msgb_put_u8(reply, chip);
 415:apps/loader/main.c **** 		msgb_put_u32(reply, address);
 416:apps/loader/main.c **** 
 417:apps/loader/main.c **** 		msgb_put_u32(reply, (uint32_t) res);	// XXX
 418:apps/loader/main.c **** 
 419:apps/loader/main.c **** 		sercomm_sendmsg(dlci, reply);
 420:apps/loader/main.c **** 
 421:apps/loader/main.c **** 		break;
 422:apps/loader/main.c **** 
 423:apps/loader/main.c **** 	default:
 424:apps/loader/main.c **** 		printf("unknown command %d\n", command);
 425:apps/loader/main.c **** 
 426:apps/loader/main.c **** 		msgb_free(reply);
 427:apps/loader/main.c **** 
 428:apps/loader/main.c **** 		break;
 429:apps/loader/main.c **** 	}
 430:apps/loader/main.c **** 
 431:apps/loader/main.c ****  out:
 432:apps/loader/main.c **** 
 433:apps/loader/main.c **** 	msgb_free(msg);
 434:apps/loader/main.c **** }
 435:apps/loader/main.c **** 
 436:apps/loader/main.c **** static void key_handler(enum key_codes code, enum key_states state)
 437:apps/loader/main.c **** {
 360              		.loc 2 437 0
 361              		.cfi_startproc
 362              		@ Function supports interworking.
 363              		@ args = 0, pretend = 0, frame = 0
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365              	.LVL34:
 438:apps/loader/main.c **** 	if (state != PRESSED)
 366              		.loc 2 438 0
 367 0000 000051E3 		cmp	r1, #0
 437:apps/loader/main.c **** {
 368              		.loc 2 437 0
 369 0004 08402DE9 		stmfd	sp!, {r3, lr}
 370              	.LCFI6:
 371              		.cfi_def_cfa_offset 8
 372              		.cfi_offset 3, -8
 373              		.cfi_offset 14, -4
 374              		.loc 2 438 0
 375 0008 0C00001A 		bne	.L17
 439:apps/loader/main.c **** 		return;
 440:apps/loader/main.c **** 
 441:apps/loader/main.c **** 	switch (code) {
 376              		.loc 2 441 0
 377 000c 130050E3 		cmp	r0, #19
 378 0010 0600000A 		beq	.L19
 379 0014 140050E3 		cmp	r0, #20
 380 0018 0800001A 		bne	.L17
 442:apps/loader/main.c **** 	case KEY_POWER:
 443:apps/loader/main.c **** 		puts("Powering off due to keypress.\n");
 381              		.loc 2 443 0
 382 001c 24009FE5 		ldr	r0, .L21
 383              	.LVL35:
 384 0020 FEFFFFEB 		bl	puts
 385              	.LVL36:
 386              	.LBB50:
 387              	.LBB51:
  78:apps/loader/main.c **** 	flush_uart();
 388              		.loc 2 78 0
 389 0024 FEFFFFEB 		bl	flush_uart
 390              	.LVL37:
  79:apps/loader/main.c **** 	twl3025_power_off();
 391              		.loc 2 79 0
 392 0028 FEFFFFEB 		bl	twl3025_power_off
 393              	.LVL38:
 394 002c 030000EA 		b	.L17
 395              	.LVL39:
 396              	.L19:
 397              	.LBE51:
 398              	.LBE50:
 399              	.LBB52:
 400              	.LBB53:
 444:apps/loader/main.c **** 		device_poweroff();
 445:apps/loader/main.c **** 		break;
 446:apps/loader/main.c **** 	case KEY_OK:
 447:apps/loader/main.c **** 		puts("Resetting due to keypress.\n");
 401              		.loc 2 447 0
 402 0030 14009FE5 		ldr	r0, .L21+4
 403              	.LVL40:
 404 0034 FEFFFFEB 		bl	puts
 405              	.LVL41:
 406              	.LBB54:
 407              	.LBB55:
  84:apps/loader/main.c **** 	flush_uart();
 408              		.loc 2 84 0
 409 0038 FEFFFFEB 		bl	flush_uart
 410              	.LVL42:
  85:apps/loader/main.c **** 	wdog_reset();
 411              		.loc 2 85 0
 412 003c FEFFFFEB 		bl	wdog_reset
 413              	.LVL43:
 414              	.L17:
 415              	.LBE55:
 416              	.LBE54:
 417              	.LBE53:
 418              	.LBE52:
 448:apps/loader/main.c **** 		device_reset();
 449:apps/loader/main.c **** 		break;
 450:apps/loader/main.c **** 	default:
 451:apps/loader/main.c **** 		break;
 452:apps/loader/main.c **** 	}
 453:apps/loader/main.c **** }
 419              		.loc 2 453 0
 420 0040 0840BDE8 		ldmfd	sp!, {r3, lr}
 421 0044 1EFF2FE1 		bx	lr
 422              	.L22:
 423              		.align	2
 424              	.L21:
 425 0048 33000000 		.word	.LC1
 426 004c 52000000 		.word	.LC2
 427              		.cfi_endproc
 428              	.LFE70:
 430              		.section	.text.cmd_handler,"ax",%progbits
 431              		.align	2
 433              	cmd_handler:
 434              	.LFB69:
 209:apps/loader/main.c **** {
 435              		.loc 2 209 0
 436              		.cfi_startproc
 437              		@ Function supports interworking.
 438              		@ args = 0, pretend = 0, frame = 8
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440              	.LVL44:
 210:apps/loader/main.c **** 	if (msg->data_len < 1) {
 441              		.loc 2 210 0
 442 0000 B433D1E1 		ldrh	r3, [r1, #52]
 443 0004 000053E3 		cmp	r3, #0
 209:apps/loader/main.c **** {
 444              		.loc 2 209 0
 445 0008 F74F2DE9 		stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 446              	.LCFI7:
 447              		.cfi_def_cfa_offset 48
 448              		.cfi_offset 0, -48
 449              		.cfi_offset 1, -44
 450              		.cfi_offset 2, -40
 451              		.cfi_offset 4, -36
 452              		.cfi_offset 5, -32
 453              		.cfi_offset 6, -28
 454              		.cfi_offset 7, -24
 455              		.cfi_offset 8, -20
 456              		.cfi_offset 9, -16
 457              		.cfi_offset 10, -12
 458              		.cfi_offset 11, -8
 459              		.cfi_offset 14, -4
 209:apps/loader/main.c **** {
 460              		.loc 2 209 0
 461 000c 0060A0E1 		mov	r6, r0
 462 0010 0150A0E1 		mov	r5, r1
 210:apps/loader/main.c **** 	if (msg->data_len < 1) {
 463              		.loc 2 210 0
 464 0014 5801000A 		beq	.L23
 214:apps/loader/main.c **** 	uint8_t command = msgb_pull_u8(msg);
 465              		.loc 2 214 0
 466 0018 0100A0E1 		mov	r0, r1
 467              	.LVL45:
 468 001c FEFFFFEB 		bl	msgb_pull_u8
 469              	.LVL46:
 470              	.LBB85:
 471              	.LBB86:
 472              	.LBB87:
 329:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 330:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief Increase headroom of empty msgb, reducing the tailroom
 331:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msg message buffer
 332:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] len amount of extra octets to be reserved as headroom
 333:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 334:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function reserves some memory at the beginning of the underlying
 335:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * data buffer.  The idea is to reserve space in case further headers
 336:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * have to be pushed to the \ref msgb during further processing.
 337:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 338:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * Calling this function leads to undefined reusults if it is called on
 339:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * a non-empty \ref msgb.
 340:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 341:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline void msgb_reserve(struct msgb *msg, int len)
 342:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 343:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msg->data += len;
 344:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msg->tail += len;
 345:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 346:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 347:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief Trim the msgb to a given absolute length
 348:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msg message buffer
 349:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] len new total length of buffer
 350:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns 0 in case of success, negative in case of error
 351:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 352:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline int msgb_trim(struct msgb *msg, int len)
 353:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 354:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	if (len > msg->data_len)
 355:../../shared/libosmocore/include/osmocom/core/msgb.h **** 		return -1;
 356:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 357:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msg->len = len;
 358:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msg->tail = msg->data + len;
 359:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 360:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return 0;
 361:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 362:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 363:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief Trim the msgb to a given layer3 length
 364:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \pram[in] msg message buffer
 365:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] l3len new layer3 length
 366:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns 0 in case of success, negative in case of error
 367:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 368:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline int msgb_l3trim(struct msgb *msg, int l3len)
 369:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 370:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb_trim(msg, (msg->l3h - msg->data) + l3len);
 371:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 372:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 373:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief Allocate message buffer with specified headroom
 374:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] size size in bytes, including headroom
 375:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] headroom headroom in bytes
 376:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] name human-readable name
 377:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns allocated message buffer with specified headroom
 378:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 379:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function is a convenience wrapper around \ref msgb_alloc
 380:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * followed by \ref msgb_reserve in order to create a new \ref msgb with
 381:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * user-specified amount of headroom.
 382:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 383:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline struct msgb *msgb_alloc_headroom(int size, int headroom,
 384:../../shared/libosmocore/include/osmocom/core/msgb.h **** 						const char *name)
 385:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 386:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	osmo_static_assert(size > headroom, headroom_bigger);
 387:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 388:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	struct msgb *msg = msgb_alloc(size, name);
 473              		.loc 1 388 0
 474 0020 60159FE5 		ldr	r1, .L65
 475              	.LBE87:
 476              	.LBE86:
 477              	.LBE85:
 214:apps/loader/main.c **** 	uint8_t command = msgb_pull_u8(msg);
 478              		.loc 2 214 0
 479 0024 0070A0E1 		mov	r7, r0
 480              	.LVL47:
 481              	.LBB92:
 482              	.LBB91:
 483              	.LBB90:
 484              		.loc 1 388 0
 485 0028 410FA0E3 		mov	r0, #260
 486              	.LVL48:
 487 002c FEFFFFEB 		bl	msgb_alloc
 488              	.LVL49:
 389:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	if (msg)
 489              		.loc 1 389 0
 490 0030 004050E2 		subs	r4, r0, #0
 491 0034 4D01000A 		beq	.L25
 492              	.LVL50:
 493              	.LBB88:
 494              	.LBB89:
 343:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msg->data += len;
 495              		.loc 1 343 0
 496 0038 403094E5 		ldr	r3, [r4, #64]
 497 003c 043083E2 		add	r3, r3, #4
 498 0040 403084E5 		str	r3, [r4, #64]
 344:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msg->tail += len;
 499              		.loc 1 344 0
 500 0044 3C3094E5 		ldr	r3, [r4, #60]
 501 0048 043083E2 		add	r3, r3, #4
 502 004c 3C3084E5 		str	r3, [r4, #60]
 503              	.LBE89:
 504              	.LBE88:
 505              	.LBE90:
 506              	.LBE91:
 507              	.LBE92:
 234:apps/loader/main.c **** 	switch (command) {
 508              		.loc 2 234 0
 509 0050 013047E2 		sub	r3, r7, #1
 510 0054 0E0053E3 		cmp	r3, #14
 511 0058 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 512 005c 3B0100EA 		b	.L26
 513              	.L28:
 514 0060 9C000000 		.word	.L27
 515 0064 B0000000 		.word	.L29
 516 0068 CC000000 		.word	.L30
 517 006c 50020000 		.word	.L31
 518 0070 E8000000 		.word	.L32
 519 0074 04010000 		.word	.L33
 520 0078 30010000 		.word	.L34
 521 007c A8010000 		.word	.L35
 522 0080 90020000 		.word	.L36
 523 0084 08030000 		.word	.L37
 524 0088 08030000 		.word	.L37
 525 008c 08030000 		.word	.L37
 526 0090 08030000 		.word	.L37
 527 0094 B4030000 		.word	.L38
 528 0098 3C040000 		.word	.L39
 529              	.L27:
 530              	.LBB93:
 237:apps/loader/main.c **** 		loader_send_simple(reply, dlci, LOADER_PING);
 531              		.loc 2 237 0
 532 009c 0400A0E1 		mov	r0, r4
 533              	.LVL51:
 534 00a0 0610A0E1 		mov	r1, r6
 535 00a4 0120A0E3 		mov	r2, #1
 536 00a8 FEFFFFEB 		bl	loader_send_simple
 537              	.LVL52:
 238:apps/loader/main.c **** 		break;
 538              		.loc 2 238 0
 539 00ac 2C0100EA 		b	.L40
 540              	.LVL53:
 541              	.L29:
 241:apps/loader/main.c **** 		loader_send_simple(reply, dlci, LOADER_RESET);
 542              		.loc 2 241 0
 543 00b0 0400A0E1 		mov	r0, r4
 544              	.LVL54:
 545 00b4 0610A0E1 		mov	r1, r6
 546 00b8 0220A0E3 		mov	r2, #2
 547 00bc FEFFFFEB 		bl	loader_send_simple
 548              	.LVL55:
 549              	.LBB94:
 550              	.LBB95:
  84:apps/loader/main.c **** 	flush_uart();
 551              		.loc 2 84 0
 552 00c0 FEFFFFEB 		bl	flush_uart
 553              	.LVL56:
  85:apps/loader/main.c **** 	wdog_reset();
 554              		.loc 2 85 0
 555 00c4 FEFFFFEB 		bl	wdog_reset
 556              	.LVL57:
 557 00c8 250100EA 		b	.L40
 558              	.LVL58:
 559              	.L30:
 560              	.LBE95:
 561              	.LBE94:
 246:apps/loader/main.c **** 		loader_send_simple(reply, dlci, LOADER_POWEROFF);
 562              		.loc 2 246 0
 563 00cc 0400A0E1 		mov	r0, r4
 564              	.LVL59:
 565 00d0 0610A0E1 		mov	r1, r6
 566 00d4 0320A0E3 		mov	r2, #3
 567 00d8 FEFFFFEB 		bl	loader_send_simple
 568              	.LVL60:
 569              	.LBB96:
 570              	.LBB97:
  78:apps/loader/main.c **** 	flush_uart();
 571              		.loc 2 78 0
 572 00dc FEFFFFEB 		bl	flush_uart
 573              	.LVL61:
  79:apps/loader/main.c **** 	twl3025_power_off();
 574              		.loc 2 79 0
 575 00e0 FEFFFFEB 		bl	twl3025_power_off
 576              	.LVL62:
 577 00e4 1E0100EA 		b	.L40
 578              	.LVL63:
 579              	.L32:
 580              	.LBE97:
 581              	.LBE96:
 251:apps/loader/main.c **** 		loader_send_simple(reply, dlci, LOADER_ENTER_ROM_LOADER);
 582              		.loc 2 251 0
 583 00e8 0400A0E1 		mov	r0, r4
 584              	.LVL64:
 585 00ec 0610A0E1 		mov	r1, r6
 586 00f0 0520A0E3 		mov	r2, #5
 587 00f4 FEFFFFEB 		bl	loader_send_simple
 588              	.LVL65:
 589              	.LBB98:
 590              	.LBB99:
  90:apps/loader/main.c **** 	flush_uart();
 591              		.loc 2 90 0
 592 00f8 FEFFFFEB 		bl	flush_uart
 593              	.LVL66:
  92:apps/loader/main.c **** 	calypso_bootrom(bootrom);
 594              		.loc 2 92 0
 595 00fc 0100A0E3 		mov	r0, #1
 596 0100 050000EA 		b	.L60
 597              	.LVL67:
 598              	.L33:
 599              	.LBE99:
 600              	.LBE98:
 256:apps/loader/main.c **** 		loader_send_simple(reply, dlci, LOADER_ENTER_FLASH_LOADER);
 601              		.loc 2 256 0
 602 0104 0400A0E1 		mov	r0, r4
 603              	.LVL68:
 604 0108 0610A0E1 		mov	r1, r6
 605 010c 0620A0E3 		mov	r2, #6
 606 0110 FEFFFFEB 		bl	loader_send_simple
 607              	.LVL69:
 608              	.LBB100:
 609              	.LBB101:
  90:apps/loader/main.c **** 	flush_uart();
 610              		.loc 2 90 0
 611 0114 FEFFFFEB 		bl	flush_uart
 612              	.LVL70:
  92:apps/loader/main.c **** 	calypso_bootrom(bootrom);
 613              		.loc 2 92 0
 614 0118 0000A0E3 		mov	r0, #0
 615              	.LVL71:
 616              	.L60:
 617 011c FEFFFFEB 		bl	calypso_bootrom
 618              	.LVL72:
  94:apps/loader/main.c **** 	entry();
 619              		.loc 2 94 0
 620 0120 0030A0E3 		mov	r3, #0
 621 0124 0FE0A0E1 		mov	lr, pc
 622 0128 13FF2FE1 		bx	r3
 623              	.LVL73:
 624 012c 0C0100EA 		b	.L40
 625              	.LVL74:
 626              	.L34:
 627              	.LBE101:
 628              	.LBE100:
 262:apps/loader/main.c **** 		nbytes = msgb_pull_u8(msg);
 629              		.loc 2 262 0
 630 0130 0500A0E1 		mov	r0, r5
 631              	.LVL75:
 632 0134 FEFFFFEB 		bl	msgb_pull_u8
 633              	.LVL76:
 634 0138 0070A0E1 		mov	r7, r0
 635              	.LVL77:
 263:apps/loader/main.c **** 		address = msgb_pull_u32(msg);
 636              		.loc 2 263 0
 637 013c 0500A0E1 		mov	r0, r5
 638              	.LVL78:
 639 0140 FEFFFFEB 		bl	msgb_pull_u32
 640              	.LVL79:
 641 0144 0080A0E1 		mov	r8, r0
 642              	.LVL80:
 265:apps/loader/main.c **** 		crc = osmo_crc16(0, (void *)address, nbytes);
 643              		.loc 2 265 0
 644 0148 0720A0E1 		mov	r2, r7
 645 014c 0810A0E1 		mov	r1, r8
 646 0150 0000A0E3 		mov	r0, #0
 647              	.LVL81:
 648 0154 FEFFFFEB 		bl	osmo_crc16
 649              	.LVL82:
 267:apps/loader/main.c **** 		msgb_put_u8(reply, LOADER_MEM_READ);
 650              		.loc 2 267 0
 651 0158 0710A0E3 		mov	r1, #7
 265:apps/loader/main.c **** 		crc = osmo_crc16(0, (void *)address, nbytes);
 652              		.loc 2 265 0
 653 015c 0090A0E1 		mov	r9, r0
 654              	.LVL83:
 267:apps/loader/main.c **** 		msgb_put_u8(reply, LOADER_MEM_READ);
 655              		.loc 2 267 0
 656 0160 0400A0E1 		mov	r0, r4
 657              	.LVL84:
 658 0164 FEFFFFEB 		bl	msgb_put_u8
 659              	.LVL85:
 268:apps/loader/main.c **** 		msgb_put_u8(reply, nbytes);
 660              		.loc 2 268 0
 661 0168 0400A0E1 		mov	r0, r4
 662 016c 0710A0E1 		mov	r1, r7
 663 0170 FEFFFFEB 		bl	msgb_put_u8
 664              	.LVL86:
 269:apps/loader/main.c **** 		msgb_put_u16(reply, crc);
 665              		.loc 2 269 0
 666 0174 0400A0E1 		mov	r0, r4
 667 0178 0910A0E1 		mov	r1, r9
 668 017c FEFFFFEB 		bl	msgb_put_u16
 669              	.LVL87:
 270:apps/loader/main.c **** 		msgb_put_u32(reply, address);
 670              		.loc 2 270 0
 671 0180 0400A0E1 		mov	r0, r4
 672 0184 0810A0E1 		mov	r1, r8
 673 0188 FEFFFFEB 		bl	msgb_put_u32
 674              	.LVL88:
 272:apps/loader/main.c **** 		memcpy(msgb_put(reply, nbytes), (void *)address, nbytes);
 675              		.loc 2 272 0
 676 018c 0710A0E1 		mov	r1, r7
 677 0190 0400A0E1 		mov	r0, r4
 678 0194 FEFFFFEB 		bl	msgb_put
 679              	.LVL89:
 680 0198 0810A0E1 		mov	r1, r8
 681 019c 0720A0E1 		mov	r2, r7
 682 01a0 FEFFFFEB 		bl	memcpy
 683              	.LVL90:
 684 01a4 E50000EA 		b	.L61
 685              	.LVL91:
 686              	.L35:
 280:apps/loader/main.c **** 		nbytes = msgb_pull_u8(msg);
 687              		.loc 2 280 0
 688 01a8 0500A0E1 		mov	r0, r5
 689              	.LVL92:
 690 01ac FEFFFFEB 		bl	msgb_pull_u8
 691              	.LVL93:
 692              	.LBB102:
 693              	.LBB103:
 694              	.LBB104:
 695              	.LBB105:
 298:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->len -= len;
 696              		.loc 1 298 0
 697 01b0 B633D5E1 		ldrh	r3, [r5, #54]
 698 01b4 023043E2 		sub	r3, r3, #2
 699 01b8 B633C5E1 		strh	r3, [r5, #54]	@ movhi
 299:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->data += len;
 700              		.loc 1 299 0
 701 01bc 403095E5 		ldr	r3, [r5, #64]
 702 01c0 022083E2 		add	r2, r3, #2
 703 01c4 402085E5 		str	r2, [r5, #64]
 704              	.LBE105:
 705              	.LBE104:
 318:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return space[0] << 8 | space[1];
 706              		.loc 1 318 0
 707 01c8 00B0D3E5 		ldrb	fp, [r3]	@ zero_extendqisi2
 708 01cc 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 709              	.LBE103:
 710              	.LBE102:
 280:apps/loader/main.c **** 		nbytes = msgb_pull_u8(msg);
 711              		.loc 2 280 0
 712 01d0 0070A0E1 		mov	r7, r0
 713              	.LVL94:
 282:apps/loader/main.c **** 		address = msgb_pull_u32(msg);
 714              		.loc 2 282 0
 715 01d4 0500A0E1 		mov	r0, r5
 716              	.LVL95:
 717              	.LBB107:
 718              	.LBB106:
 318:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return space[0] << 8 | space[1];
 719              		.loc 1 318 0
 720 01d8 0BB483E1 		orr	fp, r3, fp, asl #8
 721              	.LBE106:
 722              	.LBE107:
 282:apps/loader/main.c **** 		address = msgb_pull_u32(msg);
 723              		.loc 2 282 0
 724 01dc FEFFFFEB 		bl	msgb_pull_u32
 725              	.LVL96:
 726              	.LBB108:
 727              	.LBB109:
 299:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->data += len;
 728              		.loc 1 299 0
 729 01e0 40A095E5 		ldr	r10, [r5, #64]
 298:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->len -= len;
 730              		.loc 1 298 0
 731 01e4 B633D5E1 		ldrh	r3, [r5, #54]
 299:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->data += len;
 732              		.loc 1 299 0
 733 01e8 07A08AE0 		add	r10, r10, r7
 298:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->len -= len;
 734              		.loc 1 298 0
 735 01ec 033067E0 		rsb	r3, r7, r3
 299:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->data += len;
 736              		.loc 1 299 0
 737 01f0 40A085E5 		str	r10, [r5, #64]
 738              	.LBE109:
 739              	.LBE108:
 284:apps/loader/main.c **** 		data = msgb_pull(msg, nbytes) - nbytes;
 740              		.loc 2 284 0
 741 01f4 0AA067E0 		rsb	r10, r7, r10
 282:apps/loader/main.c **** 		address = msgb_pull_u32(msg);
 742              		.loc 2 282 0
 743 01f8 0080A0E1 		mov	r8, r0
 744              	.LVL97:
 745              	.LBB111:
 746              	.LBB110:
 298:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->len -= len;
 747              		.loc 1 298 0
 748 01fc B633C5E1 		strh	r3, [r5, #54]	@ movhi
 749              	.LBE110:
 750              	.LBE111:
 286:apps/loader/main.c **** 		mycrc = osmo_crc16(0, data, nbytes);
 751              		.loc 2 286 0
 752 0200 0000A0E3 		mov	r0, #0
 753              	.LVL98:
 754 0204 0A10A0E1 		mov	r1, r10
 755 0208 0720A0E1 		mov	r2, r7
 756 020c FEFFFFEB 		bl	osmo_crc16
 757              	.LVL99:
 288:apps/loader/main.c **** 		if (mycrc == crc) {
 758              		.loc 2 288 0
 759 0210 0B0050E1 		cmp	r0, fp
 286:apps/loader/main.c **** 		mycrc = osmo_crc16(0, data, nbytes);
 760              		.loc 2 286 0
 761 0214 0090A0E1 		mov	r9, r0
 762              	.LVL100:
 288:apps/loader/main.c **** 		if (mycrc == crc) {
 763              		.loc 2 288 0
 289:apps/loader/main.c **** 			memcpy((void *)address, data, nbytes);
 764              		.loc 2 289 0
 765 0218 0800A001 		moveq	r0, r8
 766              	.LVL101:
 767 021c 0A10A001 		moveq	r1, r10
 768 0220 0720A001 		moveq	r2, r7
 769 0224 FEFFFF0B 		bleq	memcpy
 770              	.LVL102:
 771              	.L41:
 292:apps/loader/main.c **** 		msgb_put_u8(reply, LOADER_MEM_WRITE);
 772              		.loc 2 292 0
 773 0228 0400A0E1 		mov	r0, r4
 774 022c 0810A0E3 		mov	r1, #8
 775 0230 FEFFFFEB 		bl	msgb_put_u8
 776              	.LVL103:
 293:apps/loader/main.c **** 		msgb_put_u8(reply, nbytes);
 777              		.loc 2 293 0
 778 0234 0400A0E1 		mov	r0, r4
 779 0238 0710A0E1 		mov	r1, r7
 780 023c FEFFFFEB 		bl	msgb_put_u8
 781              	.LVL104:
 294:apps/loader/main.c **** 		msgb_put_u16(reply, mycrc);
 782              		.loc 2 294 0
 783 0240 0400A0E1 		mov	r0, r4
 784 0244 0910A0E1 		mov	r1, r9
 785 0248 FEFFFFEB 		bl	msgb_put_u16
 786              	.LVL105:
 787 024c B80000EA 		b	.L63
 788              	.LVL106:
 789              	.L31:
 303:apps/loader/main.c **** 		address = msgb_pull_u32(msg);
 790              		.loc 2 303 0
 791 0250 0500A0E1 		mov	r0, r5
 792              	.LVL107:
 793 0254 FEFFFFEB 		bl	msgb_pull_u32
 794              	.LVL108:
 305:apps/loader/main.c **** 		msgb_put_u8(reply, LOADER_JUMP);
 795              		.loc 2 305 0
 796 0258 0410A0E3 		mov	r1, #4
 303:apps/loader/main.c **** 		address = msgb_pull_u32(msg);
 797              		.loc 2 303 0
 798 025c 0070A0E1 		mov	r7, r0
 799              	.LVL109:
 305:apps/loader/main.c **** 		msgb_put_u8(reply, LOADER_JUMP);
 800              		.loc 2 305 0
 801 0260 0400A0E1 		mov	r0, r4
 802              	.LVL110:
 803 0264 FEFFFFEB 		bl	msgb_put_u8
 804              	.LVL111:
 306:apps/loader/main.c **** 		msgb_put_u32(reply, address);
 805              		.loc 2 306 0
 806 0268 0400A0E1 		mov	r0, r4
 807 026c 0710A0E1 		mov	r1, r7
 808 0270 FEFFFFEB 		bl	msgb_put_u32
 809              	.LVL112:
 308:apps/loader/main.c **** 		sercomm_sendmsg(dlci, reply);
 810              		.loc 2 308 0
 811 0274 0600A0E1 		mov	r0, r6
 812 0278 0410A0E1 		mov	r1, r4
 813 027c FEFFFFEB 		bl	sercomm_sendmsg
 814              	.LVL113:
 815              	.LBB112:
 816              	.LBB113:
  99:apps/loader/main.c **** 	flush_uart();
 817              		.loc 2 99 0
 818 0280 FEFFFFEB 		bl	flush_uart
 819              	.LVL114:
 102:apps/loader/main.c **** 	f();
 820              		.loc 2 102 0
 821 0284 0FE0A0E1 		mov	lr, pc
 822 0288 17FF2FE1 		bx	r7
 823              	.LVL115:
 824 028c B40000EA 		b	.L40
 825              	.LVL116:
 826              	.L36:
 827              	.LBE113:
 828              	.LBE112:
 320:apps/loader/main.c **** 		msgb_put_u32(reply, the_flash.f_base);
 829              		.loc 2 320 0
 830 0290 F4729FE5 		ldr	r7, .L65+4
 831              	.LVL117:
 316:apps/loader/main.c **** 		msgb_put_u8(reply, LOADER_FLASH_INFO);
 832              		.loc 2 316 0
 833 0294 0400A0E1 		mov	r0, r4
 834              	.LVL118:
 835 0298 0910A0E3 		mov	r1, #9
 836 029c FEFFFFEB 		bl	msgb_put_u8
 837              	.LVL119:
 317:apps/loader/main.c **** 		msgb_put_u8(reply, 1);	// nchips
 838              		.loc 2 317 0
 839 02a0 0400A0E1 		mov	r0, r4
 840 02a4 0110A0E3 		mov	r1, #1
 841 02a8 FEFFFFEB 		bl	msgb_put_u8
 842              	.LVL120:
 320:apps/loader/main.c **** 		msgb_put_u32(reply, the_flash.f_base);
 843              		.loc 2 320 0
 844 02ac 0400A0E1 		mov	r0, r4
 845 02b0 001097E5 		ldr	r1, [r7]
 846 02b4 FEFFFFEB 		bl	msgb_put_u32
 847              	.LVL121:
 321:apps/loader/main.c **** 		msgb_put_u32(reply, the_flash.f_size);
 848              		.loc 2 321 0
 849 02b8 0400A0E1 		mov	r0, r4
 850 02bc 041097E5 		ldr	r1, [r7, #4]
 851 02c0 FEFFFFEB 		bl	msgb_put_u32
 852              	.LVL122:
 322:apps/loader/main.c **** 		msgb_put_u8(reply, the_flash.f_nregions);
 853              		.loc 2 322 0
 854 02c4 0400A0E1 		mov	r0, r4
 855 02c8 0810D7E5 		ldrb	r1, [r7, #8]	@ zero_extendqisi2
 856 02cc FEFFFFEB 		bl	msgb_put_u8
 857              	.LVL123:
 858 02d0 108087E2 		add	r8, r7, #16
 325:apps/loader/main.c **** 		for (i = 0; i < the_flash.f_nregions; i++) {
 859              		.loc 2 325 0
 860 02d4 0090A0E3 		mov	r9, #0
 861              	.LVL124:
 862              	.L42:
 325:apps/loader/main.c **** 		for (i = 0; i < the_flash.f_nregions; i++) {
 863              		.loc 2 325 0 is_stmt 0 discriminator 1
 864 02d8 083097E5 		ldr	r3, [r7, #8]
 865 02dc 030059E1 		cmp	r9, r3
 866 02e0 0C8088E2 		add	r8, r8, #12
 867 02e4 9500002A 		bcs	.L61
 326:apps/loader/main.c **** 			msgb_put_u32(reply, the_flash.f_regions[i].fr_bnum);
 868              		.loc 2 326 0 is_stmt 1 discriminator 2
 869 02e8 0400A0E1 		mov	r0, r4
 870 02ec 0C1018E5 		ldr	r1, [r8, #-12]
 871 02f0 FEFFFFEB 		bl	msgb_put_u32
 872              	.LVL125:
 327:apps/loader/main.c **** 			msgb_put_u32(reply, the_flash.f_regions[i].fr_bsize);
 873              		.loc 2 327 0 discriminator 2
 874 02f4 0400A0E1 		mov	r0, r4
 875 02f8 081018E5 		ldr	r1, [r8, #-8]
 876 02fc FEFFFFEB 		bl	msgb_put_u32
 877              	.LVL126:
 325:apps/loader/main.c **** 		for (i = 0; i < the_flash.f_nregions; i++) {
 878              		.loc 2 325 0 discriminator 2
 879 0300 019089E2 		add	r9, r9, #1
 880              	.LVL127:
 881 0304 F3FFFFEA 		b	.L42
 882              	.LVL128:
 883              	.L37:
 339:apps/loader/main.c **** 		chip = msgb_pull_u8(msg);
 884              		.loc 2 339 0
 885 0308 0500A0E1 		mov	r0, r5
 886              	.LVL129:
 887 030c FEFFFFEB 		bl	msgb_pull_u8
 888              	.LVL130:
 889 0310 00A0A0E1 		mov	r10, r0
 890              	.LVL131:
 340:apps/loader/main.c **** 		address = msgb_pull_u32(msg);
 891              		.loc 2 340 0
 892 0314 0500A0E1 		mov	r0, r5
 893              	.LVL132:
 894 0318 FEFFFFEB 		bl	msgb_pull_u32
 895              	.LVL133:
 342:apps/loader/main.c **** 		if (command == LOADER_FLASH_ERASE) {
 896              		.loc 2 342 0
 897 031c 0A0057E3 		cmp	r7, #10
 340:apps/loader/main.c **** 		address = msgb_pull_u32(msg);
 898              		.loc 2 340 0
 899 0320 0090A0E1 		mov	r9, r0
 900              	.LVL134:
 342:apps/loader/main.c **** 		if (command == LOADER_FLASH_ERASE) {
 901              		.loc 2 342 0
 902 0324 0300001A 		bne	.L44
 343:apps/loader/main.c **** 			res = flash_block_erase(&the_flash, address);
 903              		.loc 2 343 0
 904 0328 0910A0E1 		mov	r1, r9
 905 032c 58029FE5 		ldr	r0, .L65+4
 906              	.LVL135:
 907 0330 FEFFFFEB 		bl	flash_block_erase
 908              	.LVL136:
 909 0334 100000EA 		b	.L58
 910              	.LVL137:
 911              	.L44:
 345:apps/loader/main.c **** 		if (command == LOADER_FLASH_UNLOCK) {
 912              		.loc 2 345 0
 913 0338 0B0057E3 		cmp	r7, #11
 914 033c 0300001A 		bne	.L46
 346:apps/loader/main.c **** 			res = flash_block_unlock(&the_flash, address);
 915              		.loc 2 346 0
 916 0340 0910A0E1 		mov	r1, r9
 917 0344 40029FE5 		ldr	r0, .L65+4
 918              	.LVL138:
 919 0348 FEFFFFEB 		bl	flash_block_unlock
 920              	.LVL139:
 921 034c 0A0000EA 		b	.L58
 922              	.LVL140:
 923              	.L46:
 348:apps/loader/main.c **** 		if (command == LOADER_FLASH_LOCK) {
 924              		.loc 2 348 0
 925 0350 0C0057E3 		cmp	r7, #12
 926 0354 0300001A 		bne	.L47
 349:apps/loader/main.c **** 			res = flash_block_lock(&the_flash, address);
 927              		.loc 2 349 0
 928 0358 0910A0E1 		mov	r1, r9
 929 035c 28029FE5 		ldr	r0, .L65+4
 930              	.LVL141:
 931 0360 FEFFFFEB 		bl	flash_block_lock
 932              	.LVL142:
 933 0364 040000EA 		b	.L58
 934              	.LVL143:
 935              	.L47:
 351:apps/loader/main.c **** 		if (command == LOADER_FLASH_LOCKDOWN) {
 936              		.loc 2 351 0
 937 0368 0D0057E3 		cmp	r7, #13
 938 036c 0300001A 		bne	.L45
 352:apps/loader/main.c **** 			res = flash_block_lockdown(&the_flash, address);
 939              		.loc 2 352 0
 940 0370 14029FE5 		ldr	r0, .L65+4
 941              	.LVL144:
 942 0374 0910A0E1 		mov	r1, r9
 943 0378 FEFFFFEB 		bl	flash_block_lockdown
 944              	.LVL145:
 945              	.L58:
 946 037c 0080A0E1 		mov	r8, r0
 947              	.LVL146:
 948              	.L45:
 355:apps/loader/main.c **** 		msgb_put_u8(reply, command);
 949              		.loc 2 355 0
 950 0380 0400A0E1 		mov	r0, r4
 951 0384 0710A0E1 		mov	r1, r7
 952 0388 FEFFFFEB 		bl	msgb_put_u8
 953              	.LVL147:
 356:apps/loader/main.c **** 		msgb_put_u8(reply, chip);
 954              		.loc 2 356 0
 955 038c 0400A0E1 		mov	r0, r4
 956 0390 0A10A0E1 		mov	r1, r10
 957 0394 FEFFFFEB 		bl	msgb_put_u8
 958              	.LVL148:
 357:apps/loader/main.c **** 		msgb_put_u32(reply, address);
 959              		.loc 2 357 0
 960 0398 0400A0E1 		mov	r0, r4
 961 039c 0910A0E1 		mov	r1, r9
 962 03a0 FEFFFFEB 		bl	msgb_put_u32
 963              	.LVL149:
 358:apps/loader/main.c **** 		msgb_put_u32(reply, (res != 0));
 964              		.loc 2 358 0
 965 03a4 001098E2 		adds	r1, r8, #0
 966 03a8 0400A0E1 		mov	r0, r4
 967 03ac 0110A013 		movne	r1, #1
 968 03b0 610000EA 		b	.L62
 969              	.LVL150:
 970              	.L38:
 366:apps/loader/main.c **** 		chip = msgb_pull_u8(msg);
 971              		.loc 2 366 0
 972 03b4 0500A0E1 		mov	r0, r5
 973              	.LVL151:
 974 03b8 FEFFFFEB 		bl	msgb_pull_u8
 975              	.LVL152:
 976 03bc 0090A0E1 		mov	r9, r0
 977              	.LVL153:
 367:apps/loader/main.c **** 		address = msgb_pull_u32(msg);
 978              		.loc 2 367 0
 979 03c0 0500A0E1 		mov	r0, r5
 980              	.LVL154:
 981 03c4 FEFFFFEB 		bl	msgb_pull_u32
 982              	.LVL155:
 983 03c8 0080A0E1 		mov	r8, r0
 984              	.LVL156:
 369:apps/loader/main.c **** 		lock = flash_block_getlock(&the_flash, address);
 985              		.loc 2 369 0
 986 03cc 0810A0E1 		mov	r1, r8
 987 03d0 B4019FE5 		ldr	r0, .L65+4
 988              	.LVL157:
 989 03d4 FEFFFFEB 		bl	flash_block_getlock
 990              	.LVL158:
 371:apps/loader/main.c **** 		msgb_put_u8(reply, command);
 991              		.loc 2 371 0
 992 03d8 0E10A0E3 		mov	r1, #14
 369:apps/loader/main.c **** 		lock = flash_block_getlock(&the_flash, address);
 993              		.loc 2 369 0
 994 03dc 0070A0E1 		mov	r7, r0
 995              	.LVL159:
 371:apps/loader/main.c **** 		msgb_put_u8(reply, command);
 996              		.loc 2 371 0
 997 03e0 0400A0E1 		mov	r0, r4
 998              	.LVL160:
 999 03e4 FEFFFFEB 		bl	msgb_put_u8
 1000              	.LVL161:
 372:apps/loader/main.c **** 		msgb_put_u8(reply, chip);
 1001              		.loc 2 372 0
 1002 03e8 0400A0E1 		mov	r0, r4
 1003 03ec 0910A0E1 		mov	r1, r9
 1004 03f0 FEFFFFEB 		bl	msgb_put_u8
 1005              	.LVL162:
 373:apps/loader/main.c **** 		msgb_put_u32(reply, address);
 1006              		.loc 2 373 0
 1007 03f4 0400A0E1 		mov	r0, r4
 1008 03f8 0810A0E1 		mov	r1, r8
 1009 03fc FEFFFFEB 		bl	msgb_put_u32
 1010              	.LVL163:
 375:apps/loader/main.c **** 		switch (lock) {
 1011              		.loc 2 375 0
 1012 0400 010057E3 		cmp	r7, #1
 1013 0404 0600000A 		beq	.L51
 1014 0408 0200003A 		bcc	.L50
 1015 040c 020057E3 		cmp	r7, #2
 1016 0410 0300000A 		beq	.L51
 1017 0414 050000EA 		b	.L64
 1018              	.L50:
 377:apps/loader/main.c **** 			msgb_put_u32(reply, LOADER_FLASH_UNLOCKED);
 1019              		.loc 2 377 0
 1020 0418 0400A0E1 		mov	r0, r4
 1021 041c 0010A0E3 		mov	r1, #0
 1022 0420 450000EA 		b	.L62
 1023              	.L51:
 383:apps/loader/main.c **** 			msgb_put_u32(reply, LOADER_FLASH_LOCKED_DOWN);
 1024              		.loc 2 383 0
 1025 0424 0400A0E1 		mov	r0, r4
 1026 0428 0710A0E1 		mov	r1, r7
 1027 042c 420000EA 		b	.L62
 1028              	.L64:
 386:apps/loader/main.c **** 			msgb_put_u32(reply, 0xFFFFFFFF);
 1029              		.loc 2 386 0
 1030 0430 0400A0E1 		mov	r0, r4
 1031 0434 0010E0E3 		mvn	r1, #0
 1032 0438 3F0000EA 		b	.L62
 1033              	.LVL164:
 1034              	.L39:
 396:apps/loader/main.c **** 		nbytes = msgb_pull_u8(msg);
 1035              		.loc 2 396 0
 1036 043c 0500A0E1 		mov	r0, r5
 1037              	.LVL165:
 1038 0440 FEFFFFEB 		bl	msgb_pull_u8
 1039              	.LVL166:
 1040              	.LBB114:
 1041              	.LBB115:
 1042              	.LBB116:
 1043              	.LBB117:
 298:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->len -= len;
 1044              		.loc 1 298 0
 1045 0444 B633D5E1 		ldrh	r3, [r5, #54]
 1046 0448 023043E2 		sub	r3, r3, #2
 1047 044c B633C5E1 		strh	r3, [r5, #54]	@ movhi
 299:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->data += len;
 1048              		.loc 1 299 0
 1049 0450 403095E5 		ldr	r3, [r5, #64]
 1050 0454 022083E2 		add	r2, r3, #2
 1051 0458 402085E5 		str	r2, [r5, #64]
 1052              	.LBE117:
 1053              	.LBE116:
 318:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return space[0] << 8 | space[1];
 1054              		.loc 1 318 0
 1055 045c 00C0D3E5 		ldrb	ip, [r3]	@ zero_extendqisi2
 1056 0460 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1057              	.LBE115:
 1058              	.LBE114:
 396:apps/loader/main.c **** 		nbytes = msgb_pull_u8(msg);
 1059              		.loc 2 396 0
 1060 0464 0070A0E1 		mov	r7, r0
 1061              	.LVL167:
 1062              	.LBB119:
 1063              	.LBB118:
 318:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return space[0] << 8 | space[1];
 1064              		.loc 1 318 0
 1065 0468 0CC483E1 		orr	ip, r3, ip, asl #8
 1066              	.LBE118:
 1067              	.LBE119:
 398:apps/loader/main.c **** 		msgb_pull_u8(msg);	// XXX align
 1068              		.loc 2 398 0
 1069 046c 0500A0E1 		mov	r0, r5
 1070              	.LVL168:
 1071 0470 00C08DE5 		str	ip, [sp]
 1072 0474 FEFFFFEB 		bl	msgb_pull_u8
 1073              	.LVL169:
 399:apps/loader/main.c **** 		chip = msgb_pull_u8(msg);
 1074              		.loc 2 399 0
 1075 0478 0500A0E1 		mov	r0, r5
 1076 047c FEFFFFEB 		bl	msgb_pull_u8
 1077              	.LVL170:
 1078 0480 00B0A0E1 		mov	fp, r0
 1079              	.LVL171:
 400:apps/loader/main.c **** 		address = msgb_pull_u32(msg);
 1080              		.loc 2 400 0
 1081 0484 0500A0E1 		mov	r0, r5
 1082              	.LVL172:
 1083 0488 FEFFFFEB 		bl	msgb_pull_u32
 1084              	.LVL173:
 1085              	.LBB120:
 1086              	.LBB121:
 298:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->len -= len;
 1087              		.loc 1 298 0
 1088 048c B633D5E1 		ldrh	r3, [r5, #54]
 1089 0490 033067E0 		rsb	r3, r7, r3
 1090 0494 B633C5E1 		strh	r3, [r5, #54]	@ movhi
 299:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->data += len;
 1091              		.loc 1 299 0
 1092 0498 403095E5 		ldr	r3, [r5, #64]
 1093 049c 073083E0 		add	r3, r3, r7
 1094 04a0 403085E5 		str	r3, [r5, #64]
 1095              	.LBE121:
 1096              	.LBE120:
 402:apps/loader/main.c **** 		data = msgb_pull(msg, nbytes) - nbytes;
 1097              		.loc 2 402 0
 1098 04a4 033067E0 		rsb	r3, r7, r3
 404:apps/loader/main.c **** 		mycrc = osmo_crc16(0, data, nbytes);
 1099              		.loc 2 404 0
 1100 04a8 0310A0E1 		mov	r1, r3
 400:apps/loader/main.c **** 		address = msgb_pull_u32(msg);
 1101              		.loc 2 400 0
 1102 04ac 0090A0E1 		mov	r9, r0
 1103              	.LVL174:
 404:apps/loader/main.c **** 		mycrc = osmo_crc16(0, data, nbytes);
 1104              		.loc 2 404 0
 1105 04b0 0720A0E1 		mov	r2, r7
 1106 04b4 0000A0E3 		mov	r0, #0
 1107              	.LVL175:
 1108 04b8 04308DE5 		str	r3, [sp, #4]
 1109 04bc FEFFFFEB 		bl	osmo_crc16
 1110              	.LVL176:
 406:apps/loader/main.c **** 		if (mycrc == crc) {
 1111              		.loc 2 406 0
 1112 04c0 00C09DE5 		ldr	ip, [sp]
 1113 04c4 0C0050E1 		cmp	r0, ip
 404:apps/loader/main.c **** 		mycrc = osmo_crc16(0, data, nbytes);
 1114              		.loc 2 404 0
 1115 04c8 00A0A0E1 		mov	r10, r0
 1116              	.LVL177:
 406:apps/loader/main.c **** 		if (mycrc == crc) {
 1117              		.loc 2 406 0
 1118 04cc 04309DE5 		ldr	r3, [sp, #4]
 1119 04d0 0500001A 		bne	.L53
 407:apps/loader/main.c **** 			res = flash_program(&the_flash, address, data, nbytes);
 1120              		.loc 2 407 0
 1121 04d4 0320A0E1 		mov	r2, r3
 1122 04d8 AC009FE5 		ldr	r0, .L65+4
 1123              	.LVL178:
 1124 04dc 0910A0E1 		mov	r1, r9
 1125 04e0 0730A0E1 		mov	r3, r7
 1126 04e4 FEFFFFEB 		bl	flash_program
 1127              	.LVL179:
 1128 04e8 0080A0E1 		mov	r8, r0
 1129              	.LVL180:
 1130              	.L53:
 410:apps/loader/main.c **** 		msgb_put_u8(reply, LOADER_FLASH_PROGRAM);
 1131              		.loc 2 410 0
 1132 04ec 0400A0E1 		mov	r0, r4
 1133 04f0 0F10A0E3 		mov	r1, #15
 1134 04f4 FEFFFFEB 		bl	msgb_put_u8
 1135              	.LVL181:
 411:apps/loader/main.c **** 		msgb_put_u8(reply, nbytes);
 1136              		.loc 2 411 0
 1137 04f8 0400A0E1 		mov	r0, r4
 1138 04fc 0710A0E1 		mov	r1, r7
 1139 0500 FEFFFFEB 		bl	msgb_put_u8
 1140              	.LVL182:
 412:apps/loader/main.c **** 		msgb_put_u16(reply, mycrc);
 1141              		.loc 2 412 0
 1142 0504 0400A0E1 		mov	r0, r4
 1143 0508 0A10A0E1 		mov	r1, r10
 1144 050c FEFFFFEB 		bl	msgb_put_u16
 1145              	.LVL183:
 413:apps/loader/main.c **** 		msgb_put_u8(reply, 0);	// XXX align
 1146              		.loc 2 413 0
 1147 0510 0400A0E1 		mov	r0, r4
 1148 0514 0010A0E3 		mov	r1, #0
 1149 0518 FEFFFFEB 		bl	msgb_put_u8
 1150              	.LVL184:
 414:apps/loader/main.c **** 		msgb_put_u8(reply, chip);
 1151              		.loc 2 414 0
 1152 051c 0400A0E1 		mov	r0, r4
 1153 0520 0B10A0E1 		mov	r1, fp
 1154 0524 FEFFFFEB 		bl	msgb_put_u8
 1155              	.LVL185:
 415:apps/loader/main.c **** 		msgb_put_u32(reply, address);
 1156              		.loc 2 415 0
 1157 0528 0400A0E1 		mov	r0, r4
 1158 052c 0910A0E1 		mov	r1, r9
 1159 0530 FEFFFFEB 		bl	msgb_put_u32
 1160              	.LVL186:
 1161              	.L63:
 417:apps/loader/main.c **** 		msgb_put_u32(reply, (uint32_t) res);	// XXX
 1162              		.loc 2 417 0
 1163 0534 0400A0E1 		mov	r0, r4
 1164 0538 0810A0E1 		mov	r1, r8
 1165              	.LVL187:
 1166              	.L62:
 1167 053c FEFFFFEB 		bl	msgb_put_u32
 1168              	.LVL188:
 1169              	.L61:
 419:apps/loader/main.c **** 		sercomm_sendmsg(dlci, reply);
 1170              		.loc 2 419 0
 1171 0540 0600A0E1 		mov	r0, r6
 1172 0544 0410A0E1 		mov	r1, r4
 1173 0548 FEFFFFEB 		bl	sercomm_sendmsg
 1174              	.LVL189:
 421:apps/loader/main.c **** 		break;
 1175              		.loc 2 421 0
 1176 054c 040000EA 		b	.L40
 1177              	.LVL190:
 1178              	.L26:
 424:apps/loader/main.c **** 		printf("unknown command %d\n", command);
 1179              		.loc 2 424 0
 1180 0550 38009FE5 		ldr	r0, .L65+8
 1181              	.LVL191:
 1182 0554 0710A0E1 		mov	r1, r7
 1183 0558 FEFFFFEB 		bl	printf
 1184              	.LVL192:
 426:apps/loader/main.c **** 		msgb_free(reply);
 1185              		.loc 2 426 0
 1186 055c 0400A0E1 		mov	r0, r4
 1187 0560 FEFFFFEB 		bl	msgb_free
 1188              	.LVL193:
 1189              	.L40:
 1190              	.LBE93:
 433:apps/loader/main.c **** 	msgb_free(msg);
 1191              		.loc 2 433 0
 1192 0564 0500A0E1 		mov	r0, r5
 1193 0568 FEFFFFEB 		bl	msgb_free
 1194              	.LVL194:
 1195 056c 020000EA 		b	.L23
 1196              	.LVL195:
 1197              	.L25:
 230:apps/loader/main.c **** 		printf("Failed to allocate reply buffer!\n");
 1198              		.loc 2 230 0
 1199 0570 1C009FE5 		ldr	r0, .L65+12
 1200              	.LVL196:
 1201 0574 FEFFFFEB 		bl	puts
 1202              	.LVL197:
 231:apps/loader/main.c **** 		goto out;
 1203              		.loc 2 231 0
 1204 0578 F9FFFFEA 		b	.L40
 1205              	.LVL198:
 1206              	.L23:
 434:apps/loader/main.c **** }
 1207              		.loc 2 434 0
 1208 057c 0CD08DE2 		add	sp, sp, #12
 1209              		@ sp needed
 1210 0580 F04FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1211              	.LVL199:
 1212 0584 1EFF2FE1 		bx	lr
 1213              	.L66:
 1214              		.align	2
 1215              	.L65:
 1216 0588 6E000000 		.word	.LC3
 1217 058c 00000000 		.word	the_flash
 1218 0590 79000000 		.word	.LC4
 1219 0594 8D000000 		.word	.LC5
 1220              		.cfi_endproc
 1221              	.LFE69:
 1223              		.section	.text.startup.main,"ax",%progbits
 1224              		.align	2
 1225              		.global	main
 1227              	main:
 1228              	.LFB68:
 129:apps/loader/main.c **** {
 1229              		.loc 2 129 0
 1230              		.cfi_startproc
 1231              		@ Function supports interworking.
 1232              		@ args = 0, pretend = 0, frame = 0
 1233              		@ frame_needed = 0, uses_anonymous_args = 0
 1234              	.LVL200:
 1235 0000 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 1236              	.LCFI8:
 1237              		.cfi_def_cfa_offset 24
 1238              		.cfi_offset 4, -24
 1239              		.cfi_offset 5, -20
 1240              		.cfi_offset 6, -16
 1241              		.cfi_offset 7, -12
 1242              		.cfi_offset 8, -8
 1243              		.cfi_offset 14, -4
 133:apps/loader/main.c **** 		putchar_asm(phone_ack[i]);
 1244              		.loc 2 133 0
 1245 0004 1C529FE5 		ldr	r5, .L79
 132:apps/loader/main.c **** 	for (i = 0; i < sizeof(phone_ack); i++) {
 1246              		.loc 2 132 0
 1247 0008 0040A0E3 		mov	r4, #0
 1248              	.LVL201:
 1249              	.L68:
 133:apps/loader/main.c **** 		putchar_asm(phone_ack[i]);
 1250              		.loc 2 133 0 discriminator 2
 1251 000c 0400D5E7 		ldrb	r0, [r5, r4]	@ zero_extendqisi2
 132:apps/loader/main.c **** 	for (i = 0; i < sizeof(phone_ack); i++) {
 1252              		.loc 2 132 0 discriminator 2
 1253 0010 014084E2 		add	r4, r4, #1
 1254              	.LVL202:
 133:apps/loader/main.c **** 		putchar_asm(phone_ack[i]);
 1255              		.loc 2 133 0 discriminator 2
 1256 0014 FEFFFFEB 		bl	putchar_asm
 1257              	.LVL203:
 132:apps/loader/main.c **** 	for (i = 0; i < sizeof(phone_ack); i++) {
 1258              		.loc 2 132 0 discriminator 2
 1259 0018 070054E3 		cmp	r4, #7
 1260 001c FAFFFF1A 		bne	.L68
 137:apps/loader/main.c **** 	board_init(0);
 1261              		.loc 2 137 0
 1262 0020 0000A0E3 		mov	r0, #0
 1263 0024 FEFFFFEB 		bl	board_init
 1264              	.LVL204:
 138:apps/loader/main.c **** 	sercomm_uart = sercomm_get_uart();
 1265              		.loc 2 138 0
 1266 0028 FEFFFFEB 		bl	sercomm_get_uart
 1267              	.LVL205:
 1268 002c F8619FE5 		ldr	r6, .L79+4
 1269 0030 000086E5 		str	r0, [r6]
 141:apps/loader/main.c **** 	puts("\n\nVADIMBETMAN Loader (revision " GIT_REVISION ")\n");
 1270              		.loc 2 141 0
 1271 0034 F4019FE5 		ldr	r0, .L79+8
 1272 0038 FEFFFFEB 		bl	puts
 1273              	.LVL206:
 142:apps/loader/main.c **** 	puts(hr);
 1274              		.loc 2 142 0
 1275 003c F0319FE5 		ldr	r3, .L79+12
 1276              	.LBB161:
 1277              	.LBB162:
 1278              		.file 3 "include/fb/framebuffer.h"
   1:include/fb/framebuffer.h **** #ifndef _FB_FRAMEBUFFER_H
   2:include/fb/framebuffer.h **** #define _FB_FRAMEBUFFER_H
   3:include/fb/framebuffer.h **** 
   4:include/fb/framebuffer.h **** #include <fb/font.h>
   5:include/fb/framebuffer.h **** #include <stdint.h>
   6:include/fb/framebuffer.h **** 
   7:include/fb/framebuffer.h **** /* color is encoded as <special><red><green><blue> */
   8:include/fb/framebuffer.h **** /* if a color is "special", then the RGB components most likely
   9:include/fb/framebuffer.h ****    don't make sense. Use "special" colours when you have to
  10:include/fb/framebuffer.h ****    mask out bits with transparency or you have to encode
  11:include/fb/framebuffer.h ****    colours in a fixed color palette... */
  12:include/fb/framebuffer.h **** 
  13:include/fb/framebuffer.h **** #define FB_COLOR_WHITE		0x00ffffffU
  14:include/fb/framebuffer.h **** #define FB_COLOR_BLACK		0x00000000U
  15:include/fb/framebuffer.h **** #define FB_COLOR_TRANSP		0x01ffffffU
  16:include/fb/framebuffer.h **** 
  17:include/fb/framebuffer.h **** #define FB_COLOR_RGB(r,g,b) ((((r) & 0xff)<<16)|(((g)&0xff)<<8)|((b)&0xff))
  18:include/fb/framebuffer.h **** #define FB_COLOR_RED		FB_COLOR_RGB(0xff,0x00,0x00)
  19:include/fb/framebuffer.h **** #define FB_COLOR_GREEN		FB_COLOR_RGB(0x00,0xff,0x00)
  20:include/fb/framebuffer.h **** #define FB_COLOR_BLUE		FB_COLOR_RGB(0x00,0x00,0xff)
  21:include/fb/framebuffer.h **** 
  22:include/fb/framebuffer.h **** /* encode */
  23:include/fb/framebuffer.h **** 
  24:include/fb/framebuffer.h **** /* decode */
  25:include/fb/framebuffer.h **** #define FB_COLOR_IS_SPECIAL(v)     (!!((v) & 0xff000000U))
  26:include/fb/framebuffer.h **** #define FB_COLOR_TO_R(v)		(((v)>>16) & 0xff)
  27:include/fb/framebuffer.h **** #define FB_COLOR_TO_G(v)		(((v)>> 8) & 0xff)
  28:include/fb/framebuffer.h **** #define FB_COLOR_TO_B(v)		( (v)      & 0xff)
  29:include/fb/framebuffer.h **** 
  30:include/fb/framebuffer.h **** struct framebuffer {
  31:include/fb/framebuffer.h **** 	char name[8];				// keep it short!
  32:include/fb/framebuffer.h **** 	void (*init)();				// (re)initialize
  33:include/fb/framebuffer.h **** 	void (*clear)();			// clear display
  34:include/fb/framebuffer.h **** 	void (*boxto)(uint16_t x,uint16_t y);	// draw box to xy
  35:include/fb/framebuffer.h **** 	void (*lineto)(uint16_t x,uint16_t y);	// draw line to xy
  36:include/fb/framebuffer.h **** 	int (*putstr)(char *c,int maxwidth);	// put text in current font to fb
  37:include/fb/framebuffer.h **** 	void (*flush)();			// flush changes
  38:include/fb/framebuffer.h **** 
  39:include/fb/framebuffer.h **** 	uint16_t width,height;			// width/height of fb
  40:include/fb/framebuffer.h **** 	uint16_t cursor_x,cursor_y;		// current cursor
  41:include/fb/framebuffer.h **** 	uint32_t fg_color,bg_color;		// current fg/bg color
  42:include/fb/framebuffer.h **** 	enum fb_font_id font;			// current font
  43:include/fb/framebuffer.h **** };
  44:include/fb/framebuffer.h **** 
  45:include/fb/framebuffer.h **** /* there is a single framebuffer, the specific driver defines
  46:include/fb/framebuffer.h ****    the "framebuffer" symbol */
  47:include/fb/framebuffer.h **** extern struct framebuffer *framebuffer;
  48:include/fb/framebuffer.h **** 
  49:include/fb/framebuffer.h **** static inline void
  50:include/fb/framebuffer.h **** fb_init(){
  51:include/fb/framebuffer.h **** 	framebuffer->init();
  52:include/fb/framebuffer.h **** }
  53:include/fb/framebuffer.h **** 
  54:include/fb/framebuffer.h **** static inline void
  55:include/fb/framebuffer.h **** fb_clear(){
  56:include/fb/framebuffer.h **** 	framebuffer->clear();
 1279              		.loc 3 56 0
 1280 0040 F0419FE5 		ldr	r4, .L79+16
 1281              	.LVL207:
 1282              	.LBE162:
 1283              	.LBE161:
 142:apps/loader/main.c **** 	puts(hr);
 1284              		.loc 2 142 0
 1285 0044 000093E5 		ldr	r0, [r3]
 1286 0048 FEFFFFEB 		bl	puts
 1287              	.LVL208:
 1288              	.LBB164:
 1289              	.LBB163:
 1290              		.loc 3 56 0
 1291 004c 003094E5 		ldr	r3, [r4]
 1292 0050 0CC093E5 		ldr	ip, [r3, #12]
 1293 0054 0FE0A0E1 		mov	lr, pc
 1294 0058 1CFF2FE1 		bx	ip
 1295              	.LVL209:
 1296              	.LBE163:
 1297              	.LBE164:
 1298              	.LBB165:
 1299              	.LBB166:
  57:include/fb/framebuffer.h **** }
  58:include/fb/framebuffer.h **** 
  59:include/fb/framebuffer.h **** static inline void
  60:include/fb/framebuffer.h **** fb_boxto(uint16_t x,uint16_t y){
  61:include/fb/framebuffer.h **** 	framebuffer->boxto(x,y);
  62:include/fb/framebuffer.h **** }
  63:include/fb/framebuffer.h **** 
  64:include/fb/framebuffer.h **** static inline void
  65:include/fb/framebuffer.h **** fb_lineto(uint16_t x,uint16_t y){
  66:include/fb/framebuffer.h **** 	framebuffer->lineto(x,y);
  67:include/fb/framebuffer.h **** }
  68:include/fb/framebuffer.h **** 
  69:include/fb/framebuffer.h **** static inline int
  70:include/fb/framebuffer.h **** fb_putstr(char *str,int maxwidth){
  71:include/fb/framebuffer.h **** 	return framebuffer->putstr(str,maxwidth);
  72:include/fb/framebuffer.h **** }
  73:include/fb/framebuffer.h **** 
  74:include/fb/framebuffer.h **** static inline void
  75:include/fb/framebuffer.h **** fb_flush(){
  76:include/fb/framebuffer.h **** 	framebuffer->flush();
  77:include/fb/framebuffer.h **** }
  78:include/fb/framebuffer.h **** 
  79:include/fb/framebuffer.h **** static inline void
  80:include/fb/framebuffer.h **** fb_gotoxy(uint16_t x,uint16_t y){
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
  83:include/fb/framebuffer.h **** }
  84:include/fb/framebuffer.h **** 
  85:include/fb/framebuffer.h **** static inline void
  86:include/fb/framebuffer.h **** fb_setfg(uint32_t color){
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1300              		.loc 3 87 0
 1301 005c 003094E5 		ldr	r3, [r4]
 1302              	.LBE166:
 1303              	.LBE165:
 1304              	.LBB169:
 1305              	.LBB170:
  88:include/fb/framebuffer.h **** }
  89:include/fb/framebuffer.h **** 
  90:include/fb/framebuffer.h **** static inline void
  91:include/fb/framebuffer.h **** fb_setbg(uint32_t color){
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
  93:include/fb/framebuffer.h **** }
  94:include/fb/framebuffer.h **** 
  95:include/fb/framebuffer.h **** static inline void
  96:include/fb/framebuffer.h **** fb_setfont(enum fb_font_id fid){
  97:include/fb/framebuffer.h **** 	framebuffer->font = fid;
 1306              		.loc 3 97 0
 1307 0060 0120A0E3 		mov	r2, #1
 1308              	.LBE170:
 1309              	.LBE169:
 151:apps/loader/main.c **** 	fb_putstr("loader",framebuffer->width-4);
 1310              		.loc 2 151 0
 1311 0064 B012D3E1 		ldrh	r1, [r3, #32]
 1312              	.LBB172:
 1313              	.LBB167:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1314              		.loc 3 87 0
 1315 0068 0050A0E3 		mov	r5, #0
 1316              	.LBE167:
 1317              	.LBE172:
 1318              	.LBB173:
 1319              	.LBB174:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 1320              		.loc 3 92 0
 1321 006c FF74E0E3 		mvn	r7, #-16777216
 1322              	.LBE174:
 1323              	.LBE173:
 1324              	.LBB176:
 1325              	.LBB171:
 1326              		.loc 3 97 0
 1327 0070 3020C3E5 		strb	r2, [r3, #48]
 1328              	.LBE171:
 1329              	.LBE176:
 1330              	.LBB177:
 1331              	.LBB178:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1332              		.loc 3 81 0
 1333 0074 0280A0E3 		mov	r8, #2
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1334              		.loc 3 82 0
 1335 0078 1420A0E3 		mov	r2, #20
 1336              	.LBE178:
 1337              	.LBE177:
 1338              	.LBB180:
 1339              	.LBB168:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1340              		.loc 3 87 0
 1341 007c 285083E5 		str	r5, [r3, #40]
 1342              	.LVL210:
 1343              	.LBE168:
 1344              	.LBE180:
 1345              	.LBB181:
 1346              	.LBB175:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 1347              		.loc 3 92 0
 1348 0080 2C7083E5 		str	r7, [r3, #44]
 1349              	.LVL211:
 1350              	.LBE175:
 1351              	.LBE181:
 1352              	.LBB182:
 1353              	.LBB179:
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1354              		.loc 3 82 0
 1355 0084 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 1356              	.LVL212:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1357              		.loc 3 81 0
 1358 0088 B482C3E1 		strh	r8, [r3, #36]	@ movhi
 1359              	.LBE179:
 1360              	.LBE182:
 1361              	.LBB183:
 1362              	.LBB184:
  71:include/fb/framebuffer.h **** 	return framebuffer->putstr(str,maxwidth);
 1363              		.loc 3 71 0
 1364 008c 041041E2 		sub	r1, r1, #4
 1365              	.LVL213:
 1366 0090 A4019FE5 		ldr	r0, .L79+20
 1367 0094 18C093E5 		ldr	ip, [r3, #24]
 1368 0098 0FE0A0E1 		mov	lr, pc
 1369 009c 1CFF2FE1 		bx	ip
 1370              	.LVL214:
 1371              	.LBE184:
 1372              	.LBE183:
 1373              	.LBB185:
 1374              	.LBB186:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1375              		.loc 3 87 0
 1376 00a0 003094E5 		ldr	r3, [r4]
 1377              	.LBE186:
 1378              	.LBE185:
 157:apps/loader/main.c **** 	fb_boxto(framebuffer->width-3,38);
 1379              		.loc 2 157 0
 1380 00a4 B002D3E1 		ldrh	r0, [r3, #32]
 1381              	.LBB188:
 1382              	.LBB187:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1383              		.loc 3 87 0
 1384 00a8 FF28A0E3 		mov	r2, #16711680
 1385 00ac 282083E5 		str	r2, [r3, #40]
 1386              	.LVL215:
 1387              	.LBE187:
 1388              	.LBE188:
 157:apps/loader/main.c **** 	fb_boxto(framebuffer->width-3,38);
 1389              		.loc 2 157 0
 1390 00b0 030040E2 		sub	r0, r0, #3
 1391              	.LBB189:
 1392              	.LBB190:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 1393              		.loc 3 92 0
 1394 00b4 FF20A0E3 		mov	r2, #255
 1395 00b8 2C2083E5 		str	r2, [r3, #44]
 1396              	.LVL216:
 1397              	.LBE190:
 1398              	.LBE189:
 1399              	.LBB191:
 1400              	.LBB192:
  61:include/fb/framebuffer.h **** 	framebuffer->boxto(x,y);
 1401              		.loc 3 61 0
 1402 00bc 0008A0E1 		mov	r0, r0, asl #16
 1403              	.LBE192:
 1404              	.LBE191:
 1405              	.LBB194:
 1406              	.LBB195:
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1407              		.loc 3 82 0
 1408 00c0 1920A0E3 		mov	r2, #25
 1409 00c4 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 1410              	.LVL217:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1411              		.loc 3 81 0
 1412 00c8 B482C3E1 		strh	r8, [r3, #36]	@ movhi
 1413              	.LBE195:
 1414              	.LBE194:
 1415              	.LBB196:
 1416              	.LBB193:
  61:include/fb/framebuffer.h **** 	framebuffer->boxto(x,y);
 1417              		.loc 3 61 0
 1418 00cc 2008A0E1 		mov	r0, r0, lsr #16
 1419 00d0 2610A0E3 		mov	r1, #38
 1420 00d4 10C093E5 		ldr	ip, [r3, #16]
 1421 00d8 0FE0A0E1 		mov	lr, pc
 1422 00dc 1CFF2FE1 		bx	ip
 1423              	.LVL218:
 1424              	.LBE193:
 1425              	.LBE196:
 1426              	.LBB197:
 1427              	.LBB198:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1428              		.loc 3 87 0
 1429 00e0 003094E5 		ldr	r3, [r4]
 1430              	.LBE198:
 1431              	.LBE197:
 1432              	.LBB200:
 1433              	.LBB201:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1434              		.loc 3 81 0
 1435 00e4 0820A0E3 		mov	r2, #8
 1436              	.LBE201:
 1437              	.LBE200:
 162:apps/loader/main.c **** 	fb_putstr("vadimbetman",framebuffer->width-4);
 1438              		.loc 2 162 0
 1439 00e8 B012D3E1 		ldrh	r1, [r3, #32]
 1440              	.LBB203:
 1441              	.LBB202:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1442              		.loc 3 81 0
 1443 00ec B422C3E1 		strh	r2, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1444              		.loc 3 82 0
 1445 00f0 2120A0E3 		mov	r2, #33
 1446 00f4 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 1447              	.LBE202:
 1448              	.LBE203:
 1449              	.LBB204:
 1450              	.LBB199:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1451              		.loc 3 87 0
 1452 00f8 287083E5 		str	r7, [r3, #40]
 1453              	.LVL219:
 1454              	.LBE199:
 1455              	.LBE204:
 1456              	.LBB205:
 1457              	.LBB206:
 1458              		.loc 3 97 0
 1459 00fc 3050C3E5 		strb	r5, [r3, #48]
 1460              	.LVL220:
 1461              	.LBE206:
 1462              	.LBE205:
 1463              	.LBB207:
 1464              	.LBB208:
  71:include/fb/framebuffer.h **** 	return framebuffer->putstr(str,maxwidth);
 1465              		.loc 3 71 0
 1466 0100 041041E2 		sub	r1, r1, #4
 1467              	.LVL221:
 1468 0104 34019FE5 		ldr	r0, .L79+24
 1469 0108 18C093E5 		ldr	ip, [r3, #24]
 1470 010c 0FE0A0E1 		mov	lr, pc
 1471 0110 1CFF2FE1 		bx	ip
 1472              	.LVL222:
 1473              	.LBE208:
 1474              	.LBE207:
 1475              	.LBB209:
 1476              	.LBB210:
  76:include/fb/framebuffer.h **** 	framebuffer->flush();
 1477              		.loc 3 76 0
 1478 0114 003094E5 		ldr	r3, [r4]
 1479 0118 1CC093E5 		ldr	ip, [r3, #28]
 1480 011c 0FE0A0E1 		mov	lr, pc
 1481 0120 1CFF2FE1 		bx	ip
 1482              	.LVL223:
 1483              	.LBE210:
 1484              	.LBE209:
 167:apps/loader/main.c **** 	printf("Running on %s in environment %s\n", manifest_board,
 1485              		.loc 2 167 0
 1486 0124 18319FE5 		ldr	r3, .L79+28
 1487 0128 001093E5 		ldr	r1, [r3]
 1488 012c 14319FE5 		ldr	r3, .L79+32
 171:apps/loader/main.c **** 	if (flash_init(&the_flash, 0)) {
 1489              		.loc 2 171 0
 1490 0130 14419FE5 		ldr	r4, .L79+36
 167:apps/loader/main.c **** 	printf("Running on %s in environment %s\n", manifest_board,
 1491              		.loc 2 167 0
 1492 0134 002093E5 		ldr	r2, [r3]
 1493 0138 10019FE5 		ldr	r0, .L79+40
 1494 013c FEFFFFEB 		bl	printf
 1495              	.LVL224:
 171:apps/loader/main.c **** 	if (flash_init(&the_flash, 0)) {
 1496              		.loc 2 171 0
 1497 0140 0510A0E1 		mov	r1, r5
 1498 0144 0400A0E1 		mov	r0, r4
 1499 0148 FEFFFFEB 		bl	flash_init
 1500              	.LVL225:
 1501 014c 005050E2 		subs	r5, r0, #0
 1502 0150 0670A0E1 		mov	r7, r6
 1503 0154 0200000A 		beq	.L70
 172:apps/loader/main.c **** 		puts("Failed to initialize flash!\n");
 1504              		.loc 2 172 0
 1505 0158 F4009FE5 		ldr	r0, .L79+44
 1506 015c FEFFFFEB 		bl	puts
 1507              	.LVL226:
 1508 0160 100000EA 		b	.L71
 1509              	.L70:
 1510              	.LBB211:
 174:apps/loader/main.c **** 		printf("Found flash of %d bytes at 0x%x with %d regions\n",
 1511              		.loc 2 174 0
 1512 0164 EC009FE5 		ldr	r0, .L79+48
 1513 0168 041094E5 		ldr	r1, [r4, #4]
 1514 016c 002094E5 		ldr	r2, [r4]
 1515 0170 083094E5 		ldr	r3, [r4, #8]
 1516 0174 FEFFFFEB 		bl	printf
 1517              	.LVL227:
 1518 0178 106084E2 		add	r6, r4, #16
 1519              	.LVL228:
 1520              	.L72:
 179:apps/loader/main.c **** 		for (i = 0; i < the_flash.f_nregions; i++) {
 1521              		.loc 2 179 0 discriminator 1
 1522 017c 083094E5 		ldr	r3, [r4, #8]
 1523 0180 030055E1 		cmp	r5, r3
 1524 0184 0C6086E2 		add	r6, r6, #12
 1525 0188 0600002A 		bcs	.L71
 180:apps/loader/main.c **** 			printf("  Region %d of %d pages with %d bytes each.\n",
 1526              		.loc 2 180 0 discriminator 2
 1527 018c 0C2046E2 		sub	r2, r6, #12
 1528 0190 0510A0E1 		mov	r1, r5
 1529 0194 C0009FE5 		ldr	r0, .L79+52
 1530 0198 0C0092E8 		ldmia	r2, {r2, r3}
 1531 019c FEFFFFEB 		bl	printf
 1532              	.LVL229:
 179:apps/loader/main.c **** 		for (i = 0; i < the_flash.f_nregions; i++) {
 1533              		.loc 2 179 0 discriminator 2
 1534 01a0 015085E2 		add	r5, r5, #1
 1535              	.LVL230:
 1536 01a4 F4FFFFEA 		b	.L72
 1537              	.LVL231:
 1538              	.L71:
 1539              	.LBE211:
 189:apps/loader/main.c **** 	keypad_set_handler(&key_handler);
 1540              		.loc 2 189 0
 1541 01a8 B0009FE5 		ldr	r0, .L79+56
 1542 01ac FEFFFFEB 		bl	keypad_set_handler
 1543              	.LVL232:
 192:apps/loader/main.c **** 	sercomm_register_rx_cb(SC_DLCI_LOADER, &cmd_handler);
 1544              		.loc 2 192 0
 1545 01b0 AC109FE5 		ldr	r1, .L79+60
 1546 01b4 0900A0E3 		mov	r0, #9
 1547 01b8 FEFFFFEB 		bl	sercomm_register_rx_cb
 1548              	.LVL233:
 1549              	.LBB212:
 1550              	.LBB213:
 1551              	.LBB214:
 1552              	.LBB215:
 1553              	.LBB216:
 388:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	struct msgb *msg = msgb_alloc(size, name);
 1554              		.loc 1 388 0
 1555 01bc 0D00A0E3 		mov	r0, #13
 1556 01c0 A0109FE5 		ldr	r1, .L79+64
 1557 01c4 FEFFFFEB 		bl	msgb_alloc
 1558              	.LVL234:
 1559              		.loc 1 389 0
 1560 01c8 004050E2 		subs	r4, r0, #0
 1561 01cc 0500000A 		beq	.L74
 1562              	.LVL235:
 1563              	.LBB217:
 1564              	.LBB218:
 343:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msg->data += len;
 1565              		.loc 1 343 0
 1566 01d0 403094E5 		ldr	r3, [r4, #64]
 1567 01d4 043083E2 		add	r3, r3, #4
 1568 01d8 403084E5 		str	r3, [r4, #64]
 344:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msg->tail += len;
 1569              		.loc 1 344 0
 1570 01dc 3C3094E5 		ldr	r3, [r4, #60]
 1571 01e0 043083E2 		add	r3, r3, #4
 1572 01e4 3C3084E5 		str	r3, [r4, #60]
 1573              	.LVL236:
 1574              	.L74:
 1575              	.LBE218:
 1576              	.LBE217:
 1577              	.LBE216:
 1578              	.LBE215:
 1579              	.LBE214:
 116:apps/loader/main.c **** 	msgb_put_u8(msg, LOADER_INIT);
 1580              		.loc 2 116 0
 1581 01e8 0400A0E1 		mov	r0, r4
 1582              	.LVL237:
 1583 01ec 0010A0E3 		mov	r1, #0
 1584 01f0 FEFFFFEB 		bl	msgb_put_u8
 1585              	.LVL238:
 117:apps/loader/main.c **** 	msgb_put_u32(msg, 0);
 1586              		.loc 2 117 0
 1587 01f4 0400A0E1 		mov	r0, r4
 1588 01f8 0010A0E3 		mov	r1, #0
 1589 01fc FEFFFFEB 		bl	msgb_put_u32
 1590              	.LVL239:
 118:apps/loader/main.c **** 	msgb_put_u32(msg, &_start);
 1591              		.loc 2 118 0
 1592 0200 0400A0E1 		mov	r0, r4
 1593 0204 60109FE5 		ldr	r1, .L79+68
 1594 0208 FEFFFFEB 		bl	msgb_put_u32
 1595              	.LVL240:
 119:apps/loader/main.c **** 	sercomm_sendmsg(dlci, msg);
 1596              		.loc 2 119 0
 1597 020c 0900A0E3 		mov	r0, #9
 1598 0210 0410A0E1 		mov	r1, r4
 1599 0214 FEFFFFEB 		bl	sercomm_sendmsg
 1600              	.LVL241:
 1601              	.L75:
 1602              	.LBE213:
 1603              	.LBE212:
 199:apps/loader/main.c **** 		keypad_poll();
 1604              		.loc 2 199 0 discriminator 1
 1605 0218 FEFFFFEB 		bl	keypad_poll
 1606              	.LVL242:
 200:apps/loader/main.c **** 		uart_poll(sercomm_uart);
 1607              		.loc 2 200 0 discriminator 1
 1608 021c 0000D7E5 		ldrb	r0, [r7]	@ zero_extendqisi2
 1609 0220 FEFFFFEB 		bl	uart_poll
 1610              	.LVL243:
 1611 0224 FBFFFFEA 		b	.L75
 1612              	.L80:
 1613              		.align	2
 1614              	.L79:
 1615 0228 00000000 		.word	.LANCHOR1
 1616 022c 00000000 		.word	.LANCHOR0
 1617 0230 AE000000 		.word	.LC6
 1618 0234 00000000 		.word	.LANCHOR2
 1619 0238 00000000 		.word	framebuffer
 1620 023c EC000000 		.word	.LC7
 1621 0240 F3000000 		.word	.LC8
 1622 0244 00000000 		.word	manifest_board
 1623 0248 00000000 		.word	manifest_environment
 1624 024c 00000000 		.word	the_flash
 1625 0250 FF000000 		.word	.LC9
 1626 0254 20010000 		.word	.LC10
 1627 0258 3D010000 		.word	.LC11
 1628 025c 6E010000 		.word	.LC12
 1629 0260 00000000 		.word	key_handler
 1630 0264 00000000 		.word	cmd_handler
 1631 0268 6E000000 		.word	.LC3
 1632 026c 00000000 		.word	_start
 1633              		.cfi_endproc
 1634              	.LFE68:
 1636              		.comm	the_flash,60,4
 1637              		.global	flag
 1638              		.global	hr
 1639              		.section	.rodata
 1640              		.set	.LANCHOR1,. + 0
 1643              	phone_ack:
 1644 0000 1B       		.byte	27
 1645 0001 F6       		.byte	-10
 1646 0002 02       		.byte	2
 1647 0003 00       		.byte	0
 1648 0004 41       		.byte	65
 1649 0005 03       		.byte	3
 1650 0006 42       		.byte	66
 1651              		.section	.rodata.str1.1,"aMS",%progbits,1
 1652              	.LC0:
 1653 0000 6D736762 		.ascii	"msgb(%p): Not enough tailroom msgb_push (%u < %u)\012"
 1653      28257029 
 1653      3A204E6F 
 1653      7420656E 
 1653      6F756768 
 1654 0032 00       		.ascii	"\000"
 1655              	.LC1:
 1656 0033 506F7765 		.ascii	"Powering off due to keypress.\012\000"
 1656      72696E67 
 1656      206F6666 
 1656      20647565 
 1656      20746F20 
 1657              	.LC2:
 1658 0052 52657365 		.ascii	"Resetting due to keypress.\012\000"
 1658      7474696E 
 1658      67206475 
 1658      6520746F 
 1658      206B6579 
 1659              	.LC3:
 1660 006e 73657263 		.ascii	"sercomm_tx\000"
 1660      6F6D6D5F 
 1660      747800
 1661              	.LC4:
 1662 0079 756E6B6E 		.ascii	"unknown command %d\012\000"
 1662      6F776E20 
 1662      636F6D6D 
 1662      616E6420 
 1662      25640A00 
 1663              	.LC5:
 1664 008d 4661696C 		.ascii	"Failed to allocate reply buffer!\000"
 1664      65642074 
 1664      6F20616C 
 1664      6C6F6361 
 1664      74652072 
 1665              	.LC6:
 1666 00ae 0A0A5641 		.ascii	"\012\012VADIMBETMAN Loader (revision osmocon_v0.0.0"
 1666      44494D42 
 1666      45544D41 
 1666      4E204C6F 
 1666      61646572 
 1667 00db 2D313736 		.ascii	"-1766-g9ec3f72)\012\000"
 1667      362D6739 
 1667      65633366 
 1667      3732290A 
 1667      00
 1668              	.LC7:
 1669 00ec 6C6F6164 		.ascii	"loader\000"
 1669      657200
 1670              	.LC8:
 1671 00f3 76616469 		.ascii	"vadimbetman\000"
 1671      6D626574 
 1671      6D616E00 
 1672              	.LC9:
 1673 00ff 52756E6E 		.ascii	"Running on %s in environment %s\012\000"
 1673      696E6720 
 1673      6F6E2025 
 1673      7320696E 
 1673      20656E76 
 1674              	.LC10:
 1675 0120 4661696C 		.ascii	"Failed to initialize flash!\012\000"
 1675      65642074 
 1675      6F20696E 
 1675      69746961 
 1675      6C697A65 
 1676              	.LC11:
 1677 013d 466F756E 		.ascii	"Found flash of %d bytes at 0x%x with %d regions\012"
 1677      6420666C 
 1677      61736820 
 1677      6F662025 
 1677      64206279 
 1678 016d 00       		.ascii	"\000"
 1679              	.LC12:
 1680 016e 20205265 		.ascii	"  Region %d of %d pages with %d bytes each.\012\000"
 1680      67696F6E 
 1680      20256420 
 1680      6F662025 
 1680      64207061 
 1681              	.LC13:
 1682 019b 3D3D3D3D 		.ascii	"==================================================="
 1682      3D3D3D3D 
 1682      3D3D3D3D 
 1682      3D3D3D3D 
 1682      3D3D3D3D 
 1683 01ce 3D3D3D3D 		.ascii	"===================\012\000"
 1683      3D3D3D3D 
 1683      3D3D3D3D 
 1683      3D3D3D3D 
 1683      3D3D3D0A 
 1684              		.data
 1685              		.align	2
 1686              		.set	.LANCHOR2,. + 0
 1689              	hr:
 1690 0000 9B010000 		.word	.LC13
 1691              		.bss
 1692              		.align	2
 1693              		.set	.LANCHOR0,. + 0
 1696              	sercomm_uart:
 1697 0000 00000000 		.space	4
 1700              	flag:
 1701 0004 00000000 		.space	4
 1702              		.text
 1703              	.Letext0:
 1704              		.file 4 "/opt/arm/install/arm-none-eabi/sys-include/stdint.h"
 1705              		.file 5 "/opt/arm/install/lib/gcc/arm-none-eabi/4.8.2/include/stddef.h"
 1706              		.file 6 "include/keypad.h"
 1707              		.file 7 "../../shared/libosmocore/include/osmocom/core/linuxlist.h"
 1708              		.file 8 "include/comm/sercomm.h"
 1709              		.file 9 "include/fb/font.h"
 1710              		.file 10 "include/flash/cfi_flash.h"
 1711              		.file 11 "apps/loader/protocol.h"
 1712              		.file 12 "include/manifest.h"
 1713              		.file 13 "../../shared/libosmocore/include/osmocom/core/crc16.h"
 1714              		.file 14 "include/uart.h"
 1715              		.file 15 "include/delay.h"
 1716              		.file 16 "../../shared/libosmocore/include/osmocom/core/panic.h"
 1717              		.file 17 "include/abb/twl3025.h"
 1718              		.file 18 "include/calypso/timer.h"
 1719              		.file 19 "include/stdio.h"
 1720              		.file 20 "include/calypso/clock.h"
 1721              		.file 21 "include/board.h"
 1722              		.file 22 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccmsYMdR.s:17     .text.msgb_pull_u8:00000000 $a
     /tmp/ccmsYMdR.s:19     .text.msgb_pull_u8:00000000 msgb_pull_u8
     /tmp/ccmsYMdR.s:50     .text.msgb_pull_u32:00000000 $a
     /tmp/ccmsYMdR.s:52     .text.msgb_pull_u32:00000000 msgb_pull_u32
     /tmp/ccmsYMdR.s:90     .text.flush_uart:00000000 $a
     /tmp/ccmsYMdR.s:92     .text.flush_uart:00000000 flush_uart
     /tmp/ccmsYMdR.s:133    .text.flush_uart:0000002c $d
     /tmp/ccmsYMdR.s:138    .text.msgb_put:00000000 $a
     /tmp/ccmsYMdR.s:140    .text.msgb_put:00000000 msgb_put
     /tmp/ccmsYMdR.s:207    .text.msgb_put:00000058 $d
     /tmp/ccmsYMdR.s:212    .text.msgb_put_u16:00000000 $a
     /tmp/ccmsYMdR.s:214    .text.msgb_put_u16:00000000 msgb_put_u16
     /tmp/ccmsYMdR.s:246    .text.msgb_put_u8:00000000 $a
     /tmp/ccmsYMdR.s:248    .text.msgb_put_u8:00000000 msgb_put_u8
     /tmp/ccmsYMdR.s:277    .text.loader_send_simple:00000000 $a
     /tmp/ccmsYMdR.s:279    .text.loader_send_simple:00000000 loader_send_simple
     /tmp/ccmsYMdR.s:315    .text.msgb_put_u32:00000000 $a
     /tmp/ccmsYMdR.s:317    .text.msgb_put_u32:00000000 msgb_put_u32
     /tmp/ccmsYMdR.s:356    .text.key_handler:00000000 $a
     /tmp/ccmsYMdR.s:358    .text.key_handler:00000000 key_handler
     /tmp/ccmsYMdR.s:425    .text.key_handler:00000048 $d
     /tmp/ccmsYMdR.s:431    .text.cmd_handler:00000000 $a
     /tmp/ccmsYMdR.s:433    .text.cmd_handler:00000000 cmd_handler
     /tmp/ccmsYMdR.s:514    .text.cmd_handler:00000060 $d
     /tmp/ccmsYMdR.s:532    .text.cmd_handler:0000009c $a
     /tmp/ccmsYMdR.s:1216   .text.cmd_handler:00000588 $d
                            *COM*:0000003c the_flash
     /tmp/ccmsYMdR.s:1224   .text.startup.main:00000000 $a
     /tmp/ccmsYMdR.s:1227   .text.startup.main:00000000 main
     /tmp/ccmsYMdR.s:1615   .text.startup.main:00000228 $d
     /tmp/ccmsYMdR.s:1700   .bss:00000004 flag
     /tmp/ccmsYMdR.s:1689   .data:00000000 hr
     /tmp/ccmsYMdR.s:1643   .rodata:00000000 phone_ack
     /tmp/ccmsYMdR.s:1685   .data:00000000 $d
     /tmp/ccmsYMdR.s:1692   .bss:00000000 $d
     /tmp/ccmsYMdR.s:1696   .bss:00000000 sercomm_uart
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
uart_poll
delay_ms
osmo_panic
sercomm_sendmsg
puts
twl3025_power_off
wdog_reset
msgb_alloc
calypso_bootrom
osmo_crc16
memcpy
flash_block_erase
flash_block_unlock
flash_block_lock
flash_block_lockdown
flash_block_getlock
flash_program
printf
msgb_free
putchar_asm
board_init
sercomm_get_uart
flash_init
keypad_set_handler
sercomm_register_rx_cb
keypad_poll
framebuffer
manifest_board
manifest_environment
_start
