   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"main.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.fb_boxto,"ax",%progbits
  17              		.align	2
  19              	fb_boxto:
  20              	.LFB67:
  21              		.file 1 "include/fb/framebuffer.h"
   1:include/fb/framebuffer.h **** #ifndef _FB_FRAMEBUFFER_H
   2:include/fb/framebuffer.h **** #define _FB_FRAMEBUFFER_H
   3:include/fb/framebuffer.h **** 
   4:include/fb/framebuffer.h **** #include <fb/font.h>
   5:include/fb/framebuffer.h **** #include <stdint.h>
   6:include/fb/framebuffer.h **** 
   7:include/fb/framebuffer.h **** /* color is encoded as <special><red><green><blue> */
   8:include/fb/framebuffer.h **** /* if a color is "special", then the RGB components most likely
   9:include/fb/framebuffer.h ****    don't make sense. Use "special" colours when you have to
  10:include/fb/framebuffer.h ****    mask out bits with transparency or you have to encode
  11:include/fb/framebuffer.h ****    colours in a fixed color palette... */
  12:include/fb/framebuffer.h **** 
  13:include/fb/framebuffer.h **** #define FB_COLOR_WHITE		0x00ffffffU
  14:include/fb/framebuffer.h **** #define FB_COLOR_BLACK		0x00000000U
  15:include/fb/framebuffer.h **** #define FB_COLOR_TRANSP		0x01ffffffU
  16:include/fb/framebuffer.h **** 
  17:include/fb/framebuffer.h **** #define FB_COLOR_RGB(r,g,b) ((((r) & 0xff)<<16)|(((g)&0xff)<<8)|((b)&0xff))
  18:include/fb/framebuffer.h **** #define FB_COLOR_RED		FB_COLOR_RGB(0xff,0x00,0x00)
  19:include/fb/framebuffer.h **** #define FB_COLOR_GREEN		FB_COLOR_RGB(0x00,0xff,0x00)
  20:include/fb/framebuffer.h **** #define FB_COLOR_BLUE		FB_COLOR_RGB(0x00,0x00,0xff)
  21:include/fb/framebuffer.h **** 
  22:include/fb/framebuffer.h **** /* encode */
  23:include/fb/framebuffer.h **** 
  24:include/fb/framebuffer.h **** /* decode */
  25:include/fb/framebuffer.h **** #define FB_COLOR_IS_SPECIAL(v)     (!!((v) & 0xff000000U))
  26:include/fb/framebuffer.h **** #define FB_COLOR_TO_R(v)		(((v)>>16) & 0xff)
  27:include/fb/framebuffer.h **** #define FB_COLOR_TO_G(v)		(((v)>> 8) & 0xff)
  28:include/fb/framebuffer.h **** #define FB_COLOR_TO_B(v)		( (v)      & 0xff)
  29:include/fb/framebuffer.h **** 
  30:include/fb/framebuffer.h **** struct framebuffer {
  31:include/fb/framebuffer.h **** 	char name[8];				// keep it short!
  32:include/fb/framebuffer.h **** 	void (*init)();				// (re)initialize
  33:include/fb/framebuffer.h **** 	void (*clear)();			// clear display
  34:include/fb/framebuffer.h **** 	void (*boxto)(uint16_t x,uint16_t y);	// draw box to xy
  35:include/fb/framebuffer.h **** 	void (*lineto)(uint16_t x,uint16_t y);	// draw line to xy
  36:include/fb/framebuffer.h **** 	int (*putstr)(char *c,int maxwidth);	// put text in current font to fb
  37:include/fb/framebuffer.h **** 	void (*flush)();			// flush changes
  38:include/fb/framebuffer.h **** 
  39:include/fb/framebuffer.h **** 	uint16_t width,height;			// width/height of fb
  40:include/fb/framebuffer.h **** 	uint16_t cursor_x,cursor_y;		// current cursor
  41:include/fb/framebuffer.h **** 	uint32_t fg_color,bg_color;		// current fg/bg color
  42:include/fb/framebuffer.h **** 	enum fb_font_id font;			// current font
  43:include/fb/framebuffer.h **** };
  44:include/fb/framebuffer.h **** 
  45:include/fb/framebuffer.h **** /* there is a single framebuffer, the specific driver defines
  46:include/fb/framebuffer.h ****    the "framebuffer" symbol */
  47:include/fb/framebuffer.h **** extern struct framebuffer *framebuffer;
  48:include/fb/framebuffer.h **** 
  49:include/fb/framebuffer.h **** static inline void
  50:include/fb/framebuffer.h **** fb_init(){
  51:include/fb/framebuffer.h **** 	framebuffer->init();
  52:include/fb/framebuffer.h **** }
  53:include/fb/framebuffer.h **** 
  54:include/fb/framebuffer.h **** static inline void
  55:include/fb/framebuffer.h **** fb_clear(){
  56:include/fb/framebuffer.h **** 	framebuffer->clear();
  57:include/fb/framebuffer.h **** }
  58:include/fb/framebuffer.h **** 
  59:include/fb/framebuffer.h **** static inline void
  60:include/fb/framebuffer.h **** fb_boxto(uint16_t x,uint16_t y){
  22              		.loc 1 60 0
  23              		.cfi_startproc
  24              		@ Function supports interworking.
  25              		@ args = 0, pretend = 0, frame = 0
  26              		@ frame_needed = 0, uses_anonymous_args = 0
  27              	.LVL0:
  28 0000 08402DE9 		stmfd	sp!, {r3, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 3, -8
  32              		.cfi_offset 14, -4
  61:include/fb/framebuffer.h **** 	framebuffer->boxto(x,y);
  33              		.loc 1 61 0
  34 0004 14309FE5 		ldr	r3, .L2
  35 0008 003093E5 		ldr	r3, [r3]
  36 000c 10C093E5 		ldr	ip, [r3, #16]
  37 0010 0FE0A0E1 		mov	lr, pc
  38 0014 1CFF2FE1 		bx	ip
  39              	.LVL1:
  62:include/fb/framebuffer.h **** }
  40              		.loc 1 62 0
  41 0018 0840BDE8 		ldmfd	sp!, {r3, lr}
  42 001c 1EFF2FE1 		bx	lr
  43              	.L3:
  44              		.align	2
  45              	.L2:
  46 0020 00000000 		.word	framebuffer
  47              		.cfi_endproc
  48              	.LFE67:
  50              		.section	.text.fb_putstr,"ax",%progbits
  51              		.align	2
  53              	fb_putstr:
  54              	.LFB69:
  63:include/fb/framebuffer.h **** 
  64:include/fb/framebuffer.h **** static inline void
  65:include/fb/framebuffer.h **** fb_lineto(uint16_t x,uint16_t y){
  66:include/fb/framebuffer.h **** 	framebuffer->lineto(x,y);
  67:include/fb/framebuffer.h **** }
  68:include/fb/framebuffer.h **** 
  69:include/fb/framebuffer.h **** static inline int
  70:include/fb/framebuffer.h **** fb_putstr(char *str,int maxwidth){
  55              		.loc 1 70 0
  56              		.cfi_startproc
  57              		@ Function supports interworking.
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60              	.LVL2:
  61 0000 08402DE9 		stmfd	sp!, {r3, lr}
  62              	.LCFI1:
  63              		.cfi_def_cfa_offset 8
  64              		.cfi_offset 3, -8
  65              		.cfi_offset 14, -4
  71:include/fb/framebuffer.h **** 	return framebuffer->putstr(str,maxwidth);
  66              		.loc 1 71 0
  67 0004 14309FE5 		ldr	r3, .L5
  68 0008 003093E5 		ldr	r3, [r3]
  69 000c 18C093E5 		ldr	ip, [r3, #24]
  70 0010 0FE0A0E1 		mov	lr, pc
  71 0014 1CFF2FE1 		bx	ip
  72              	.LVL3:
  72:include/fb/framebuffer.h **** }
  73              		.loc 1 72 0
  74 0018 0840BDE8 		ldmfd	sp!, {r3, lr}
  75 001c 1EFF2FE1 		bx	lr
  76              	.L6:
  77              		.align	2
  78              	.L5:
  79 0020 00000000 		.word	framebuffer
  80              		.cfi_endproc
  81              	.LFE69:
  83              		.section	.text.print_display,"ax",%progbits
  84              		.align	2
  86              	print_display:
  87              	.LFB109:
  88              		.file 2 "apps/rssi/main.c"
   1:apps/rssi/main.c **** /* Cell Monitor of Free Software for Calypso Phone */
   2:apps/rssi/main.c **** 
   3:apps/rssi/main.c **** /* (C) 2012 by Andreas Eversberg <jolly@eversberg.eu>
   4:apps/rssi/main.c ****  *
   5:apps/rssi/main.c ****  * All Rights Reserved
   6:apps/rssi/main.c ****  *
   7:apps/rssi/main.c ****  * This program is free software; you can redistribute it and/or modify
   8:apps/rssi/main.c ****  * it under the terms of the GNU General Public License as published by
   9:apps/rssi/main.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:apps/rssi/main.c ****  * (at your option) any later version.
  11:apps/rssi/main.c ****  *
  12:apps/rssi/main.c ****  * This program is distributed in the hope that it will be useful,
  13:apps/rssi/main.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:apps/rssi/main.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:apps/rssi/main.c ****  * GNU General Public License for more details.
  16:apps/rssi/main.c ****  *
  17:apps/rssi/main.c ****  * You should have received a copy of the GNU General Public License along
  18:apps/rssi/main.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:apps/rssi/main.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:apps/rssi/main.c ****  *
  21:apps/rssi/main.c ****  */
  22:apps/rssi/main.c **** 
  23:apps/rssi/main.c **** #include <stdint.h>
  24:apps/rssi/main.c **** #include <stdio.h>
  25:apps/rssi/main.c **** #include <string.h>
  26:apps/rssi/main.c **** #include <errno.h>
  27:apps/rssi/main.c **** 
  28:apps/rssi/main.c **** #include <debug.h>
  29:apps/rssi/main.c **** #include <memory.h>
  30:apps/rssi/main.c **** #include <delay.h>
  31:apps/rssi/main.c **** #include <byteorder.h>
  32:apps/rssi/main.c **** #include <rffe.h>
  33:apps/rssi/main.c **** #include <keypad.h>
  34:apps/rssi/main.c **** #include <board.h>
  35:apps/rssi/main.c **** #include <abb/twl3025.h>
  36:apps/rssi/main.c **** #include <rf/trf6151.h>
  37:apps/rssi/main.c **** #include <calypso/clock.h>
  38:apps/rssi/main.c **** #include <calypso/tpu.h>
  39:apps/rssi/main.c **** #include <calypso/tsp.h>
  40:apps/rssi/main.c **** #include <calypso/dsp.h>
  41:apps/rssi/main.c **** #include <calypso/irq.h>
  42:apps/rssi/main.c **** #include <calypso/misc.h>
  43:apps/rssi/main.c **** #include <calypso/buzzer.h>
  44:apps/rssi/main.c **** #include <comm/sercomm.h>
  45:apps/rssi/main.c **** #include <comm/timer.h>
  46:apps/rssi/main.c **** #include <fb/framebuffer.h>
  47:apps/rssi/main.c **** #include <layer1/sync.h>
  48:apps/rssi/main.c **** #include <layer1/async.h>
  49:apps/rssi/main.c **** #include <layer1/l23_api.h>
  50:apps/rssi/main.c **** #include <osmocom/gsm/rsl.h>
  51:apps/rssi/main.c **** #include <osmocom/gsm/protocol/gsm_04_08.h>
  52:apps/rssi/main.c **** #include <osmocom/gsm/gsm48_ie.h>
  53:apps/rssi/main.c **** #include <battery/battery.h>
  54:apps/rssi/main.c **** 
  55:apps/rssi/main.c **** enum key_codes key_code = KEY_INV;
  56:apps/rssi/main.c **** int key_pressed = 0;
  57:apps/rssi/main.c **** enum key_codes key_pressed_code;
  58:apps/rssi/main.c **** unsigned long key_pressed_when;
  59:apps/rssi/main.c **** unsigned int key_pressed_delay;
  60:apps/rssi/main.c **** 
  61:apps/rssi/main.c **** enum mode {
  62:apps/rssi/main.c **** 	MODE_MAIN,
  63:apps/rssi/main.c **** 	MODE_SPECTRUM,
  64:apps/rssi/main.c **** 	MODE_ARFCN,
  65:apps/rssi/main.c **** 	MODE_SYNC,
  66:apps/rssi/main.c **** 	MODE_RACH,
  67:apps/rssi/main.c **** } mode = MODE_MAIN;
  68:apps/rssi/main.c **** enum mode last_mode; /* where to return after entering ARFCN */
  69:apps/rssi/main.c **** 
  70:apps/rssi/main.c **** static uint16_t arfcn = 0, ul_arfcn;
  71:apps/rssi/main.c **** int pcs = 0;
  72:apps/rssi/main.c **** int uplink = 0;
  73:apps/rssi/main.c **** int max = 0;
  74:apps/rssi/main.c **** uint8_t power, max_power;
  75:apps/rssi/main.c **** char input[5];
  76:apps/rssi/main.c **** int cursor;
  77:apps/rssi/main.c **** 
  78:apps/rssi/main.c **** char *sync_result = NULL;
  79:apps/rssi/main.c **** char *sync_msg = "";
  80:apps/rssi/main.c **** 
  81:apps/rssi/main.c **** static struct band {
  82:apps/rssi/main.c **** 	int min, max, prev, next, freq_ul, freq_dl;
  83:apps/rssi/main.c **** } bands[] = {
  84:apps/rssi/main.c ****         { 128, 251, 124, 512, 8242, 8692 }, /* GSM 850 */
  85:apps/rssi/main.c ****         { 955, 124, 885, 128, 8762, 9212 }, /* P,E,R GSM */
  86:apps/rssi/main.c ****         { 512, 885, 251, 955, 17102, 18052 }, /* DCS 1800 */
  87:apps/rssi/main.c **** 	{ 0, 0, 0, 0, 0, 0},
  88:apps/rssi/main.c **** };
  89:apps/rssi/main.c **** 
  90:apps/rssi/main.c **** struct band *band;
  91:apps/rssi/main.c **** 
  92:apps/rssi/main.c **** #define PCS_MIN 512
  93:apps/rssi/main.c **** #define PCS_MAX 810
  94:apps/rssi/main.c **** #define DCS_MIN 512
  95:apps/rssi/main.c **** #define DCS_MAX 885
  96:apps/rssi/main.c **** #define PCS_UL 18502
  97:apps/rssi/main.c **** #define PCS_DL 19302
  98:apps/rssi/main.c **** 
  99:apps/rssi/main.c **** enum pm_mode {
 100:apps/rssi/main.c **** 	PM_IDLE,
 101:apps/rssi/main.c **** 	PM_SENT,
 102:apps/rssi/main.c **** 	PM_RANGE_SENT,
 103:apps/rssi/main.c **** 	PM_RANGE_RESULT,
 104:apps/rssi/main.c **** 	PM_RESULT,
 105:apps/rssi/main.c **** } pm_mode = PM_IDLE;
 106:apps/rssi/main.c **** 
 107:apps/rssi/main.c **** #define NUM_PM_DL 2
 108:apps/rssi/main.c **** #define NUM_PM_UL 10
 109:apps/rssi/main.c **** int pm_meas[NUM_PM_UL];
 110:apps/rssi/main.c **** int pm_count = 0;
 111:apps/rssi/main.c **** int pm_max = 2;
 112:apps/rssi/main.c **** uint8_t pm_spectrum[1024];
 113:apps/rssi/main.c **** int pm_scale = 1; /* scale measured power level */
 114:apps/rssi/main.c **** 
 115:apps/rssi/main.c **** #define TONE_JIFFIES ((HZ < 25) ? 1 : HZ / 25)
 116:apps/rssi/main.c **** int tone = 0;
 117:apps/rssi/main.c **** unsigned long tone_time;
 118:apps/rssi/main.c **** int tone_on = 0;
 119:apps/rssi/main.c **** 
 120:apps/rssi/main.c **** uint8_t bsic;
 121:apps/rssi/main.c **** uint8_t ul_levels[8], ul_max[8]; /* 8 uplink levels */
 122:apps/rssi/main.c **** uint8_t si_1[23];
 123:apps/rssi/main.c **** uint8_t si_2[23];
 124:apps/rssi/main.c **** uint8_t si_2bis[23];
 125:apps/rssi/main.c **** uint8_t si_2ter[23];
 126:apps/rssi/main.c **** uint8_t si_3[23];
 127:apps/rssi/main.c **** uint8_t si_4[23];
 128:apps/rssi/main.c **** uint16_t si_new = 0, ul_new;
 129:apps/rssi/main.c **** uint16_t mcc, mnc, lac, cell_id;
 130:apps/rssi/main.c **** int ccch_conf;
 131:apps/rssi/main.c **** int nb_num;
 132:apps/rssi/main.c **** struct gsm_sysinfo_freq freq[1024];
 133:apps/rssi/main.c **** #define NEIGH_LINES	((framebuffer->height - 25) / 8)
 134:apps/rssi/main.c **** 
 135:apps/rssi/main.c **** #define FREQ_TYPE_SERV		0x01 /* frequency of the serving cell */
 136:apps/rssi/main.c **** #define FREQ_TYPE_NCELL		0x1c /* frequency of the neighbor cell */
 137:apps/rssi/main.c **** #define FREQ_TYPE_NCELL_2	0x04 /* sub channel of SI 2 */
 138:apps/rssi/main.c **** #define FREQ_TYPE_NCELL_2bis	0x08 /* sub channel of SI 2bis */
 139:apps/rssi/main.c **** #define FREQ_TYPE_NCELL_2ter	0x10 /* sub channel of SI 2ter */
 140:apps/rssi/main.c **** 
 141:apps/rssi/main.c **** int rach = 0;
 142:apps/rssi/main.c **** struct gsm48_req_ref rach_ref;
 143:apps/rssi/main.c **** uint8_t rach_ra;
 144:apps/rssi/main.c **** unsigned long rach_when;
 145:apps/rssi/main.c **** uint8_t ta;
 146:apps/rssi/main.c **** 
 147:apps/rssi/main.c **** enum assign {
 148:apps/rssi/main.c **** 	ASSIGN_NONE,
 149:apps/rssi/main.c **** 	ASSIGN_NO_TX,
 150:apps/rssi/main.c **** 	ASSIGN_RESULT,
 151:apps/rssi/main.c **** 	ASSIGN_REJECT,
 152:apps/rssi/main.c **** 	ASSIGN_TIMEOUT,
 153:apps/rssi/main.c **** } assign;
 154:apps/rssi/main.c **** 
 155:apps/rssi/main.c **** /* UI */
 156:apps/rssi/main.c **** 
 157:apps/rssi/main.c **** static void print_display(char *text, int *y, int c)
 158:apps/rssi/main.c **** {
  89              		.loc 2 158 0
  90              		.cfi_startproc
  91              		@ Function supports interworking.
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              		@ link register save eliminated.
  95              	.LVL4:
 159:apps/rssi/main.c **** 	/* skip lines, given by cursor */
 160:apps/rssi/main.c **** 	(*y)++;
  96              		.loc 2 160 0
  97 0000 00C091E5 		ldr	ip, [r1]
  98 0004 01C08CE2 		add	ip, ip, #1
 161:apps/rssi/main.c **** 	if (c >= (*y))
  99              		.loc 2 161 0
 100 0008 0C0052E1 		cmp	r2, ip
 158:apps/rssi/main.c **** {
 101              		.loc 2 158 0
 102 000c 30002DE9 		stmfd	sp!, {r4, r5}
 103              	.LCFI2:
 104              		.cfi_def_cfa_offset 8
 105              		.cfi_offset 4, -8
 106              		.cfi_offset 5, -4
 160:apps/rssi/main.c **** 	(*y)++;
 107              		.loc 2 160 0
 108 0010 00C081E5 		str	ip, [r1]
 109              		.loc 2 161 0
 110 0014 130000AA 		bge	.L7
 162:apps/rssi/main.c **** 		return;
 163:apps/rssi/main.c **** 	/* skip, if end of display area is reached */
 164:apps/rssi/main.c **** 	if ((*y) - c > NEIGH_LINES)
 111              		.loc 2 164 0
 112 0018 50309FE5 		ldr	r3, .L10
 113 001c 003093E5 		ldr	r3, [r3]
 114 0020 B212D3E1 		ldrh	r1, [r3, #34]
 115              	.LVL5:
 116 0024 191041E2 		sub	r1, r1, #25
 117 0028 000051E3 		cmp	r1, #0
 118 002c 075081E2 		add	r5, r1, #7
 119 0030 0C4062E0 		rsb	r4, r2, ip
 120 0034 0510A0B1 		movlt	r1, r5
 121 0038 C10154E1 		cmp	r4, r1, asr #3
 122 003c 090000CA 		bgt	.L7
 123              	.LVL6:
 165:apps/rssi/main.c **** 		return;
 166:apps/rssi/main.c **** 
 167:apps/rssi/main.c **** 	fb_gotoxy(0, 20 + (((*y) - c - 1) << 3));
 124              		.loc 2 167 0
 125 0040 0220E0E1 		mvn	r2, r2
 126              	.LVL7:
 127 0044 0CC082E0 		add	ip, r2, ip
 128              	.LVL8:
 129 0048 8CC1A0E1 		mov	ip, ip, asl #3
 130              	.LBB186:
 131              	.LBB187:
  73:include/fb/framebuffer.h **** 
  74:include/fb/framebuffer.h **** static inline void
  75:include/fb/framebuffer.h **** fb_flush(){
  76:include/fb/framebuffer.h **** 	framebuffer->flush();
  77:include/fb/framebuffer.h **** }
  78:include/fb/framebuffer.h **** 
  79:include/fb/framebuffer.h **** static inline void
  80:include/fb/framebuffer.h **** fb_gotoxy(uint16_t x,uint16_t y){
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 132              		.loc 1 81 0
 133 004c 0010A0E3 		mov	r1, #0
 134              	.LBE187:
 135              	.LBE186:
 136              		.loc 2 167 0
 137 0050 14C08CE2 		add	ip, ip, #20
 138              	.LBB189:
 139              	.LBB188:
 140              		.loc 1 81 0
 141 0054 B412C3E1 		strh	r1, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 142              		.loc 1 82 0
 143 0058 B6C2C3E1 		strh	ip, [r3, #38]	@ movhi
 144              	.LBE188:
 145              	.LBE189:
 168:apps/rssi/main.c **** 	fb_putstr(text, framebuffer->width);
 146              		.loc 2 168 0
 147 005c B012D3E1 		ldrh	r1, [r3, #32]
 169:apps/rssi/main.c **** }
 148              		.loc 2 169 0
 149 0060 3000BDE8 		ldmfd	sp!, {r4, r5}
 168:apps/rssi/main.c **** 	fb_putstr(text, framebuffer->width);
 150              		.loc 2 168 0
 151 0064 FEFFFFEA 		b	fb_putstr
 152              	.LVL9:
 153              	.L7:
 154              		.loc 2 169 0
 155 0068 3000BDE8 		ldmfd	sp!, {r4, r5}
 156 006c 1EFF2FE1 		bx	lr
 157              	.L11:
 158              		.align	2
 159              	.L10:
 160 0070 00000000 		.word	framebuffer
 161              		.cfi_endproc
 162              	.LFE109:
 164              		.section	.text.gsm48_match_ra,"ax",%progbits
 165              		.align	2
 167              	gsm48_match_ra:
 168              	.LFB133:
 170:apps/rssi/main.c **** 
 171:apps/rssi/main.c **** static void refresh_display(void)
 172:apps/rssi/main.c **** {
 173:apps/rssi/main.c **** 	char text[16];
 174:apps/rssi/main.c **** 	int bat = battery_info.battery_percent;
 175:apps/rssi/main.c **** 
 176:apps/rssi/main.c **** 	fb_clear();
 177:apps/rssi/main.c **** 
 178:apps/rssi/main.c **** 	/* header */
 179:apps/rssi/main.c **** 	fb_setbg(FB_COLOR_WHITE);
 180:apps/rssi/main.c **** 	if (mode != MODE_SPECTRUM && !(mode == MODE_SYNC && cursor < 0)) {
 181:apps/rssi/main.c **** 		fb_setfg(FB_COLOR_BLUE);
 182:apps/rssi/main.c **** 		fb_setfont(FB_FONT_HELVR08);
 183:apps/rssi/main.c **** 		fb_gotoxy(0, 7);
 184:apps/rssi/main.c **** 		fb_putstr("vadimbetman RSSI", -1);
 185:apps/rssi/main.c **** 		fb_setfg(FB_COLOR_RGB(0xc0, 0xc0, 0x00));
 186:apps/rssi/main.c **** 		fb_setfont(FB_FONT_SYMBOLS);
 187:apps/rssi/main.c **** 		fb_gotoxy(framebuffer->width - 15, 8);
 188:apps/rssi/main.c **** 		if (bat >= 100 && (battery_info.flags & BATTERY_CHG_ENABLED)
 189:apps/rssi/main.c **** 		 && !(battery_info.flags & BATTERY_CHARGING))
 190:apps/rssi/main.c **** 			fb_putstr("@HHBC", framebuffer->width);
 191:apps/rssi/main.c **** 		else {
 192:apps/rssi/main.c **** 			sprintf(text, "@%c%c%cC", (bat >= 30) ? 'B':'A',
 193:apps/rssi/main.c **** 				(bat >= 60) ? 'B':'A', (bat >= 90) ? 'B':'A');
 194:apps/rssi/main.c **** 			fb_putstr(text, framebuffer->width);
 195:apps/rssi/main.c **** 		}
 196:apps/rssi/main.c **** 		fb_gotoxy(0, 8);
 197:apps/rssi/main.c **** 		sprintf(text, "%c%cE%c%c", (power >= 40) ? 'D':'G',
 198:apps/rssi/main.c **** 			(power >= 10) ? 'D':'G', (power >= 10) ? 'F':'G',
 199:apps/rssi/main.c **** 			(power >= 40) ? 'F':'G');
 200:apps/rssi/main.c **** 		fb_putstr(text, framebuffer->width);
 201:apps/rssi/main.c **** 		fb_setfg(FB_COLOR_GREEN);
 202:apps/rssi/main.c **** 		fb_gotoxy(0, 10);
 203:apps/rssi/main.c **** 		fb_boxto(framebuffer->width - 1, 10);
 204:apps/rssi/main.c **** 	}
 205:apps/rssi/main.c **** 	fb_setfg(FB_COLOR_BLACK);
 206:apps/rssi/main.c **** 	fb_setfont(FB_FONT_C64);
 207:apps/rssi/main.c **** 
 208:apps/rssi/main.c **** 	/* RACH */
 209:apps/rssi/main.c **** 	if (mode == MODE_RACH) {
 210:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - rach_when;
 211:apps/rssi/main.c **** 
 212:apps/rssi/main.c **** 		fb_gotoxy(0,28);
 213:apps/rssi/main.c **** 		switch (assign) {
 214:apps/rssi/main.c **** 		case ASSIGN_NONE:
 215:apps/rssi/main.c **** 			fb_putstr("Rach sent...", -1);
 216:apps/rssi/main.c **** 			break;
 217:apps/rssi/main.c **** 		case ASSIGN_RESULT:
 218:apps/rssi/main.c **** 			sprintf(text, "TA = %d", ta);
 219:apps/rssi/main.c **** 			fb_putstr(text, -1);
 220:apps/rssi/main.c **** 			fb_gotoxy(0,36);
 221:apps/rssi/main.c **** 			sprintf(text, "(%dm)", ta * 554);
 222:apps/rssi/main.c **** 			fb_putstr(text, -1);
 223:apps/rssi/main.c **** 			break;
 224:apps/rssi/main.c **** 		case ASSIGN_REJECT:
 225:apps/rssi/main.c **** 			fb_putstr("Rejected!", -1);
 226:apps/rssi/main.c **** 			break;
 227:apps/rssi/main.c **** 		case ASSIGN_NO_TX:
 228:apps/rssi/main.c **** 			fb_putstr("TX disabled", -1);
 229:apps/rssi/main.c **** 			break;
 230:apps/rssi/main.c **** 		case ASSIGN_TIMEOUT:
 231:apps/rssi/main.c **** 			fb_putstr("Timeout", -1);
 232:apps/rssi/main.c **** 			break;
 233:apps/rssi/main.c **** 		}
 234:apps/rssi/main.c **** 		switch (assign) {
 235:apps/rssi/main.c **** 		case ASSIGN_RESULT:
 236:apps/rssi/main.c **** 		case ASSIGN_REJECT:
 237:apps/rssi/main.c **** 			fb_gotoxy(0,44);
 238:apps/rssi/main.c **** 			sprintf(text, "Delay:%ldms", elapsed * 1000 / HZ);
 239:apps/rssi/main.c **** 			fb_putstr(text, -1);
 240:apps/rssi/main.c **** 			break;
 241:apps/rssi/main.c **** 		default:
 242:apps/rssi/main.c **** 			break;
 243:apps/rssi/main.c **** 		}
 244:apps/rssi/main.c **** 	}
 245:apps/rssi/main.c **** 
 246:apps/rssi/main.c **** 	/* SYNC / UL levels */
 247:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor < 0) {
 248:apps/rssi/main.c **** 		int i, tn, l;
 249:apps/rssi/main.c **** 		int offset = (framebuffer->width - 96) >> 1;
 250:apps/rssi/main.c **** 		int height = framebuffer->height - 25;
 251:apps/rssi/main.c **** 
 252:apps/rssi/main.c **** 		fb_setfont(FB_FONT_HELVR08);
 253:apps/rssi/main.c **** 		for (i = 0; i < 8; i++) {
 254:apps/rssi/main.c **** 			if (uplink)
 255:apps/rssi/main.c **** 				tn = (i + 3) & 7; /* UL is shifted by 3 */
 256:apps/rssi/main.c **** 			else
 257:apps/rssi/main.c **** 				tn = i;
 258:apps/rssi/main.c **** 			fb_setbg(FB_COLOR_WHITE);
 259:apps/rssi/main.c **** 			fb_gotoxy(offset + 12 * i, 7);
 260:apps/rssi/main.c **** 			l = (max) ? ul_max[tn] : ul_levels[tn];
 261:apps/rssi/main.c **** 			l = 110 - l;
 262:apps/rssi/main.c **** 			if (l >= 100)
 263:apps/rssi/main.c **** 				l -= 100;
 264:apps/rssi/main.c **** 			sprintf(text, "%02d", l);
 265:apps/rssi/main.c **** 			fb_putstr(text, framebuffer->width);
 266:apps/rssi/main.c **** 			fb_setbg(FB_COLOR_BLACK);
 267:apps/rssi/main.c **** 			fb_gotoxy(offset + 3 + 12 * i, height + 10);
 268:apps/rssi/main.c **** 			fb_boxto(offset + 3 + 12 * i + 5, height + 10 - ul_levels[tn] * height / 64);
 269:apps/rssi/main.c **** 			if (max) {
 270:apps/rssi/main.c **** 				fb_gotoxy(offset + 3 + 12 * i, height + 10 - ul_max[tn] * height / 64);
 271:apps/rssi/main.c **** 				fb_boxto(offset + 3 + 12 * i + 5, height + 10 - ul_max[tn] * height / 64);
 272:apps/rssi/main.c **** 			}
 273:apps/rssi/main.c **** 		}
 274:apps/rssi/main.c **** 		fb_setbg(FB_COLOR_TRANSP);
 275:apps/rssi/main.c **** 		if (max) {
 276:apps/rssi/main.c **** 			fb_setfg(FB_COLOR_RED);
 277:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16, 15);
 278:apps/rssi/main.c **** 			fb_putstr("max", framebuffer->width);
 279:apps/rssi/main.c **** 		}
 280:apps/rssi/main.c **** 		fb_setfont(FB_FONT_C64);
 281:apps/rssi/main.c **** 		fb_setfg(FB_COLOR_BLUE);
 282:apps/rssi/main.c **** 		fb_gotoxy(0, 16);
 283:apps/rssi/main.c **** 		if (pcs && ul_arfcn >= PCS_MIN && ul_arfcn <= PCS_MAX)
 284:apps/rssi/main.c **** 			sprintf(text, "%4dP", ul_arfcn);
 285:apps/rssi/main.c **** 		else if (ul_arfcn >= DCS_MIN && ul_arfcn <= DCS_MAX)
 286:apps/rssi/main.c **** 			sprintf(text, "%4dD", ul_arfcn);
 287:apps/rssi/main.c **** 		else
 288:apps/rssi/main.c **** 			sprintf(text, "%4d ", ul_arfcn);
 289:apps/rssi/main.c **** 		fb_putstr(text, framebuffer->width);
 290:apps/rssi/main.c **** 		fb_setbg(FB_COLOR_WHITE);
 291:apps/rssi/main.c **** 		fb_setfg(FB_COLOR_BLACK);
 292:apps/rssi/main.c **** 	}
 293:apps/rssi/main.c **** 
 294:apps/rssi/main.c **** 	/* SYNC / SI */
 295:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor == 0) {
 296:apps/rssi/main.c **** 		fb_gotoxy(0, 20);
 297:apps/rssi/main.c **** 		if (sync_msg[0] == 'o')
 298:apps/rssi/main.c **** 			sprintf(text, "BSIC%d/%d %4d", bsic >> 3, bsic & 7,
 299:apps/rssi/main.c **** 				power - 110);
 300:apps/rssi/main.c **** 		else
 301:apps/rssi/main.c **** 			sprintf(text, "Sync %s", sync_msg);
 302:apps/rssi/main.c **** 		fb_putstr(text, -1);
 303:apps/rssi/main.c **** 
 304:apps/rssi/main.c **** 		fb_gotoxy(0,28);
 305:apps/rssi/main.c **** 		text[0] = si_1[2] ? '1' : '-';
 306:apps/rssi/main.c **** 		text[1] = ' ';
 307:apps/rssi/main.c **** 		text[2] = si_2[2] ? '2' : '-';
 308:apps/rssi/main.c **** 		text[3] = ' ';
 309:apps/rssi/main.c **** 		text[4] = si_2bis[2] ? '2' : '-';
 310:apps/rssi/main.c **** 		text[5] = si_2bis[2] ? 'b' : ' ';
 311:apps/rssi/main.c **** 		text[6] = si_2ter[2] ? '2' : '-';
 312:apps/rssi/main.c **** 		text[7] = si_2ter[2] ? 't' : ' ';
 313:apps/rssi/main.c **** 		text[8] = ' ';
 314:apps/rssi/main.c **** 		text[9] = si_3[2] ? '3' : '-';
 315:apps/rssi/main.c **** 		text[10] = ' ';
 316:apps/rssi/main.c **** 		text[11] = si_4[2] ? '4' : '-';
 317:apps/rssi/main.c **** 		text[12] = '\0';
 318:apps/rssi/main.c **** 		fb_putstr(text, -1);
 319:apps/rssi/main.c **** 
 320:apps/rssi/main.c **** 		fb_gotoxy(0, 36);
 321:apps/rssi/main.c **** 		fb_putstr("MCC MNC LAC ", -1);
 322:apps/rssi/main.c **** 		fb_gotoxy(0, 44);
 323:apps/rssi/main.c **** 		if (mcc) {
 324:apps/rssi/main.c **** 			if ((mnc & 0x00f) == 0x00f)
 325:apps/rssi/main.c **** 				sprintf(text, "%3x %02x  %04x", mcc, mnc >> 4, lac);
 326:apps/rssi/main.c **** 			else
 327:apps/rssi/main.c **** 				sprintf(text, "%3x %03x %04x", mcc, mnc, lac);
 328:apps/rssi/main.c **** 			fb_putstr(text, -1);
 329:apps/rssi/main.c **** 		} else
 330:apps/rssi/main.c **** 			fb_putstr("--- --- ----", -1);
 331:apps/rssi/main.c **** 		fb_gotoxy(0, 52);
 332:apps/rssi/main.c **** 		if (si_3[2]) {
 333:apps/rssi/main.c **** 			sprintf(text, "cell id:%04x", cell_id);
 334:apps/rssi/main.c **** 			fb_putstr(text, -1);
 335:apps/rssi/main.c **** 		} else
 336:apps/rssi/main.c **** 			fb_putstr("cell id:----", -1);
 337:apps/rssi/main.c **** 	}
 338:apps/rssi/main.c **** 
 339:apps/rssi/main.c **** 	/* SYNC / neighbour cells */
 340:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor > 0) {
 341:apps/rssi/main.c **** 		int i, y = 0;
 342:apps/rssi/main.c **** 
 343:apps/rssi/main.c **** 		text[0] = '\0';
 344:apps/rssi/main.c **** 		for (i = 0; i < 1024; i++) {
 345:apps/rssi/main.c **** 			if (freq[i].mask & FREQ_TYPE_SERV) {
 346:apps/rssi/main.c **** 				if (!text[0])
 347:apps/rssi/main.c **** 					sprintf(text, "S: %4d", i);
 348:apps/rssi/main.c **** 				else {
 349:apps/rssi/main.c **** 					sprintf(text + 7, " %4d", i);
 350:apps/rssi/main.c **** 					print_display(text, &y, cursor - 1);
 351:apps/rssi/main.c **** 					text[0] = '\0';
 352:apps/rssi/main.c **** 				}
 353:apps/rssi/main.c **** 			}
 354:apps/rssi/main.c **** 		}
 355:apps/rssi/main.c **** 		if (text[0])
 356:apps/rssi/main.c **** 			print_display(text, &y, cursor - 1);
 357:apps/rssi/main.c **** 		text[0] = '\0';
 358:apps/rssi/main.c **** 		for (i = 0; i < 1024; i++) {
 359:apps/rssi/main.c **** 			if (freq[i].mask & FREQ_TYPE_NCELL) {
 360:apps/rssi/main.c **** 				if (!text[0])
 361:apps/rssi/main.c **** 					sprintf(text, "N: %4d", i);
 362:apps/rssi/main.c **** 				else {
 363:apps/rssi/main.c **** 					sprintf(text + 7, " %4d", i);
 364:apps/rssi/main.c **** 					print_display(text, &y, cursor - 1);
 365:apps/rssi/main.c **** 					text[0] = '\0';
 366:apps/rssi/main.c **** 				}
 367:apps/rssi/main.c **** 			}
 368:apps/rssi/main.c **** 		}
 369:apps/rssi/main.c **** 		if (text[0])
 370:apps/rssi/main.c **** 			print_display(text, &y, cursor - 1);
 371:apps/rssi/main.c **** 		nb_num = y;
 372:apps/rssi/main.c **** 	}
 373:apps/rssi/main.c **** 
 374:apps/rssi/main.c **** 	/* ARFCN */
 375:apps/rssi/main.c **** 	if (mode == MODE_MAIN || mode == MODE_ARFCN) {
 376:apps/rssi/main.c **** 		fb_gotoxy(0, 20);
 377:apps/rssi/main.c **** 		if (mode == MODE_ARFCN)
 378:apps/rssi/main.c **** 			sprintf(text, "ARFCN %s", input);
 379:apps/rssi/main.c **** 		else if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 380:apps/rssi/main.c **** 			sprintf(text, "ARFCN %dPCS", arfcn);
 381:apps/rssi/main.c **** 		else if (arfcn >= DCS_MIN && arfcn <= DCS_MAX)
 382:apps/rssi/main.c **** 			sprintf(text, "ARFCN %dDCS", arfcn);
 383:apps/rssi/main.c **** 		else
 384:apps/rssi/main.c **** 			sprintf(text, "ARFCN %d", arfcn);
 385:apps/rssi/main.c **** 		fb_putstr(text,framebuffer->width);
 386:apps/rssi/main.c **** 	}
 387:apps/rssi/main.c **** 
 388:apps/rssi/main.c **** 	/* cursor */
 389:apps/rssi/main.c **** 	if (mode == MODE_ARFCN) {
 390:apps/rssi/main.c **** 		fb_setfg(FB_COLOR_WHITE);
 391:apps/rssi/main.c **** 		fb_setbg(FB_COLOR_BLUE);
 392:apps/rssi/main.c **** 		fb_putstr(" ", framebuffer->width);
 393:apps/rssi/main.c **** 		fb_setfg(FB_COLOR_BLACK);
 394:apps/rssi/main.c **** 		fb_setbg(FB_COLOR_WHITE);
 395:apps/rssi/main.c **** 	}
 396:apps/rssi/main.c **** 
 397:apps/rssi/main.c **** 	/* Frequency / power */
 398:apps/rssi/main.c **** 	if (mode == MODE_MAIN) {
 399:apps/rssi/main.c **** 		int f;
 400:apps/rssi/main.c **** 
 401:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX) {
 402:apps/rssi/main.c **** 			if (uplink)
 403:apps/rssi/main.c **** 				f = PCS_UL;
 404:apps/rssi/main.c **** 			else
 405:apps/rssi/main.c **** 				f = PCS_DL;
 406:apps/rssi/main.c **** 		} else if (uplink)
 407:apps/rssi/main.c **** 			f = band->freq_ul;
 408:apps/rssi/main.c **** 		else
 409:apps/rssi/main.c **** 			f = band->freq_dl;
 410:apps/rssi/main.c **** 		f += ((arfcn - band->min) & 1023) << 1;
 411:apps/rssi/main.c **** 
 412:apps/rssi/main.c **** 		fb_gotoxy(0, 30);
 413:apps/rssi/main.c **** 		sprintf(text, "Freq. %d.%d", f / 10, f % 10);
 414:apps/rssi/main.c **** 		fb_putstr(text,framebuffer->width);
 415:apps/rssi/main.c **** 
 416:apps/rssi/main.c **** 		fb_gotoxy(0, 40);
 417:apps/rssi/main.c **** 		sprintf(text, "Power %d", ((max) ? max_power : power) - 110);
 418:apps/rssi/main.c **** 		fb_putstr(text, framebuffer->width);
 419:apps/rssi/main.c **** 		if (max) {
 420:apps/rssi/main.c **** 			fb_setfont(FB_FONT_HELVR08);
 421:apps/rssi/main.c **** 			fb_setfg(FB_COLOR_RED);
 422:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16, 39);
 423:apps/rssi/main.c **** 			fb_putstr("max", framebuffer->width);
 424:apps/rssi/main.c **** 			fb_setfont(FB_FONT_C64);
 425:apps/rssi/main.c **** 			fb_setfg(FB_COLOR_BLACK);
 426:apps/rssi/main.c **** 		}
 427:apps/rssi/main.c **** 		fb_setbg(FB_COLOR_BLACK);
 428:apps/rssi/main.c **** 		fb_gotoxy(0, 45);
 429:apps/rssi/main.c **** 		fb_boxto(framebuffer->width * power / 64, 50);
 430:apps/rssi/main.c **** 		if (max) {
 431:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width * max_power / 64 ,45);
 432:apps/rssi/main.c **** 			fb_boxto(framebuffer->width * max_power / 64, 50);
 433:apps/rssi/main.c **** 		}
 434:apps/rssi/main.c **** 		fb_setbg(FB_COLOR_WHITE);
 435:apps/rssi/main.c **** 	}
 436:apps/rssi/main.c **** 
 437:apps/rssi/main.c **** 	/* spectrum */
 438:apps/rssi/main.c **** 	if (mode == MODE_SPECTRUM) {
 439:apps/rssi/main.c **** 		int i;
 440:apps/rssi/main.c **** 		uint16_t a, e, p;
 441:apps/rssi/main.c **** 		int height = framebuffer->height - 25;
 442:apps/rssi/main.c **** 
 443:apps/rssi/main.c **** 		fb_gotoxy(0, 8);
 444:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 445:apps/rssi/main.c **** 			sprintf(text, "%4dP", arfcn);
 446:apps/rssi/main.c **** 		else if (arfcn >= DCS_MIN && arfcn <= DCS_MAX)
 447:apps/rssi/main.c **** 			sprintf(text, "%4dD", arfcn);
 448:apps/rssi/main.c **** 		else
 449:apps/rssi/main.c **** 			sprintf(text, "%4d ", arfcn);
 450:apps/rssi/main.c **** 		sprintf(text + 5, "   %4d", pm_spectrum[arfcn & 1023] - 110);
 451:apps/rssi/main.c **** 		fb_putstr(text, -1);
 452:apps/rssi/main.c **** 		fb_setfg(FB_COLOR_RED);
 453:apps/rssi/main.c **** 		if (max) {
 454:apps/rssi/main.c **** 			fb_setfont(FB_FONT_HELVR08);
 455:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16,15);
 456:apps/rssi/main.c **** 			fb_putstr("max", framebuffer->width);
 457:apps/rssi/main.c **** 			fb_setfont(FB_FONT_C64);
 458:apps/rssi/main.c **** 		}
 459:apps/rssi/main.c **** 		if (pm_scale != 1) {
 460:apps/rssi/main.c **** 			fb_setfont(FB_FONT_HELVR08);
 461:apps/rssi/main.c **** 			fb_gotoxy(1, 15);
 462:apps/rssi/main.c **** 			sprintf(text, "x%d", pm_scale);
 463:apps/rssi/main.c **** 			fb_putstr(text, framebuffer->width);
 464:apps/rssi/main.c **** 			fb_setfont(FB_FONT_C64);
 465:apps/rssi/main.c **** 		}
 466:apps/rssi/main.c **** 		fb_setfg(FB_COLOR_BLACK);
 467:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX) {
 468:apps/rssi/main.c **** 			a = PCS_MIN;
 469:apps/rssi/main.c **** 			e = PCS_MAX;
 470:apps/rssi/main.c **** 		} else {
 471:apps/rssi/main.c **** 			a = band->min;
 472:apps/rssi/main.c **** 			e = band->max;
 473:apps/rssi/main.c **** 		}
 474:apps/rssi/main.c **** 		for (i = 0; i < framebuffer->width; i++) {
 475:apps/rssi/main.c **** 			p = (arfcn + i - (framebuffer->width >> 1)) & 1023;
 476:apps/rssi/main.c **** 			if ((((p - a) & 1023) & 512))
 477:apps/rssi/main.c **** 				continue;
 478:apps/rssi/main.c **** 			if ((((e - p) & 1023) & 512))
 479:apps/rssi/main.c **** 				continue;
 480:apps/rssi/main.c **** 			p = (pm_spectrum[p] * pm_scale * height / 64);
 481:apps/rssi/main.c **** 			if (p > height)
 482:apps/rssi/main.c **** 				p = height;
 483:apps/rssi/main.c **** 			if (i == (framebuffer->width >> 1))
 484:apps/rssi/main.c **** 				fb_setfg(FB_COLOR_RED);
 485:apps/rssi/main.c **** 			fb_gotoxy(i, height + 10 - p);
 486:apps/rssi/main.c **** 			fb_boxto(i, height + 10);
 487:apps/rssi/main.c **** 			if (i == (framebuffer->width >> 1))
 488:apps/rssi/main.c **** 				fb_setfg(FB_COLOR_BLACK);
 489:apps/rssi/main.c **** 		}
 490:apps/rssi/main.c **** 		i = framebuffer->width >> 1;
 491:apps/rssi/main.c **** 		fb_gotoxy(i, 0);
 492:apps/rssi/main.c **** 		fb_boxto(i, 4);
 493:apps/rssi/main.c **** 		fb_gotoxy(i, height + 10);
 494:apps/rssi/main.c **** 		fb_boxto(i, height + 14);
 495:apps/rssi/main.c **** 	}
 496:apps/rssi/main.c **** 
 497:apps/rssi/main.c **** 	/* footer */
 498:apps/rssi/main.c **** 	fb_setfg(FB_COLOR_GREEN);
 499:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 10);
 500:apps/rssi/main.c **** 	fb_boxto(framebuffer->width-1, framebuffer->height - 10);
 501:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 1);
 502:apps/rssi/main.c **** 	fb_setfg(FB_COLOR_RED);
 503:apps/rssi/main.c **** 	if (mode == MODE_ARFCN)
 504:apps/rssi/main.c **** 		sprintf(text, "%s   %s", (cursor) ? "del " : "back",
 505:apps/rssi/main.c **** 			(cursor) ? "enter" : "     ");
 506:apps/rssi/main.c **** 	else if (mode == MODE_SYNC && cursor < 0)
 507:apps/rssi/main.c **** 		sprintf(text, "%s      %s", "back",
 508:apps/rssi/main.c **** 			(uplink) ? "UL" : "DL");
 509:apps/rssi/main.c **** 	else if (mode == MODE_SYNC || mode == MODE_RACH)
 510:apps/rssi/main.c **** 		sprintf(text, "%s        ", "back");
 511:apps/rssi/main.c **** 	else
 512:apps/rssi/main.c **** 		sprintf(text, "%s       %s", (pcs) ? "PCS" : "DCS",
 513:apps/rssi/main.c **** 			(uplink) ? "UL" : "DL");
 514:apps/rssi/main.c **** 	fb_putstr(text, -1);
 515:apps/rssi/main.c **** 	fb_setfg(FB_COLOR_BLACK);
 516:apps/rssi/main.c **** 	fb_setfont(FB_FONT_HELVR08);
 517:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 2);
 518:apps/rssi/main.c **** 	sprintf(text, "%d", tone / 25);
 519:apps/rssi/main.c **** 	fb_putstr(text, -1);
 520:apps/rssi/main.c **** 
 521:apps/rssi/main.c **** 	fb_flush();
 522:apps/rssi/main.c **** }
 523:apps/rssi/main.c **** 
 524:apps/rssi/main.c **** static void exit_arfcn(void)
 525:apps/rssi/main.c **** {
 526:apps/rssi/main.c **** 	mode = last_mode;
 527:apps/rssi/main.c **** 	refresh_display();
 528:apps/rssi/main.c **** }
 529:apps/rssi/main.c **** 
 530:apps/rssi/main.c **** static void enter_arfcn(enum key_codes code)
 531:apps/rssi/main.c **** {
 532:apps/rssi/main.c **** 	/* enter mode */
 533:apps/rssi/main.c **** 	if (mode != MODE_ARFCN) {
 534:apps/rssi/main.c **** 		last_mode = mode;
 535:apps/rssi/main.c **** 		mode = MODE_ARFCN;
 536:apps/rssi/main.c **** 		input[0] = code - KEY_0 + '0';
 537:apps/rssi/main.c **** 		input[1] = '\0';
 538:apps/rssi/main.c **** 		cursor = 1;
 539:apps/rssi/main.c **** 		refresh_display();
 540:apps/rssi/main.c **** 		return;
 541:apps/rssi/main.c **** 	}
 542:apps/rssi/main.c **** 
 543:apps/rssi/main.c **** 	if (code == KEY_LEFT_SB) {
 544:apps/rssi/main.c **** 		/* back */
 545:apps/rssi/main.c **** 		if (cursor == 0) {
 546:apps/rssi/main.c **** 			exit_arfcn();
 547:apps/rssi/main.c **** 			return;
 548:apps/rssi/main.c **** 		}
 549:apps/rssi/main.c **** 		/* delete */
 550:apps/rssi/main.c **** 		cursor--;
 551:apps/rssi/main.c **** 		input[cursor] = '\0';
 552:apps/rssi/main.c **** 		refresh_display();
 553:apps/rssi/main.c **** 		return;
 554:apps/rssi/main.c **** 	}
 555:apps/rssi/main.c **** 
 556:apps/rssi/main.c **** 	if (code == KEY_RIGHT_SB) {
 557:apps/rssi/main.c **** 		int check = 0;
 558:apps/rssi/main.c **** 		int i;
 559:apps/rssi/main.c **** 		struct band *temp = NULL;
 560:apps/rssi/main.c **** 
 561:apps/rssi/main.c **** 		/* nothing entered */
 562:apps/rssi/main.c **** 		if (cursor == 0) {
 563:apps/rssi/main.c **** 			return;
 564:apps/rssi/main.c **** 		}
 565:apps/rssi/main.c **** 		for (i = 0; i < cursor; i++)
 566:apps/rssi/main.c **** 			check = (check << 3) + (check << 1) + input[i] - '0';
 567:apps/rssi/main.c **** 
 568:apps/rssi/main.c **** 		/* check */
 569:apps/rssi/main.c **** 		for (i = 0; bands[i].max; i++) {
 570:apps/rssi/main.c **** 			temp = &bands[i];
 571:apps/rssi/main.c **** 			if (temp->min < temp->max) {
 572:apps/rssi/main.c **** 				if (check >= temp->min && check <= temp->max)
 573:apps/rssi/main.c **** 					break;
 574:apps/rssi/main.c **** 			} else {
 575:apps/rssi/main.c **** 				if (check >= temp->min || check <= temp->max)
 576:apps/rssi/main.c **** 					break;
 577:apps/rssi/main.c **** 			}
 578:apps/rssi/main.c **** 		}
 579:apps/rssi/main.c **** 		if (!bands[i].max)
 580:apps/rssi/main.c **** 			return;
 581:apps/rssi/main.c **** 		if (check > 1023)
 582:apps/rssi/main.c **** 			return;
 583:apps/rssi/main.c **** 		arfcn = check;
 584:apps/rssi/main.c **** 		band = temp;
 585:apps/rssi/main.c **** 		mode = last_mode;
 586:apps/rssi/main.c **** 		refresh_display();
 587:apps/rssi/main.c **** 		return;
 588:apps/rssi/main.c **** 	}
 589:apps/rssi/main.c **** 
 590:apps/rssi/main.c **** 	if (cursor == 4)
 591:apps/rssi/main.c **** 		return;
 592:apps/rssi/main.c **** 
 593:apps/rssi/main.c **** 	input[cursor] = code - KEY_0 + '0';
 594:apps/rssi/main.c **** 	cursor++;
 595:apps/rssi/main.c **** 	input[cursor] = '\0';
 596:apps/rssi/main.c **** 	refresh_display();
 597:apps/rssi/main.c **** }
 598:apps/rssi/main.c **** 
 599:apps/rssi/main.c **** static int inc_dec_arfcn(int inc)
 600:apps/rssi/main.c **** {
 601:apps/rssi/main.c **** 	int i;
 602:apps/rssi/main.c **** 
 603:apps/rssi/main.c **** 	/* select current band */
 604:apps/rssi/main.c **** 	for (i = 0; bands[i].max; i++) {
 605:apps/rssi/main.c **** 		band = &bands[i];
 606:apps/rssi/main.c **** 		if (band->min < band->max) {
 607:apps/rssi/main.c **** 			if (arfcn >= band->min && arfcn <= band->max)
 608:apps/rssi/main.c **** 				break;
 609:apps/rssi/main.c **** 		} else {
 610:apps/rssi/main.c **** 			if (arfcn >= band->min || arfcn <= band->max)
 611:apps/rssi/main.c **** 				break;
 612:apps/rssi/main.c **** 		}
 613:apps/rssi/main.c **** 	}
 614:apps/rssi/main.c **** 	if (!bands[i].max)
 615:apps/rssi/main.c **** 		return -EINVAL;
 616:apps/rssi/main.c **** 
 617:apps/rssi/main.c **** 	if (inc) {
 618:apps/rssi/main.c **** 		if (arfcn == band->max)
 619:apps/rssi/main.c **** 			arfcn = band->next;
 620:apps/rssi/main.c **** 		else if (arfcn == 1023)
 621:apps/rssi/main.c **** 			arfcn = 0;
 622:apps/rssi/main.c **** 		else
 623:apps/rssi/main.c **** 			arfcn++;
 624:apps/rssi/main.c **** 	} else {
 625:apps/rssi/main.c **** 		if (arfcn == band->min)
 626:apps/rssi/main.c **** 			arfcn = band->prev;
 627:apps/rssi/main.c **** 		else if (arfcn == 0)
 628:apps/rssi/main.c **** 			arfcn = 1023;
 629:apps/rssi/main.c **** 		else
 630:apps/rssi/main.c **** 			arfcn--;
 631:apps/rssi/main.c **** 	}
 632:apps/rssi/main.c **** 	/* select next band */
 633:apps/rssi/main.c **** 	for (i = 0; bands[i].max; i++) {
 634:apps/rssi/main.c **** 		band = &bands[i];
 635:apps/rssi/main.c **** 		if (band->min < band->max) {
 636:apps/rssi/main.c **** 			if (arfcn >= band->min && arfcn <= band->max)
 637:apps/rssi/main.c **** 				break;
 638:apps/rssi/main.c **** 		} else {
 639:apps/rssi/main.c **** 			if (arfcn >= band->min || arfcn <= band->max)
 640:apps/rssi/main.c **** 				break;
 641:apps/rssi/main.c **** 		}
 642:apps/rssi/main.c **** 	}
 643:apps/rssi/main.c **** 	if (!bands[i].max)
 644:apps/rssi/main.c **** 		return -EINVAL;
 645:apps/rssi/main.c **** 
 646:apps/rssi/main.c **** 	refresh_display();
 647:apps/rssi/main.c **** 
 648:apps/rssi/main.c **** 	return 0;
 649:apps/rssi/main.c **** }
 650:apps/rssi/main.c **** 
 651:apps/rssi/main.c **** static void request_ul_levels(uint16_t a);
 652:apps/rssi/main.c **** 
 653:apps/rssi/main.c **** static int inc_dec_ul_arfcn(int inc)
 654:apps/rssi/main.c **** {
 655:apps/rssi/main.c **** 	uint16_t a;
 656:apps/rssi/main.c **** 
 657:apps/rssi/main.c **** 	/* loop until we hit a serving cell or our current bcch arfcn */
 658:apps/rssi/main.c **** 	if (inc) {
 659:apps/rssi/main.c **** 		for (a = (ul_arfcn + 1) & 1023; a != (arfcn & 1023);
 660:apps/rssi/main.c **** 					a = (a + 1) & 1023) {
 661:apps/rssi/main.c **** 			if ((freq[a].mask & FREQ_TYPE_SERV))
 662:apps/rssi/main.c **** 				break;
 663:apps/rssi/main.c **** 		}
 664:apps/rssi/main.c **** 	} else {
 665:apps/rssi/main.c **** 		for (a = (ul_arfcn - 1) & 1023; a != (arfcn & 1023);
 666:apps/rssi/main.c **** 					a = (a - 1) & 1023) {
 667:apps/rssi/main.c **** 			if ((freq[a].mask & FREQ_TYPE_SERV))
 668:apps/rssi/main.c **** 				break;
 669:apps/rssi/main.c **** 		}
 670:apps/rssi/main.c **** 	}
 671:apps/rssi/main.c **** 	ul_arfcn = a;
 672:apps/rssi/main.c **** 
 673:apps/rssi/main.c **** 	refresh_display();
 674:apps/rssi/main.c **** 
 675:apps/rssi/main.c **** 	request_ul_levels(a);
 676:apps/rssi/main.c **** 
 677:apps/rssi/main.c **** 	return 0;
 678:apps/rssi/main.c **** }
 679:apps/rssi/main.c **** 
 680:apps/rssi/main.c **** static void toggle_dcs_pcs(void)
 681:apps/rssi/main.c **** {
 682:apps/rssi/main.c **** 	pcs = !pcs;
 683:apps/rssi/main.c **** 	refresh_display();
 684:apps/rssi/main.c **** }
 685:apps/rssi/main.c **** 
 686:apps/rssi/main.c **** static void toggle_up_down(void)
 687:apps/rssi/main.c **** {
 688:apps/rssi/main.c **** 	uplink = !uplink;
 689:apps/rssi/main.c **** 	refresh_display();
 690:apps/rssi/main.c **** 
 691:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor < 0)
 692:apps/rssi/main.c **** 		request_ul_levels(ul_arfcn);
 693:apps/rssi/main.c **** }
 694:apps/rssi/main.c **** 
 695:apps/rssi/main.c **** static void toggle_spectrum(void)
 696:apps/rssi/main.c **** {
 697:apps/rssi/main.c **** 	if (mode == MODE_MAIN) {
 698:apps/rssi/main.c **** 		mode = MODE_SPECTRUM;
 699:apps/rssi/main.c **** 		pm_mode = PM_IDLE;
 700:apps/rssi/main.c **** 	} else if (mode == MODE_SPECTRUM) {
 701:apps/rssi/main.c **** 		mode = MODE_MAIN;
 702:apps/rssi/main.c **** 		pm_mode = PM_IDLE;
 703:apps/rssi/main.c **** 	}
 704:apps/rssi/main.c **** 	l1s_reset();
 705:apps/rssi/main.c **** 	l1s_reset_hw();
 706:apps/rssi/main.c **** 	pm_count = 0;
 707:apps/rssi/main.c **** 	refresh_display();
 708:apps/rssi/main.c **** }
 709:apps/rssi/main.c **** 
 710:apps/rssi/main.c **** static void tone_inc_dec(int inc)
 711:apps/rssi/main.c **** {
 712:apps/rssi/main.c **** 	if (inc) {
 713:apps/rssi/main.c **** 		if (tone + 25 <= 255)
 714:apps/rssi/main.c **** 			tone += 25;
 715:apps/rssi/main.c **** 	} else {
 716:apps/rssi/main.c **** 		if (tone - 25 >= 0)
 717:apps/rssi/main.c **** 			tone -= 25;
 718:apps/rssi/main.c **** 	}
 719:apps/rssi/main.c **** 
 720:apps/rssi/main.c **** 	refresh_display();
 721:apps/rssi/main.c **** }
 722:apps/rssi/main.c **** 
 723:apps/rssi/main.c **** static void hold_max(void)
 724:apps/rssi/main.c **** {
 725:apps/rssi/main.c **** 	max = !max;
 726:apps/rssi/main.c **** 	max_power = power;
 727:apps/rssi/main.c **** 	refresh_display();
 728:apps/rssi/main.c **** }
 729:apps/rssi/main.c **** 
 730:apps/rssi/main.c **** static int inc_dec_neighbour(int inc)
 731:apps/rssi/main.c **** {
 732:apps/rssi/main.c **** 	if (inc) {
 733:apps/rssi/main.c **** 		if (cursor > 0 && cursor - 1 >= (nb_num - NEIGH_LINES))
 734:apps/rssi/main.c **** 			return -EINVAL;
 735:apps/rssi/main.c **** 		cursor++;
 736:apps/rssi/main.c **** 	} else {
 737:apps/rssi/main.c **** 		if (cursor < 0)
 738:apps/rssi/main.c **** 			return -EINVAL;
 739:apps/rssi/main.c **** 		cursor--;
 740:apps/rssi/main.c **** 	}
 741:apps/rssi/main.c **** 
 742:apps/rssi/main.c **** 	refresh_display();
 743:apps/rssi/main.c **** 
 744:apps/rssi/main.c **** 	return 0;
 745:apps/rssi/main.c **** }
 746:apps/rssi/main.c **** 
 747:apps/rssi/main.c **** static int inc_dec_spectrum(int inc)
 748:apps/rssi/main.c **** {
 749:apps/rssi/main.c **** 	if (inc) {
 750:apps/rssi/main.c **** 		pm_scale <<= 1;
 751:apps/rssi/main.c **** 		if (pm_scale > 8)
 752:apps/rssi/main.c **** 			pm_scale = 8;
 753:apps/rssi/main.c **** 	} else {
 754:apps/rssi/main.c **** 		pm_scale >>= 1;
 755:apps/rssi/main.c **** 		if (pm_scale < 1)
 756:apps/rssi/main.c **** 			pm_scale = 1;
 757:apps/rssi/main.c **** 	}
 758:apps/rssi/main.c **** 
 759:apps/rssi/main.c **** 	refresh_display();
 760:apps/rssi/main.c **** 
 761:apps/rssi/main.c **** 	return 0;
 762:apps/rssi/main.c **** }
 763:apps/rssi/main.c **** 
 764:apps/rssi/main.c **** static void enter_sync(void);
 765:apps/rssi/main.c **** static void exit_sync(void);
 766:apps/rssi/main.c **** 
 767:apps/rssi/main.c **** static void enter_rach(void);
 768:apps/rssi/main.c **** static void exit_rach(void);
 769:apps/rssi/main.c **** 
 770:apps/rssi/main.c **** static void handle_key_code()
 771:apps/rssi/main.c **** {
 772:apps/rssi/main.c **** 	/* key repeat */
 773:apps/rssi/main.c **** 	if (key_pressed) {
 774:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - key_pressed_when;
 775:apps/rssi/main.c **** 		if (elapsed > key_pressed_delay) {
 776:apps/rssi/main.c **** 			key_pressed_when = jiffies;
 777:apps/rssi/main.c **** 			key_pressed_delay = HZ / 10;
 778:apps/rssi/main.c **** 			/* only repeat these keys */
 779:apps/rssi/main.c **** 			if (key_pressed_code == KEY_LEFT
 780:apps/rssi/main.c **** 			 || key_pressed_code == KEY_RIGHT)
 781:apps/rssi/main.c **** 				key_code = key_pressed_code;
 782:apps/rssi/main.c **** 		}
 783:apps/rssi/main.c **** 	}
 784:apps/rssi/main.c **** 
 785:apps/rssi/main.c **** 	if (key_code == KEY_INV)
 786:apps/rssi/main.c **** 		return;
 787:apps/rssi/main.c **** 
 788:apps/rssi/main.c **** 	/* do later, do not disturb tone */
 789:apps/rssi/main.c **** 	if (tone_on)
 790:apps/rssi/main.c **** 		return;
 791:apps/rssi/main.c **** 
 792:apps/rssi/main.c **** 	switch (key_code) {
 793:apps/rssi/main.c **** 	case KEY_0:
 794:apps/rssi/main.c **** 	case KEY_1:
 795:apps/rssi/main.c **** 	case KEY_2:
 796:apps/rssi/main.c **** 	case KEY_3:
 797:apps/rssi/main.c **** 	case KEY_4:
 798:apps/rssi/main.c **** 	case KEY_5:
 799:apps/rssi/main.c **** 	case KEY_6:
 800:apps/rssi/main.c **** 	case KEY_7:
 801:apps/rssi/main.c **** 	case KEY_8:
 802:apps/rssi/main.c **** 	case KEY_9:
 803:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM || mode == MODE_ARFCN)
 804:apps/rssi/main.c **** 			enter_arfcn(key_code);
 805:apps/rssi/main.c **** 		break;
 806:apps/rssi/main.c **** 	case KEY_UP:
 807:apps/rssi/main.c **** 		if (mode == MODE_MAIN)
 808:apps/rssi/main.c **** 			tone_inc_dec(1);
 809:apps/rssi/main.c **** 		else if (mode == MODE_SYNC)
 810:apps/rssi/main.c **** 			inc_dec_neighbour(0);
 811:apps/rssi/main.c **** 		else if (mode == MODE_SPECTRUM)
 812:apps/rssi/main.c **** 			inc_dec_spectrum(1);
 813:apps/rssi/main.c **** 		break;
 814:apps/rssi/main.c **** 	case KEY_DOWN:
 815:apps/rssi/main.c **** 		if (mode == MODE_MAIN)
 816:apps/rssi/main.c **** 			tone_inc_dec(0);
 817:apps/rssi/main.c **** 		else if (mode == MODE_SYNC)
 818:apps/rssi/main.c **** 			inc_dec_neighbour(1);
 819:apps/rssi/main.c **** 		else if (mode == MODE_SPECTRUM)
 820:apps/rssi/main.c **** 			inc_dec_spectrum(0);
 821:apps/rssi/main.c **** 		break;
 822:apps/rssi/main.c **** 	case KEY_RIGHT:
 823:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 824:apps/rssi/main.c **** 			inc_dec_arfcn(1);
 825:apps/rssi/main.c **** 		else if (mode == MODE_SYNC && cursor < 0)
 826:apps/rssi/main.c **** 			inc_dec_ul_arfcn(1);
 827:apps/rssi/main.c **** 		break;
 828:apps/rssi/main.c **** 	case KEY_LEFT:
 829:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 830:apps/rssi/main.c **** 			inc_dec_arfcn(0);
 831:apps/rssi/main.c **** 		else if (mode == MODE_SYNC && cursor < 0)
 832:apps/rssi/main.c **** 			inc_dec_ul_arfcn(0);
 833:apps/rssi/main.c **** 		break;
 834:apps/rssi/main.c **** 	case KEY_LEFT_SB:
 835:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 836:apps/rssi/main.c **** 			toggle_dcs_pcs();
 837:apps/rssi/main.c **** 		else if (mode == MODE_ARFCN)
 838:apps/rssi/main.c **** 			enter_arfcn(key_code);
 839:apps/rssi/main.c **** 		else if (mode == MODE_SYNC)
 840:apps/rssi/main.c **** 			exit_sync();
 841:apps/rssi/main.c **** 		else if (mode == MODE_RACH)
 842:apps/rssi/main.c **** 			exit_rach();
 843:apps/rssi/main.c **** 		break;
 844:apps/rssi/main.c **** 	case KEY_RIGHT_SB:
 845:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 846:apps/rssi/main.c **** 			toggle_up_down();
 847:apps/rssi/main.c **** 		else if (mode == MODE_ARFCN)
 848:apps/rssi/main.c **** 			enter_arfcn(key_code);
 849:apps/rssi/main.c **** 		else if (mode == MODE_SYNC && cursor < 0)
 850:apps/rssi/main.c **** 			toggle_up_down();
 851:apps/rssi/main.c **** 		break;
 852:apps/rssi/main.c **** 	case KEY_OK:
 853:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 854:apps/rssi/main.c **** 			enter_sync();
 855:apps/rssi/main.c **** 		else if (mode == MODE_SYNC || mode == MODE_RACH)
 856:apps/rssi/main.c **** 			enter_rach();
 857:apps/rssi/main.c **** 		break;
 858:apps/rssi/main.c **** 	case KEY_MENU:
 859:apps/rssi/main.c **** 		hold_max();
 860:apps/rssi/main.c **** 		break;
 861:apps/rssi/main.c **** 	case KEY_POWER:
 862:apps/rssi/main.c **** 		if (mode == MODE_ARFCN)
 863:apps/rssi/main.c **** 			exit_arfcn();
 864:apps/rssi/main.c **** 		else if (mode == MODE_SYNC)
 865:apps/rssi/main.c **** 			exit_sync();
 866:apps/rssi/main.c **** 		else if (mode == MODE_RACH)
 867:apps/rssi/main.c **** 			exit_rach();
 868:apps/rssi/main.c **** 		else if (mode == MODE_SPECTRUM)
 869:apps/rssi/main.c **** 			toggle_spectrum();
 870:apps/rssi/main.c **** 		break;
 871:apps/rssi/main.c **** 	case KEY_STAR:
 872:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 873:apps/rssi/main.c **** 			toggle_spectrum();
 874:apps/rssi/main.c **** 		break;
 875:apps/rssi/main.c **** 	default:
 876:apps/rssi/main.c **** 		break;
 877:apps/rssi/main.c **** 	}
 878:apps/rssi/main.c **** 
 879:apps/rssi/main.c **** 	key_code = KEY_INV;
 880:apps/rssi/main.c **** }
 881:apps/rssi/main.c **** 
 882:apps/rssi/main.c **** static void handle_tone(void)
 883:apps/rssi/main.c **** {
 884:apps/rssi/main.c **** 	unsigned long elapsed = jiffies - tone_time;
 885:apps/rssi/main.c **** 
 886:apps/rssi/main.c **** 	if (!tone_on) {
 887:apps/rssi/main.c **** 		if (!tone || mode != MODE_MAIN)
 888:apps/rssi/main.c **** 			return;
 889:apps/rssi/main.c **** 		/* wait depending on power level */
 890:apps/rssi/main.c **** 		if (elapsed < (uint8_t)(63-power))
 891:apps/rssi/main.c **** 			return;
 892:apps/rssi/main.c **** 		buzzer_volume(tone);
 893:apps/rssi/main.c **** 		buzzer_note(NOTE(NOTE_C, OCTAVE_5));
 894:apps/rssi/main.c **** 		tone_time = jiffies;
 895:apps/rssi/main.c **** 		tone_on = 1;
 896:apps/rssi/main.c **** 		return;
 897:apps/rssi/main.c **** 	}
 898:apps/rssi/main.c **** 
 899:apps/rssi/main.c **** 	if (elapsed >= TONE_JIFFIES) {
 900:apps/rssi/main.c **** 		tone_on = 0;
 901:apps/rssi/main.c **** 		tone_time = jiffies;
 902:apps/rssi/main.c **** 		buzzer_volume(0);
 903:apps/rssi/main.c **** 	}
 904:apps/rssi/main.c **** }
 905:apps/rssi/main.c **** 
 906:apps/rssi/main.c **** /* PM handling */
 907:apps/rssi/main.c **** 
 908:apps/rssi/main.c **** static void handle_pm(void)
 909:apps/rssi/main.c **** {
 910:apps/rssi/main.c **** 	/* start power measurement */
 911:apps/rssi/main.c **** 	if (pm_mode == PM_IDLE && (mode == MODE_MAIN || mode == MODE_SPECTRUM)) {
 912:apps/rssi/main.c **** 		struct msgb *msg = l1ctl_msgb_alloc(L1CTL_PM_REQ);
 913:apps/rssi/main.c **** 		struct l1ctl_pm_req *pm;
 914:apps/rssi/main.c **** 		uint16_t a, e;
 915:apps/rssi/main.c **** 
 916:apps/rssi/main.c **** 		pm = (struct l1ctl_pm_req *) msgb_put(msg, sizeof(*pm));
 917:apps/rssi/main.c **** 		pm->type = 1;
 918:apps/rssi/main.c **** 		if (mode == MODE_MAIN) {
 919:apps/rssi/main.c **** 			a = arfcn;
 920:apps/rssi/main.c **** 			if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 921:apps/rssi/main.c **** 				a |= ARFCN_PCS;
 922:apps/rssi/main.c **** 			if (uplink)
 923:apps/rssi/main.c **** 				a |= ARFCN_UPLINK;
 924:apps/rssi/main.c **** 			e = a;
 925:apps/rssi/main.c **** 			pm_mode = PM_SENT;
 926:apps/rssi/main.c **** 		}
 927:apps/rssi/main.c **** 		if (mode == MODE_SPECTRUM) {
 928:apps/rssi/main.c **** 			if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX) {
 929:apps/rssi/main.c **** 				a = PCS_MIN | ARFCN_PCS;
 930:apps/rssi/main.c **** 				e = PCS_MAX | ARFCN_PCS;
 931:apps/rssi/main.c **** 			} else {
 932:apps/rssi/main.c **** 				a = band->min;
 933:apps/rssi/main.c **** 				e = band->max;
 934:apps/rssi/main.c **** 			}
 935:apps/rssi/main.c **** 			pm_mode = PM_RANGE_SENT;
 936:apps/rssi/main.c **** 		}
 937:apps/rssi/main.c **** 		if (uplink) {
 938:apps/rssi/main.c **** 			a |= ARFCN_UPLINK;
 939:apps/rssi/main.c **** 			e |= ARFCN_UPLINK;
 940:apps/rssi/main.c **** 		}
 941:apps/rssi/main.c **** 		pm->range.band_arfcn_from = htons(a);
 942:apps/rssi/main.c **** 		pm->range.band_arfcn_to = htons(e);
 943:apps/rssi/main.c **** 
 944:apps/rssi/main.c **** 		l1a_l23_rx(SC_DLCI_L1A_L23, msg);
 945:apps/rssi/main.c **** 
 946:apps/rssi/main.c **** 		return;
 947:apps/rssi/main.c **** 	}
 948:apps/rssi/main.c **** 
 949:apps/rssi/main.c **** 	if (pm_mode == PM_RESULT) {
 950:apps/rssi/main.c **** 		pm_mode = PM_IDLE;
 951:apps/rssi/main.c **** 		if (pm_count == pm_max) {
 952:apps/rssi/main.c **** 			int i = 0;
 953:apps/rssi/main.c **** 			int sum = 0;
 954:apps/rssi/main.c **** 
 955:apps/rssi/main.c **** 			if (uplink) {
 956:apps/rssi/main.c **** 				/* find max */
 957:apps/rssi/main.c **** 				for (i = 0; i < pm_count; i++) {
 958:apps/rssi/main.c **** 					if (pm_meas[i] > sum)
 959:apps/rssi/main.c **** 						sum = pm_meas[i];
 960:apps/rssi/main.c **** 				}
 961:apps/rssi/main.c **** 				power = sum;
 962:apps/rssi/main.c **** 			} else {
 963:apps/rssi/main.c **** 				for (i = 0; i < pm_count; i++)
 964:apps/rssi/main.c **** 					sum += pm_meas[i];
 965:apps/rssi/main.c **** 				power = sum / pm_count;
 966:apps/rssi/main.c **** 			}
 967:apps/rssi/main.c **** 			if (power > max_power)
 968:apps/rssi/main.c **** 				max_power = power;
 969:apps/rssi/main.c **** 			pm_count = 0;
 970:apps/rssi/main.c **** 			pm_max = (uplink) ? NUM_PM_UL : NUM_PM_DL;
 971:apps/rssi/main.c **** 			if (!tone_on)
 972:apps/rssi/main.c **** 				refresh_display();
 973:apps/rssi/main.c **** 		}
 974:apps/rssi/main.c **** 		return;
 975:apps/rssi/main.c **** 	}
 976:apps/rssi/main.c **** 
 977:apps/rssi/main.c **** 	if (pm_mode == PM_RANGE_RESULT) {
 978:apps/rssi/main.c **** 		pm_mode = PM_IDLE;
 979:apps/rssi/main.c **** 		refresh_display();
 980:apps/rssi/main.c **** 		buzzer_volume(tone);
 981:apps/rssi/main.c **** 		buzzer_note(NOTE(NOTE_C, OCTAVE_5));
 982:apps/rssi/main.c **** 		tone_time = jiffies;
 983:apps/rssi/main.c **** 		tone_on = 1;
 984:apps/rssi/main.c **** 		return;
 985:apps/rssi/main.c **** 	}
 986:apps/rssi/main.c **** }
 987:apps/rssi/main.c **** 
 988:apps/rssi/main.c **** /* sync / SI */
 989:apps/rssi/main.c **** 
 990:apps/rssi/main.c **** static void enter_sync(void)
 991:apps/rssi/main.c **** {
 992:apps/rssi/main.c **** 	struct msgb *msg = l1ctl_msgb_alloc(L1CTL_FBSB_REQ);
 993:apps/rssi/main.c **** 	struct l1ctl_fbsb_req *req;
 994:apps/rssi/main.c **** 	uint16_t a = arfcn;
 995:apps/rssi/main.c **** 
 996:apps/rssi/main.c **** 	l1s_reset();
 997:apps/rssi/main.c **** 	l1s_reset_hw();
 998:apps/rssi/main.c **** 	pm_count = 0;
 999:apps/rssi/main.c **** 	pm_mode = PM_IDLE;
1000:apps/rssi/main.c **** 
1001:apps/rssi/main.c **** 	req = (struct l1ctl_fbsb_req *) msgb_put(msg, sizeof(*req));
1002:apps/rssi/main.c **** 	if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
1003:apps/rssi/main.c **** 		a |= ARFCN_PCS;
1004:apps/rssi/main.c **** 	req->band_arfcn = htons(a);
1005:apps/rssi/main.c **** 	req->timeout = htons(100);
1006:apps/rssi/main.c **** 	/* Threshold when to consider FB_MODE1: 4kHz - 1kHz */
1007:apps/rssi/main.c **** 	req->freq_err_thresh1 = htons(11000 - 1000);
1008:apps/rssi/main.c **** 	/* Threshold when to consider SCH: 1kHz - 200Hz */
1009:apps/rssi/main.c **** 	req->freq_err_thresh2 = htons(1000 - 200);
1010:apps/rssi/main.c **** 	/* not used yet! */
1011:apps/rssi/main.c **** 	req->num_freqerr_avg = 3;
1012:apps/rssi/main.c **** 	req->flags = L1CTL_FBSB_F_FB01SB;
1013:apps/rssi/main.c **** 	req->sync_info_idx = 0;
1014:apps/rssi/main.c **** 	req->ccch_mode = CCCH_MODE_NONE;
1015:apps/rssi/main.c **** 	l1a_l23_rx(SC_DLCI_L1A_L23, msg);
1016:apps/rssi/main.c **** 
1017:apps/rssi/main.c **** 	mode = MODE_SYNC;
1018:apps/rssi/main.c **** 	memset(ul_levels, 0, sizeof(ul_levels));
1019:apps/rssi/main.c **** 	si_new = 0;
1020:apps/rssi/main.c **** 	ul_new = 0;
1021:apps/rssi/main.c **** 	ul_arfcn = arfcn;
1022:apps/rssi/main.c **** 	si_1[2] = 0;
1023:apps/rssi/main.c **** 	si_2[2] = 0;
1024:apps/rssi/main.c **** 	si_2bis[2] = 0;
1025:apps/rssi/main.c **** 	si_2ter[2] = 0;
1026:apps/rssi/main.c **** 	si_3[2] = 0;
1027:apps/rssi/main.c **** 	si_4[2] = 0;
1028:apps/rssi/main.c **** 	mcc = mnc = lac = 0;
1029:apps/rssi/main.c **** 	ccch_conf = -1;
1030:apps/rssi/main.c **** 	memset(freq, 0, sizeof(freq));
1031:apps/rssi/main.c **** 	cursor = 0;
1032:apps/rssi/main.c **** 	nb_num = 0;
1033:apps/rssi/main.c **** 	sync_msg = "trying";
1034:apps/rssi/main.c **** 	refresh_display();
1035:apps/rssi/main.c **** }
1036:apps/rssi/main.c **** 
1037:apps/rssi/main.c **** static void exit_sync(void)
1038:apps/rssi/main.c **** {
1039:apps/rssi/main.c **** 	l1s_reset();
1040:apps/rssi/main.c **** 	l1s_reset_hw();
1041:apps/rssi/main.c **** 	pm_count = 0;
1042:apps/rssi/main.c **** 	pm_mode = PM_IDLE;
1043:apps/rssi/main.c **** 	mode = MODE_MAIN;
1044:apps/rssi/main.c **** }
1045:apps/rssi/main.c **** 
1046:apps/rssi/main.c **** int gsm48_decode_lai(struct gsm48_loc_area_id *lai, uint16_t *_mcc,
1047:apps/rssi/main.c **** uint16_t *_mnc, uint16_t *_lac)
1048:apps/rssi/main.c **** {
1049:apps/rssi/main.c **** 	*_mcc = ((lai->digits[0] & 0x0f) << 8)
1050:apps/rssi/main.c **** 	 | (lai->digits[0] & 0xf0)
1051:apps/rssi/main.c **** 	 | (lai->digits[1] & 0x0f);
1052:apps/rssi/main.c **** 	*_mnc = ((lai->digits[2] & 0x0f) << 8)
1053:apps/rssi/main.c **** 	 | (lai->digits[2] & 0xf0)
1054:apps/rssi/main.c **** 	 | ((lai->digits[1] & 0xf0) >> 4);
1055:apps/rssi/main.c **** 	*_lac = ntohs(lai->lac);
1056:apps/rssi/main.c **** 
1057:apps/rssi/main.c **** 	return 0;
1058:apps/rssi/main.c **** }
1059:apps/rssi/main.c **** 
1060:apps/rssi/main.c **** static void request_ul_levels(uint16_t a)
1061:apps/rssi/main.c **** {
1062:apps/rssi/main.c **** 	struct msgb *msg = l1ctl_msgb_alloc(L1CTL_NEIGH_PM_REQ);
1063:apps/rssi/main.c **** 	struct l1ctl_neigh_pm_req *pm_req =
1064:apps/rssi/main.c **** 		(struct l1ctl_neigh_pm_req *) msgb_put(msg, sizeof(*pm_req));
1065:apps/rssi/main.c **** 	int i;
1066:apps/rssi/main.c **** 
1067:apps/rssi/main.c **** 	if (pcs && a >= PCS_MIN && a <= PCS_MAX)
1068:apps/rssi/main.c **** 		a |= ARFCN_PCS;
1069:apps/rssi/main.c **** 	if (uplink)
1070:apps/rssi/main.c **** 		a |= ARFCN_UPLINK;
1071:apps/rssi/main.c **** 	pm_req->n = 8;
1072:apps/rssi/main.c **** 	for (i = 0; i < 8; i++) {
1073:apps/rssi/main.c **** 		pm_req->band_arfcn[i] = htons(a);
1074:apps/rssi/main.c **** 		pm_req->tn[i] = i;
1075:apps/rssi/main.c **** 	}
1076:apps/rssi/main.c **** 	l1a_l23_rx(SC_DLCI_L1A_L23, msg);
1077:apps/rssi/main.c **** }
1078:apps/rssi/main.c **** 
1079:apps/rssi/main.c **** static void handle_sync(void)
1080:apps/rssi/main.c **** {
1081:apps/rssi/main.c **** 	struct gsm48_system_information_type_1 *si1;
1082:apps/rssi/main.c **** 	struct gsm48_system_information_type_2 *si2;
1083:apps/rssi/main.c **** 	struct gsm48_system_information_type_2bis *si2bis;
1084:apps/rssi/main.c **** 	struct gsm48_system_information_type_2ter *si2ter;
1085:apps/rssi/main.c **** 	struct gsm48_system_information_type_3 *si3;
1086:apps/rssi/main.c **** 	struct gsm48_system_information_type_4 *si4;
1087:apps/rssi/main.c **** 
1088:apps/rssi/main.c **** 	if (mode != MODE_SYNC)
1089:apps/rssi/main.c **** 		return;
1090:apps/rssi/main.c **** 
1091:apps/rssi/main.c **** 	/* once we synced, we take the result and request UL measurement */
1092:apps/rssi/main.c **** 	if (sync_result) {
1093:apps/rssi/main.c **** 		uint16_t a = ul_arfcn;
1094:apps/rssi/main.c **** 
1095:apps/rssi/main.c **** 		sync_msg = sync_result;
1096:apps/rssi/main.c **** 		sync_result = NULL;
1097:apps/rssi/main.c **** 		refresh_display();
1098:apps/rssi/main.c **** 
1099:apps/rssi/main.c **** 		if (sync_msg[0] != 'o')
1100:apps/rssi/main.c **** 			return;
1101:apps/rssi/main.c **** 
1102:apps/rssi/main.c **** 		request_ul_levels(a);
1103:apps/rssi/main.c **** 
1104:apps/rssi/main.c **** 		return;
1105:apps/rssi/main.c **** 	}
1106:apps/rssi/main.c **** 
1107:apps/rssi/main.c **** 	if (tone_on)
1108:apps/rssi/main.c **** 		return;
1109:apps/rssi/main.c **** 
1110:apps/rssi/main.c **** 	/* no UL result, no SI result */
1111:apps/rssi/main.c **** 	if (!ul_new && !(si_new & 0x100))
1112:apps/rssi/main.c **** 		return;
1113:apps/rssi/main.c **** 
1114:apps/rssi/main.c **** 	/* new UL result */
1115:apps/rssi/main.c **** 	if (ul_new) {
1116:apps/rssi/main.c **** 		ul_new = 0;
1117:apps/rssi/main.c **** 		if (cursor < 0)
1118:apps/rssi/main.c **** 			refresh_display();
1119:apps/rssi/main.c **** 		return;
1120:apps/rssi/main.c **** 	}
1121:apps/rssi/main.c **** 
1122:apps/rssi/main.c **** 	/* decode si */
1123:apps/rssi/main.c **** 	switch (si_new & 0xff) {
1124:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_1:
1125:apps/rssi/main.c **** 		si1 = (struct gsm48_system_information_type_1 *)si_1;
1126:apps/rssi/main.c **** 		gsm48_decode_freq_list(freq, si1->cell_channel_description,
1127:apps/rssi/main.c **** 	                sizeof(si1->cell_channel_description), 0xce,
1128:apps/rssi/main.c **** 					FREQ_TYPE_SERV);
1129:apps/rssi/main.c **** 		break;
1130:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_2:
1131:apps/rssi/main.c **** 		si2 = (struct gsm48_system_information_type_2 *)si_2;
1132:apps/rssi/main.c **** 		gsm48_decode_freq_list(freq, si2->bcch_frequency_list,
1133:apps/rssi/main.c **** 	                sizeof(si2->bcch_frequency_list), 0xce,
1134:apps/rssi/main.c **** 					FREQ_TYPE_NCELL_2);
1135:apps/rssi/main.c **** 		break;
1136:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_2bis:
1137:apps/rssi/main.c **** 		si2bis = (struct gsm48_system_information_type_2bis *)si_2bis;
1138:apps/rssi/main.c **** 		gsm48_decode_freq_list(freq, si2bis->bcch_frequency_list,
1139:apps/rssi/main.c **** 	                sizeof(si2bis->bcch_frequency_list), 0xce,
1140:apps/rssi/main.c **** 					FREQ_TYPE_NCELL_2bis);
1141:apps/rssi/main.c **** 		break;
1142:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_2ter:
1143:apps/rssi/main.c **** 		si2ter = (struct gsm48_system_information_type_2ter *)si_2ter;
1144:apps/rssi/main.c **** 		gsm48_decode_freq_list(freq, si2ter->ext_bcch_frequency_list,
1145:apps/rssi/main.c **** 	                sizeof(si2ter->ext_bcch_frequency_list), 0x8e,
1146:apps/rssi/main.c **** 					FREQ_TYPE_NCELL_2ter);
1147:apps/rssi/main.c **** 		break;
1148:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_3:
1149:apps/rssi/main.c **** 		si3 = (struct gsm48_system_information_type_3 *)si_3;
1150:apps/rssi/main.c **** 		gsm48_decode_lai(&si3->lai, &mcc, &mnc, &lac);
1151:apps/rssi/main.c **** 		cell_id = ntohs(si3->cell_identity);
1152:apps/rssi/main.c **** 		if (ccch_conf < 0) {
1153:apps/rssi/main.c **** 			struct msgb *msg =
1154:apps/rssi/main.c **** 				l1ctl_msgb_alloc(L1CTL_CCCH_MODE_REQ);
1155:apps/rssi/main.c **** 			struct l1ctl_ccch_mode_req *req =
1156:apps/rssi/main.c **** 				(struct l1ctl_ccch_mode_req *)
1157:apps/rssi/main.c **** 					msgb_put(msg, sizeof(*req));
1158:apps/rssi/main.c **** 
1159:apps/rssi/main.c **** 			ccch_conf = si3->control_channel_desc.ccch_conf;
1160:apps/rssi/main.c **** 			req->ccch_mode = (ccch_conf == 1)
1161:apps/rssi/main.c **** 					? CCCH_MODE_COMBINED
1162:apps/rssi/main.c **** 					: CCCH_MODE_NON_COMBINED;
1163:apps/rssi/main.c **** 			printf("ccch_mode=%d\n", ccch_conf);
1164:apps/rssi/main.c **** 
1165:apps/rssi/main.c **** 			l1a_l23_rx(SC_DLCI_L1A_L23, msg);
1166:apps/rssi/main.c **** 		}
1167:apps/rssi/main.c **** 		break;
1168:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_4:
1169:apps/rssi/main.c **** 		si4 = (struct gsm48_system_information_type_4 *)si_4;
1170:apps/rssi/main.c **** 		gsm48_decode_lai(&si4->lai, &mcc, &mnc, &lac);
1171:apps/rssi/main.c **** 		break;
1172:apps/rssi/main.c **** 	}
1173:apps/rssi/main.c **** 
1174:apps/rssi/main.c **** 	if (cursor >= 0)
1175:apps/rssi/main.c **** 		refresh_display();
1176:apps/rssi/main.c **** 
1177:apps/rssi/main.c **** 	/* tone depends on successfully received BCCH */
1178:apps/rssi/main.c **** 	buzzer_volume(tone);
1179:apps/rssi/main.c **** 	tone_time = jiffies;
1180:apps/rssi/main.c **** 	tone_on = 1;
1181:apps/rssi/main.c **** 	if ((si_new & 0xff) == 0xff)
1182:apps/rssi/main.c **** 		buzzer_note(NOTE(NOTE_C, OCTAVE_2));
1183:apps/rssi/main.c **** 	else
1184:apps/rssi/main.c **** 		buzzer_note(NOTE(NOTE_C, OCTAVE_5));
1185:apps/rssi/main.c **** 	si_new = 0;
1186:apps/rssi/main.c **** }
1187:apps/rssi/main.c **** 
1188:apps/rssi/main.c **** static void enter_rach(void)
1189:apps/rssi/main.c **** {
1190:apps/rssi/main.c **** 	if (ccch_conf < 0)
1191:apps/rssi/main.c **** 		return;
1192:apps/rssi/main.c **** 
1193:apps/rssi/main.c **** 	if (rach)
1194:apps/rssi/main.c **** 		return;
1195:apps/rssi/main.c **** 
1196:apps/rssi/main.c **** #ifndef CONFIG_TX_ENABLE
1197:apps/rssi/main.c **** 	assign = ASSIGN_NO_TX;
1198:apps/rssi/main.c **** 	mode = MODE_RACH;
1199:apps/rssi/main.c **** 	/* display refresh is done by rach handler */
1200:apps/rssi/main.c **** #else
1201:apps/rssi/main.c **** 	struct msgb *msg1 = l1ctl_msgb_alloc(L1CTL_NEIGH_PM_REQ);
1202:apps/rssi/main.c **** 	struct msgb *msg2 = l1ctl_msgb_alloc(L1CTL_RACH_REQ);
1203:apps/rssi/main.c **** 	struct l1ctl_neigh_pm_req *pm_req = (struct l1ctl_neigh_pm_req *)
1204:apps/rssi/main.c **** 			msgb_put(msg1, sizeof(*pm_req));
1205:apps/rssi/main.c **** 	struct l1ctl_info_ul *ul = (struct l1ctl_info_ul *)
1206:apps/rssi/main.c **** 			msgb_put(msg2, sizeof(*ul));;
1207:apps/rssi/main.c **** 	struct l1ctl_rach_req *rach_req = (struct l1ctl_rach_req *)
1208:apps/rssi/main.c **** 			msgb_put(msg2, sizeof(*rach_req));
1209:apps/rssi/main.c **** 
1210:apps/rssi/main.c **** 	l1s.tx_power = 0;
1211:apps/rssi/main.c **** 
1212:apps/rssi/main.c **** 	pm_req->n = 0; /* disable */
1213:apps/rssi/main.c **** 
1214:apps/rssi/main.c **** 	rach_ra = 0x00;
1215:apps/rssi/main.c **** 	rach_req->ra = rach_ra;
1216:apps/rssi/main.c **** 	rach_req->offset = 0;
1217:apps/rssi/main.c **** 	rach_req->combined = (ccch_conf == 1);
1218:apps/rssi/main.c **** 
1219:apps/rssi/main.c **** 	l1a_l23_rx(SC_DLCI_L1A_L23, msg1);
1220:apps/rssi/main.c **** 	l1a_l23_rx(SC_DLCI_L1A_L23, msg2);
1221:apps/rssi/main.c **** 	rach = 1;
1222:apps/rssi/main.c **** 	rach_when = jiffies;
1223:apps/rssi/main.c **** 	assign = ASSIGN_NONE;
1224:apps/rssi/main.c **** 	mode = MODE_RACH;
1225:apps/rssi/main.c **** 	refresh_display();
1226:apps/rssi/main.c **** #endif
1227:apps/rssi/main.c **** 
1228:apps/rssi/main.c **** }
1229:apps/rssi/main.c **** 
1230:apps/rssi/main.c **** static void exit_rach(void)
1231:apps/rssi/main.c **** {
1232:apps/rssi/main.c **** 	rach = 0;
1233:apps/rssi/main.c **** 
1234:apps/rssi/main.c **** 	request_ul_levels(ul_arfcn);
1235:apps/rssi/main.c **** 
1236:apps/rssi/main.c **** 	mode = MODE_SYNC;
1237:apps/rssi/main.c **** 	refresh_display();
1238:apps/rssi/main.c **** }
1239:apps/rssi/main.c **** 
1240:apps/rssi/main.c **** static void handle_assign(void)
1241:apps/rssi/main.c **** {
1242:apps/rssi/main.c **** 	if (mode != MODE_RACH)
1243:apps/rssi/main.c **** 		return;
1244:apps/rssi/main.c **** 
1245:apps/rssi/main.c **** 	if (assign == ASSIGN_NONE) {
1246:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - rach_when;
1247:apps/rssi/main.c **** 
1248:apps/rssi/main.c **** 		if (!rach)
1249:apps/rssi/main.c **** 			return;
1250:apps/rssi/main.c **** 		if (elapsed < HZ * 2)
1251:apps/rssi/main.c **** 			return;
1252:apps/rssi/main.c **** 		assign = ASSIGN_TIMEOUT;
1253:apps/rssi/main.c **** 		rach = 0;
1254:apps/rssi/main.c **** 	}
1255:apps/rssi/main.c **** 
1256:apps/rssi/main.c **** 	refresh_display();
1257:apps/rssi/main.c **** 	assign = ASSIGN_NONE;
1258:apps/rssi/main.c **** }
1259:apps/rssi/main.c **** 
1260:apps/rssi/main.c **** /* Main Program */
1261:apps/rssi/main.c **** const char *hr = "======================================================================\n";
1262:apps/rssi/main.c **** 
1263:apps/rssi/main.c **** /* match request reference agains request history */
1264:apps/rssi/main.c **** static int gsm48_match_ra(struct gsm48_req_ref *ref)
1265:apps/rssi/main.c **** {
 169              		.loc 2 1265 0
 170              		.cfi_startproc
 171              		@ Function supports interworking.
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              		@ link register save eliminated.
 175              	.LVL10:
1266:apps/rssi/main.c **** 	uint8_t ia_t1, ia_t2, ia_t3;
1267:apps/rssi/main.c **** 	uint8_t cr_t1, cr_t2, cr_t3;
1268:apps/rssi/main.c **** 
1269:apps/rssi/main.c **** 	if (rach && ref->ra == rach_ra) {
 176              		.loc 2 1269 0
 177 0000 94309FE5 		ldr	r3, .L17
 178 0004 003093E5 		ldr	r3, [r3]
 179 0008 000053E3 		cmp	r3, #0
1265:apps/rssi/main.c **** {
 180              		.loc 2 1265 0
 181 000c F0002DE9 		stmfd	sp!, {r4, r5, r6, r7}
 182              	.LCFI3:
 183              		.cfi_def_cfa_offset 16
 184              		.cfi_offset 4, -16
 185              		.cfi_offset 5, -12
 186              		.cfi_offset 6, -8
 187              		.cfi_offset 7, -4
1270:apps/rssi/main.c **** 		ia_t1 = ref->t1;
1271:apps/rssi/main.c **** 		ia_t2 = ref->t2;
1272:apps/rssi/main.c **** 		ia_t3 = (ref->t3_high << 3) | ref->t3_low;
1273:apps/rssi/main.c **** 		ref = &rach_ref;
1274:apps/rssi/main.c **** 		cr_t1 = ref->t1;
1275:apps/rssi/main.c **** 		cr_t2 = ref->t2;
1276:apps/rssi/main.c **** 		cr_t3 = (ref->t3_high << 3) | ref->t3_low;
1277:apps/rssi/main.c **** 		if (ia_t1 == cr_t1 && ia_t2 == cr_t2 && ia_t3 == cr_t3)
1278:apps/rssi/main.c **** 			return 1;
1279:apps/rssi/main.c **** 	}
1280:apps/rssi/main.c **** 
1281:apps/rssi/main.c **** 	return 0;
 188              		.loc 2 1281 0
 189 0010 0300A001 		moveq	r0, r3
 190              	.LVL11:
1269:apps/rssi/main.c **** 	if (rach && ref->ra == rach_ra) {
 191              		.loc 2 1269 0
 192 0014 1E00000A 		beq	.L13
1269:apps/rssi/main.c **** 	if (rach && ref->ra == rach_ra) {
 193              		.loc 2 1269 0 is_stmt 0 discriminator 1
 194 0018 80309FE5 		ldr	r3, .L17+4
 195 001c 0020D0E5 		ldrb	r2, [r0]	@ zero_extendqisi2
 196 0020 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 197 0024 030052E1 		cmp	r2, r3
 198              		.loc 2 1281 0 is_stmt 1 discriminator 1
 199 0028 0000A013 		movne	r0, #0
1269:apps/rssi/main.c **** 	if (rach && ref->ra == rach_ra) {
 200              		.loc 2 1269 0 discriminator 1
 201 002c 1800001A 		bne	.L13
 202              	.LVL12:
1276:apps/rssi/main.c **** 		cr_t3 = (ref->t3_high << 3) | ref->t3_low;
 203              		.loc 2 1276 0
 204 0030 6C309FE5 		ldr	r3, .L17+8
 205 0034 01C0D3E5 		ldrb	ip, [r3, #1]	@ zero_extendqisi2
1272:apps/rssi/main.c **** 		ia_t3 = (ref->t3_high << 3) | ref->t3_low;
 206              		.loc 2 1272 0
 207 0038 0110D0E5 		ldrb	r1, [r0, #1]	@ zero_extendqisi2
 208 003c 0220D0E5 		ldrb	r2, [r0, #2]	@ zero_extendqisi2
1276:apps/rssi/main.c **** 		cr_t3 = (ref->t3_high << 3) | ref->t3_low;
 209              		.loc 2 1276 0
 210 0040 0230D3E5 		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 211 0044 07500CE2 		and	r5, ip, #7
1277:apps/rssi/main.c **** 		if (ia_t1 == cr_t1 && ia_t2 == cr_t2 && ia_t3 == cr_t3)
 212              		.loc 2 1277 0
 213 0048 ACC1A0E1 		mov	ip, ip, lsr #3
 214 004c A1015CE1 		cmp	ip, r1, lsr #3
1272:apps/rssi/main.c **** 		ia_t3 = (ref->t3_high << 3) | ref->t3_low;
 215              		.loc 2 1272 0
 216 0050 077001E2 		and	r7, r1, #7
1276:apps/rssi/main.c **** 		cr_t3 = (ref->t3_high << 3) | ref->t3_low;
 217              		.loc 2 1276 0
 218 0054 A342A0E1 		mov	r4, r3, lsr #5
1277:apps/rssi/main.c **** 		if (ia_t1 == cr_t1 && ia_t2 == cr_t2 && ia_t3 == cr_t3)
 219              		.loc 2 1277 0
 220 0058 0010A013 		movne	r1, #0
 221 005c 0110A003 		moveq	r1, #1
1271:apps/rssi/main.c **** 		ia_t2 = ref->t2;
 222              		.loc 2 1271 0
 223 0060 1F0002E2 		and	r0, r2, #31
 224              	.LVL13:
1275:apps/rssi/main.c **** 		cr_t2 = ref->t2;
 225              		.loc 2 1275 0
 226 0064 1F3003E2 		and	r3, r3, #31
1277:apps/rssi/main.c **** 		if (ia_t1 == cr_t1 && ia_t2 == cr_t2 && ia_t3 == cr_t3)
 227              		.loc 2 1277 0
 228 0068 030050E1 		cmp	r0, r3
 229 006c 0000A013 		movne	r0, #0
 230 0070 01000102 		andeq	r0, r1, #1
 231 0074 000050E3 		cmp	r0, #0
1272:apps/rssi/main.c **** 		ia_t3 = (ref->t3_high << 3) | ref->t3_low;
 232              		.loc 2 1272 0
 233 0078 A262A0E1 		mov	r6, r2, lsr #5
 234              	.LVL14:
1277:apps/rssi/main.c **** 		if (ia_t1 == cr_t1 && ia_t2 == cr_t2 && ia_t3 == cr_t3)
 235              		.loc 2 1277 0
 236 007c 0400000A 		beq	.L13
1277:apps/rssi/main.c **** 		if (ia_t1 == cr_t1 && ia_t2 == cr_t2 && ia_t3 == cr_t3)
 237              		.loc 2 1277 0 is_stmt 0 discriminator 1
 238 0080 870186E1 		orr	r0, r6, r7, asl #3
 239 0084 853184E1 		orr	r3, r4, r5, asl #3
 240 0088 033050E0 		subs	r3, r0, r3
 241 008c 000073E2 		rsbs	r0, r3, #0
 242 0090 0300B0E0 		adcs	r0, r0, r3
 243              	.LVL15:
 244              	.L13:
1282:apps/rssi/main.c **** }
 245              		.loc 2 1282 0 is_stmt 1
 246 0094 F000BDE8 		ldmfd	sp!, {r4, r5, r6, r7}
 247 0098 1EFF2FE1 		bx	lr
 248              	.L18:
 249              		.align	2
 250              	.L17:
 251 009c 00000000 		.word	.LANCHOR0
 252 00a0 00000000 		.word	rach_ra
 253 00a4 00000000 		.word	rach_ref
 254              		.cfi_endproc
 255              	.LFE133:
 257              		.section	.text.l1a_l23_rx_cb,"ax",%progbits
 258              		.align	2
 260              	l1a_l23_rx_cb:
 261              	.LFB141:
1283:apps/rssi/main.c **** 
1284:apps/rssi/main.c **** 
1285:apps/rssi/main.c **** /* note: called from IRQ context */
1286:apps/rssi/main.c **** static void rx_imm_ass(struct msgb *msg)
1287:apps/rssi/main.c **** {
1288:apps/rssi/main.c **** 	struct gsm48_imm_ass *ia = msgb_l3(msg);
1289:apps/rssi/main.c **** 
1290:apps/rssi/main.c **** 	if (gsm48_match_ra(&ia->req_ref)) {
1291:apps/rssi/main.c **** 		assign = ASSIGN_RESULT;
1292:apps/rssi/main.c **** 		ta = ia->timing_advance;
1293:apps/rssi/main.c **** 		rach = 0;
1294:apps/rssi/main.c **** 	}
1295:apps/rssi/main.c **** }
1296:apps/rssi/main.c **** 
1297:apps/rssi/main.c **** /* note: called from IRQ context */
1298:apps/rssi/main.c **** static void rx_imm_ass_ext(struct msgb *msg)
1299:apps/rssi/main.c **** {
1300:apps/rssi/main.c **** 	struct gsm48_imm_ass_ext *ia = msgb_l3(msg);
1301:apps/rssi/main.c **** 
1302:apps/rssi/main.c **** 	if (gsm48_match_ra(&ia->req_ref1)) {
1303:apps/rssi/main.c **** 		assign = ASSIGN_RESULT;
1304:apps/rssi/main.c **** 		ta = ia->timing_advance1;
1305:apps/rssi/main.c **** 		rach = 0;
1306:apps/rssi/main.c **** 	}
1307:apps/rssi/main.c **** 	if (gsm48_match_ra(&ia->req_ref2)) {
1308:apps/rssi/main.c **** 		assign = ASSIGN_RESULT;
1309:apps/rssi/main.c **** 		ta = ia->timing_advance2;
1310:apps/rssi/main.c **** 		rach = 0;
1311:apps/rssi/main.c **** 	}
1312:apps/rssi/main.c **** }
1313:apps/rssi/main.c **** 
1314:apps/rssi/main.c **** /* note: called from IRQ context */
1315:apps/rssi/main.c **** static void rx_imm_ass_rej(struct msgb *msg)
1316:apps/rssi/main.c **** {
1317:apps/rssi/main.c **** 	struct gsm48_imm_ass_rej *ia = msgb_l3(msg);
1318:apps/rssi/main.c **** 	struct gsm48_req_ref *req_ref;
1319:apps/rssi/main.c **** 	int i;
1320:apps/rssi/main.c **** 
1321:apps/rssi/main.c **** 	for (i = 0; i < 4; i++) {
1322:apps/rssi/main.c **** 		/* request reference */
1323:apps/rssi/main.c **** 		req_ref = (struct gsm48_req_ref *)
1324:apps/rssi/main.c **** 			(((uint8_t *)&ia->req_ref1) + i * 4);
1325:apps/rssi/main.c **** 		if (gsm48_match_ra(req_ref)) {
1326:apps/rssi/main.c **** 			assign = ASSIGN_REJECT;
1327:apps/rssi/main.c **** 			rach = 0;
1328:apps/rssi/main.c **** 		}
1329:apps/rssi/main.c **** 	}
1330:apps/rssi/main.c **** }
1331:apps/rssi/main.c **** 
1332:apps/rssi/main.c **** /* note: called from IRQ context */
1333:apps/rssi/main.c **** static void rx_pch_agch(struct msgb *msg)
1334:apps/rssi/main.c **** {
1335:apps/rssi/main.c **** 	struct gsm48_system_information_type_header *sih;
1336:apps/rssi/main.c **** 
1337:apps/rssi/main.c **** 	/* store SI */
1338:apps/rssi/main.c **** 	sih = msgb_l3(msg);
1339:apps/rssi/main.c **** 	switch (sih->system_information) {
1340:apps/rssi/main.c **** 	case GSM48_MT_RR_IMM_ASS:
1341:apps/rssi/main.c **** 		rx_imm_ass(msg);
1342:apps/rssi/main.c **** 		break;
1343:apps/rssi/main.c **** 	case GSM48_MT_RR_IMM_ASS_EXT:
1344:apps/rssi/main.c **** 		rx_imm_ass_ext(msg);
1345:apps/rssi/main.c **** 		break;
1346:apps/rssi/main.c **** 	case GSM48_MT_RR_IMM_ASS_REJ:
1347:apps/rssi/main.c **** 		rx_imm_ass_rej(msg);
1348:apps/rssi/main.c **** 		break;
1349:apps/rssi/main.c **** 	}
1350:apps/rssi/main.c **** }
1351:apps/rssi/main.c **** 
1352:apps/rssi/main.c **** /* note: called from IRQ context */
1353:apps/rssi/main.c **** static void rx_bcch(struct msgb *msg)
1354:apps/rssi/main.c **** {
1355:apps/rssi/main.c **** 	struct gsm48_system_information_type_header *sih;
1356:apps/rssi/main.c **** 
1357:apps/rssi/main.c **** 	/* store SI */
1358:apps/rssi/main.c **** 	sih = msgb_l3(msg);
1359:apps/rssi/main.c **** 	switch (sih->system_information) {
1360:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_1:
1361:apps/rssi/main.c **** 		memcpy(si_1, msgb_l3(msg), msgb_l3len(msg));
1362:apps/rssi/main.c **** 		break;
1363:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_2:
1364:apps/rssi/main.c **** 		memcpy(si_2, msgb_l3(msg), msgb_l3len(msg));
1365:apps/rssi/main.c **** 		break;
1366:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_2bis:
1367:apps/rssi/main.c **** 		memcpy(si_2bis, msgb_l3(msg), msgb_l3len(msg));
1368:apps/rssi/main.c **** 		break;
1369:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_2ter:
1370:apps/rssi/main.c **** 		memcpy(si_2ter, msgb_l3(msg), msgb_l3len(msg));
1371:apps/rssi/main.c **** 		break;
1372:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_3:
1373:apps/rssi/main.c **** 		memcpy(si_3, msgb_l3(msg), msgb_l3len(msg));
1374:apps/rssi/main.c **** 		break;
1375:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_4:
1376:apps/rssi/main.c **** 		memcpy(si_4, msgb_l3(msg), msgb_l3len(msg));
1377:apps/rssi/main.c **** 		break;
1378:apps/rssi/main.c **** 	}
1379:apps/rssi/main.c **** 	si_new = sih->system_information | 0x100;
1380:apps/rssi/main.c **** }
1381:apps/rssi/main.c **** 
1382:apps/rssi/main.c **** /* note: called from IRQ context */
1383:apps/rssi/main.c **** static void l1a_l23_tx(struct msgb *msg)
1384:apps/rssi/main.c **** {
1385:apps/rssi/main.c **** 	struct l1ctl_hdr *l1h = (struct l1ctl_hdr *) msg->l1h;
1386:apps/rssi/main.c **** 	struct l1ctl_pm_conf *pmr;
1387:apps/rssi/main.c **** 	struct l1ctl_info_dl *dl;
1388:apps/rssi/main.c **** 	struct l1ctl_fbsb_conf *sb;
1389:apps/rssi/main.c **** 	uint8_t chan_type, chan_ts, chan_ss;
1390:apps/rssi/main.c **** 	struct l1ctl_neigh_pm_ind *pm_ind;
1391:apps/rssi/main.c **** 	struct gsm_time tm;
1392:apps/rssi/main.c **** 
1393:apps/rssi/main.c **** 	switch (l1h->msg_type) {
1394:apps/rssi/main.c **** 	case L1CTL_PM_CONF:
1395:apps/rssi/main.c **** 		if (pm_mode == PM_SENT) {
1396:apps/rssi/main.c **** 			pmr = (struct l1ctl_pm_conf *) l1h->data;
1397:apps/rssi/main.c **** 			pm_meas[pm_count] = pmr->pm[0];
1398:apps/rssi/main.c **** 			pm_count++;
1399:apps/rssi/main.c **** 			pm_mode = PM_RESULT;
1400:apps/rssi/main.c **** 		}
1401:apps/rssi/main.c **** 		if (pm_mode == PM_RANGE_SENT) {
1402:apps/rssi/main.c **** 			for (pmr = (struct l1ctl_pm_conf *) l1h->data;
1403:apps/rssi/main.c **** 				(uint8_t *) pmr < msg->tail; pmr++) {
1404:apps/rssi/main.c **** 				if (!max || pm_spectrum[ntohs(pmr->band_arfcn) & 1023] < pmr->pm[0])
1405:apps/rssi/main.c **** 					pm_spectrum[ntohs(pmr->band_arfcn) & 1023] = pmr->pm[0];
1406:apps/rssi/main.c **** 			}
1407:apps/rssi/main.c **** 			if ((l1h->flags & L1CTL_F_DONE))
1408:apps/rssi/main.c **** 				pm_mode = PM_RANGE_RESULT;
1409:apps/rssi/main.c **** 		}
1410:apps/rssi/main.c **** 		l1s.tpu_offset_correction += 5000 / NUM_PM_UL;
1411:apps/rssi/main.c **** 		break;
1412:apps/rssi/main.c **** 	case L1CTL_FBSB_CONF:
1413:apps/rssi/main.c **** 		dl = (struct l1ctl_info_dl *) l1h->data;
1414:apps/rssi/main.c **** 		sb = (struct l1ctl_fbsb_conf *) dl->payload;
1415:apps/rssi/main.c **** 		if (sb->result == 0)
1416:apps/rssi/main.c **** 			sync_result = "ok";
1417:apps/rssi/main.c **** 		else
1418:apps/rssi/main.c **** 			sync_result = "error";
1419:apps/rssi/main.c **** 		bsic = sb->bsic;
1420:apps/rssi/main.c **** 		break;
1421:apps/rssi/main.c **** 	case L1CTL_DATA_IND:
1422:apps/rssi/main.c **** 		dl = (struct l1ctl_info_dl *) l1h->data;
1423:apps/rssi/main.c **** 		msg->l2h = dl->payload;
1424:apps/rssi/main.c **** 		rsl_dec_chan_nr(dl->chan_nr, &chan_type, &chan_ss, &chan_ts);
1425:apps/rssi/main.c **** 
1426:apps/rssi/main.c **** 		power = dl->rx_level;
1427:apps/rssi/main.c **** 		if (dl->fire_crc >= 2) {
1428:apps/rssi/main.c **** 			if (chan_type == RSL_CHAN_BCCH)
1429:apps/rssi/main.c **** 				si_new = 0x1ff; /* error frame indication */
1430:apps/rssi/main.c **** 			break; /* free, but don't send to sercom */
1431:apps/rssi/main.c **** 		}
1432:apps/rssi/main.c **** 
1433:apps/rssi/main.c **** 		switch (chan_type) {
1434:apps/rssi/main.c **** 		case RSL_CHAN_BCCH:
1435:apps/rssi/main.c **** 			msg->l3h = msg->l2h;
1436:apps/rssi/main.c **** 			rx_bcch(msg);
1437:apps/rssi/main.c **** 			break;
1438:apps/rssi/main.c **** 		case RSL_CHAN_PCH_AGCH:
1439:apps/rssi/main.c **** 			msg->l3h = msg->l2h;
1440:apps/rssi/main.c **** 			rx_pch_agch(msg);
1441:apps/rssi/main.c **** 			break;
1442:apps/rssi/main.c **** 		}
1443:apps/rssi/main.c **** 		sercomm_sendmsg(SC_DLCI_L1A_L23, msg);
1444:apps/rssi/main.c **** 		return; /* msg is freed by sercom */
1445:apps/rssi/main.c **** 	case L1CTL_NEIGH_PM_IND:
1446:apps/rssi/main.c **** 		for (pm_ind = (struct l1ctl_neigh_pm_ind *) l1h->data;
1447:apps/rssi/main.c **** 			(uint8_t *) pm_ind < msg->tail; pm_ind++) {
1448:apps/rssi/main.c **** 			ul_levels[pm_ind->tn] = pm_ind->pm[0];
1449:apps/rssi/main.c **** 			/* hold max only, if max enabled and level is lower */
1450:apps/rssi/main.c **** 			if (!max || ul_levels[pm_ind->tn] > ul_max[pm_ind->tn])
1451:apps/rssi/main.c **** 				ul_max[pm_ind->tn] = ul_levels[pm_ind->tn];
1452:apps/rssi/main.c **** 			if (pm_ind->tn == 7)
1453:apps/rssi/main.c **** 				ul_new = 1;
1454:apps/rssi/main.c **** 		}
1455:apps/rssi/main.c **** 		break;
1456:apps/rssi/main.c **** 	case L1CTL_RACH_CONF:
1457:apps/rssi/main.c **** 		dl = (struct l1ctl_info_dl *) l1h->data;
1458:apps/rssi/main.c **** 		gsm_fn2gsmtime(&tm, ntohl(dl->frame_nr));
1459:apps/rssi/main.c **** 		rach_ref.t1 = tm.t1;
1460:apps/rssi/main.c **** 		rach_ref.t2 = tm.t2;
1461:apps/rssi/main.c **** 		rach_ref.t3_low = tm.t3 & 0x7;
1462:apps/rssi/main.c **** 		rach_ref.t3_high = tm.t3 >> 3;
1463:apps/rssi/main.c **** 		break;
1464:apps/rssi/main.c **** 	}
1465:apps/rssi/main.c **** 
1466:apps/rssi/main.c **** 	msgb_free(msg);
1467:apps/rssi/main.c **** 
1468:apps/rssi/main.c **** }
1469:apps/rssi/main.c **** 
1470:apps/rssi/main.c **** static void console_rx_cb(uint8_t dlci, struct msgb *msg)
1471:apps/rssi/main.c **** {
1472:apps/rssi/main.c **** 	if (dlci != SC_DLCI_CONSOLE) {
1473:apps/rssi/main.c **** 		printf("Message for unknown DLCI %u\n", dlci);
1474:apps/rssi/main.c **** 		return;
1475:apps/rssi/main.c **** 	}
1476:apps/rssi/main.c **** 
1477:apps/rssi/main.c **** 	printf("Message on console DLCI: '%s'\n", msg->data);
1478:apps/rssi/main.c **** 	msgb_free(msg);
1479:apps/rssi/main.c **** }
1480:apps/rssi/main.c **** 
1481:apps/rssi/main.c **** static void l1a_l23_rx_cb(uint8_t dlci, struct msgb *msg)
1482:apps/rssi/main.c **** {
 262              		.loc 2 1482 0
 263              		.cfi_startproc
 264              		@ Function supports interworking.
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267              	.LVL16:
 268 0000 38402DE9 		stmfd	sp!, {r3, r4, r5, lr}
 269              	.LCFI4:
 270              		.cfi_def_cfa_offset 16
 271              		.cfi_offset 3, -16
 272              		.cfi_offset 4, -12
 273              		.cfi_offset 5, -8
 274              		.cfi_offset 14, -4
 275              		.loc 2 1482 0
 276 0004 0030A0E1 		mov	r3, r0
 277 0008 0150A0E1 		mov	r5, r1
1483:apps/rssi/main.c **** 	int i;
1484:apps/rssi/main.c **** 	printf("l1a_l23_rx_cb (DLCI %d): ", dlci);
 278              		.loc 2 1484 0
 279 000c 3C009FE5 		ldr	r0, .L23
 280              	.LVL17:
 281 0010 0310A0E1 		mov	r1, r3
 282              	.LVL18:
 283 0014 FEFFFFEB 		bl	printf
 284              	.LVL19:
1485:apps/rssi/main.c **** 	for (i = 0; i < msg->len; i++)
 285              		.loc 2 1485 0
 286 0018 0040A0E3 		mov	r4, #0
 287              	.LVL20:
 288              	.L20:
 289              		.loc 2 1485 0 is_stmt 0 discriminator 1
 290 001c B633D5E1 		ldrh	r3, [r5, #54]
 291 0020 030054E1 		cmp	r4, r3
 292 0024 050000AA 		bge	.L22
1486:apps/rssi/main.c **** 		printf("%02x ", msg->data[i]);
 293              		.loc 2 1486 0 is_stmt 1 discriminator 2
 294 0028 403095E5 		ldr	r3, [r5, #64]
 295 002c 20009FE5 		ldr	r0, .L23+4
 296 0030 0410D3E7 		ldrb	r1, [r3, r4]	@ zero_extendqisi2
 297 0034 FEFFFFEB 		bl	printf
 298              	.LVL21:
1485:apps/rssi/main.c **** 	for (i = 0; i < msg->len; i++)
 299              		.loc 2 1485 0 discriminator 2
 300 0038 014084E2 		add	r4, r4, #1
 301              	.LVL22:
 302 003c F6FFFFEA 		b	.L20
 303              	.L22:
1487:apps/rssi/main.c **** 	puts("\n");
 304              		.loc 2 1487 0
 305 0040 10009FE5 		ldr	r0, .L23+8
 306 0044 FEFFFFEB 		bl	puts
 307              	.LVL23:
1488:apps/rssi/main.c **** }
 308              		.loc 2 1488 0
 309 0048 3840BDE8 		ldmfd	sp!, {r3, r4, r5, lr}
 310              	.LVL24:
 311 004c 1EFF2FE1 		bx	lr
 312              	.L24:
 313              		.align	2
 314              	.L23:
 315 0050 00000000 		.word	.LC0
 316 0054 1A000000 		.word	.LC1
 317 0058 20000000 		.word	.LC2
 318              		.cfi_endproc
 319              	.LFE141:
 321              		.global	__aeabi_uidiv
 322              		.global	__aeabi_idiv
 323              		.global	__aeabi_idivmod
 324              		.section	.text.refresh_display,"ax",%progbits
 325              		.align	2
 327              	refresh_display:
 328              	.LFB110:
 172:apps/rssi/main.c **** {
 329              		.loc 2 172 0
 330              		.cfi_startproc
 331              		@ Function supports interworking.
 332              		@ args = 0, pretend = 0, frame = 32
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334 0000 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 335              	.LCFI5:
 336              		.cfi_def_cfa_offset 36
 337              		.cfi_offset 4, -36
 338              		.cfi_offset 5, -32
 339              		.cfi_offset 6, -28
 340              		.cfi_offset 7, -24
 341              		.cfi_offset 8, -20
 342              		.cfi_offset 9, -16
 343              		.cfi_offset 10, -12
 344              		.cfi_offset 11, -8
 345              		.cfi_offset 14, -4
 346              	.LBB341:
 347              	.LBB342:
  56:include/fb/framebuffer.h **** 	framebuffer->clear();
 348              		.loc 1 56 0
 349 0004 AC4F9FE5 		ldr	r4, .L203
 350              	.LBE342:
 351              	.LBE341:
 174:apps/rssi/main.c **** 	int bat = battery_info.battery_percent;
 352              		.loc 2 174 0
 353 0008 AC7F9FE5 		ldr	r7, .L203+4
 354              	.LBB345:
 355              	.LBB343:
  56:include/fb/framebuffer.h **** 	framebuffer->clear();
 356              		.loc 1 56 0
 357 000c 003094E5 		ldr	r3, [r4]
 358              	.LBE343:
 359              	.LBE345:
 172:apps/rssi/main.c **** {
 360              		.loc 2 172 0
 361 0010 2CD04DE2 		sub	sp, sp, #44
 362              	.LCFI6:
 363              		.cfi_def_cfa_offset 80
 174:apps/rssi/main.c **** 	int bat = battery_info.battery_percent;
 364              		.loc 2 174 0
 365 0014 106097E5 		ldr	r6, [r7, #16]
 366              	.LVL25:
 180:apps/rssi/main.c **** 	if (mode != MODE_SPECTRUM && !(mode == MODE_SYNC && cursor < 0)) {
 367              		.loc 2 180 0
 368 0018 A05F9FE5 		ldr	r5, .L203+8
 369              	.LBB346:
 370              	.LBB344:
  56:include/fb/framebuffer.h **** 	framebuffer->clear();
 371              		.loc 1 56 0
 372 001c 0CC093E5 		ldr	ip, [r3, #12]
 373 0020 0FE0A0E1 		mov	lr, pc
 374 0024 1CFF2FE1 		bx	ip
 375              	.LVL26:
 376              	.LBE344:
 377              	.LBE346:
 378              	.LBB347:
 379              	.LBB348:
  83:include/fb/framebuffer.h **** }
  84:include/fb/framebuffer.h **** 
  85:include/fb/framebuffer.h **** static inline void
  86:include/fb/framebuffer.h **** fb_setfg(uint32_t color){
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
  88:include/fb/framebuffer.h **** }
  89:include/fb/framebuffer.h **** 
  90:include/fb/framebuffer.h **** static inline void
  91:include/fb/framebuffer.h **** fb_setbg(uint32_t color){
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 380              		.loc 1 92 0
 381 0028 003094E5 		ldr	r3, [r4]
 382 002c FF24E0E3 		mvn	r2, #-16777216
 383 0030 2C2083E5 		str	r2, [r3, #44]
 384              	.LBE348:
 385              	.LBE347:
 180:apps/rssi/main.c **** 	if (mode != MODE_SPECTRUM && !(mode == MODE_SYNC && cursor < 0)) {
 386              		.loc 2 180 0
 387 0034 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 388 0038 010052E3 		cmp	r2, #1
 389 003c 5E00000A 		beq	.L26
 180:apps/rssi/main.c **** 	if (mode != MODE_SPECTRUM && !(mode == MODE_SYNC && cursor < 0)) {
 390              		.loc 2 180 0 is_stmt 0 discriminator 1
 391 0040 030052E3 		cmp	r2, #3
 392 0044 0300001A 		bne	.L27
 393 0048 742F9FE5 		ldr	r2, .L203+12
 394 004c 002092E5 		ldr	r2, [r2]
 395 0050 000052E3 		cmp	r2, #0
 396 0054 580000BA 		blt	.L26
 397              	.L27:
 398              	.LVL27:
 399              	.LBB349:
 400              	.LBB350:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 401              		.loc 1 87 0 is_stmt 1
 402 0058 FF20A0E3 		mov	r2, #255
 403 005c 282083E5 		str	r2, [r3, #40]
 404              	.LVL28:
 405              	.LBE350:
 406              	.LBE349:
 407              	.LBB351:
 408              	.LBB352:
  93:include/fb/framebuffer.h **** }
  94:include/fb/framebuffer.h **** 
  95:include/fb/framebuffer.h **** static inline void
  96:include/fb/framebuffer.h **** fb_setfont(enum fb_font_id fid){
  97:include/fb/framebuffer.h **** 	framebuffer->font = fid;
 409              		.loc 1 97 0
 410 0060 0020A0E3 		mov	r2, #0
 411 0064 3020C3E5 		strb	r2, [r3, #48]
 412              	.LVL29:
 413              	.LBE352:
 414              	.LBE351:
 415              	.LBB353:
 416              	.LBB354:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 417              		.loc 1 81 0
 418 0068 B422C3E1 		strh	r2, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 419              		.loc 1 82 0
 420 006c 0720A0E3 		mov	r2, #7
 421 0070 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 422              	.LBE354:
 423              	.LBE353:
 184:apps/rssi/main.c **** 		fb_putstr("vadimbetman RSSI", -1);
 424              		.loc 2 184 0
 425 0074 0010E0E3 		mvn	r1, #0
 426 0078 480F9FE5 		ldr	r0, .L203+16
 427 007c FEFFFFEB 		bl	fb_putstr
 428              	.LVL30:
 429              	.LBB355:
 430              	.LBB356:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 431              		.loc 1 87 0
 432 0080 003094E5 		ldr	r3, [r4]
 433 0084 402F9FE5 		ldr	r2, .L203+20
 434              	.LBE356:
 435              	.LBE355:
 187:apps/rssi/main.c **** 		fb_gotoxy(framebuffer->width - 15, 8);
 436              		.loc 2 187 0
 437 0088 B012D3E1 		ldrh	r1, [r3, #32]
 438              	.LBB358:
 439              	.LBB357:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 440              		.loc 1 87 0
 441 008c 282083E5 		str	r2, [r3, #40]
 442              	.LVL31:
 443              	.LBE357:
 444              	.LBE358:
 445              	.LBB359:
 446              	.LBB360:
 447              		.loc 1 97 0
 448 0090 0320A0E3 		mov	r2, #3
 449 0094 3020C3E5 		strb	r2, [r3, #48]
 450              	.LBE360:
 451              	.LBE359:
 187:apps/rssi/main.c **** 		fb_gotoxy(framebuffer->width - 15, 8);
 452              		.loc 2 187 0
 453 0098 0F2041E2 		sub	r2, r1, #15
 454              	.LBB361:
 455              	.LBB362:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 456              		.loc 1 81 0
 457 009c B422C3E1 		strh	r2, [r3, #36]	@ movhi
 458              	.LBE362:
 459              	.LBE361:
 188:apps/rssi/main.c **** 		if (bat >= 100 && (battery_info.flags & BATTERY_CHG_ENABLED)
 460              		.loc 2 188 0
 461 00a0 630056E3 		cmp	r6, #99
 462              	.LBB364:
 463              	.LBB363:
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 464              		.loc 1 82 0
 465 00a4 0820A0E3 		mov	r2, #8
 466 00a8 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 467              	.LBE363:
 468              	.LBE364:
 188:apps/rssi/main.c **** 		if (bat >= 100 && (battery_info.flags & BATTERY_CHG_ENABLED)
 469              		.loc 2 188 0
 470 00ac 050000DA 		ble	.L28
 189:apps/rssi/main.c **** 		 && !(battery_info.flags & BATTERY_CHARGING))
 471              		.loc 2 189 0 discriminator 1
 472 00b0 0030D7E5 		ldrb	r3, [r7]	@ zero_extendqisi2
 473 00b4 063003E2 		and	r3, r3, #6
 474 00b8 020053E3 		cmp	r3, #2
 190:apps/rssi/main.c **** 			fb_putstr("@HHBC", framebuffer->width);
 475              		.loc 2 190 0 discriminator 1
 476 00bc 0C0F9F05 		ldreq	r0, .L203+24
 189:apps/rssi/main.c **** 		 && !(battery_info.flags & BATTERY_CHARGING))
 477              		.loc 2 189 0 discriminator 1
 478 00c0 0500001A 		bne	.L29
 479 00c4 110000EA 		b	.L191
 480              	.L28:
 192:apps/rssi/main.c **** 			sprintf(text, "@%c%c%cC", (bat >= 30) ? 'B':'A',
 481              		.loc 2 192 0
 482 00c8 1D0056E3 		cmp	r6, #29
 483 00cc 4120A0D3 		movle	r2, #65
 484 00d0 B60300DA 		ble	.L31
 192:apps/rssi/main.c **** 			sprintf(text, "@%c%c%cC", (bat >= 30) ? 'B':'A',
 485              		.loc 2 192 0 is_stmt 0 discriminator 3
 486 00d4 3B0056E3 		cmp	r6, #59
 487 00d8 B30300DA 		ble	.L123
 488              	.L29:
 192:apps/rssi/main.c **** 			sprintf(text, "@%c%c%cC", (bat >= 30) ? 'B':'A',
 489              		.loc 2 192 0 discriminator 6
 490 00dc 4230A0E3 		mov	r3, #66
 491 00e0 590056E3 		cmp	r6, #89
 492 00e4 0320A0E1 		mov	r2, r3
 493 00e8 0310A0C1 		movgt	r1, r3
 494              	.LVL32:
 495 00ec 000000CA 		bgt	.L32
 496              	.L121:
 192:apps/rssi/main.c **** 			sprintf(text, "@%c%c%cC", (bat >= 30) ? 'B':'A',
 497              		.loc 2 192 0 discriminator 8
 498 00f0 4110A0E3 		mov	r1, #65
 499              	.L32:
 192:apps/rssi/main.c **** 			sprintf(text, "@%c%c%cC", (bat >= 30) ? 'B':'A',
 500              		.loc 2 192 0 discriminator 9
 501 00f4 00108DE5 		str	r1, [sp]
 502              	.LVL33:
 503 00f8 18008DE2 		add	r0, sp, #24
 504 00fc D01E9FE5 		ldr	r1, .L203+28
 505 0100 FEFFFFEB 		bl	sprintf
 506              	.LVL34:
 194:apps/rssi/main.c **** 			fb_putstr(text, framebuffer->width);
 507              		.loc 2 194 0 is_stmt 1 discriminator 9
 508 0104 003094E5 		ldr	r3, [r4]
 509 0108 B012D3E1 		ldrh	r1, [r3, #32]
 510 010c 18008DE2 		add	r0, sp, #24
 511              	.L191:
 512 0110 FEFFFFEB 		bl	fb_putstr
 513              	.LVL35:
 514              	.LBB365:
 515              	.LBB366:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 516              		.loc 1 81 0 discriminator 9
 517 0114 003094E5 		ldr	r3, [r4]
 518 0118 0020A0E3 		mov	r2, #0
 519 011c B422C3E1 		strh	r2, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 520              		.loc 1 82 0 discriminator 9
 521 0120 0820A0E3 		mov	r2, #8
 522 0124 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 523              	.LBE366:
 524              	.LBE365:
 197:apps/rssi/main.c **** 		sprintf(text, "%c%cE%c%c", (power >= 40) ? 'D':'G',
 525              		.loc 2 197 0 discriminator 9
 526 0128 A83E9FE5 		ldr	r3, .L203+32
 527 012c 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 528 0130 270053E3 		cmp	r3, #39
 529 0134 0700008A 		bhi	.L125
 197:apps/rssi/main.c **** 		sprintf(text, "%c%cE%c%c", (power >= 40) ? 'D':'G',
 530              		.loc 2 197 0 is_stmt 0 discriminator 3
 531 0138 090053E3 		cmp	r3, #9
 532 013c 4710A093 		movls	r1, #71
 533 0140 4720A0E3 		mov	r2, #71
 534 0144 0130A091 		movls	r3, r1
 535 0148 4610A083 		movhi	r1, #70
 536 014c 4430A083 		movhi	r3, #68
 537 0150 0200A0E1 		mov	r0, r2
 538 0154 030000EA 		b	.L33
 539              	.L125:
 197:apps/rssi/main.c **** 		sprintf(text, "%c%cE%c%c", (power >= 40) ? 'D':'G',
 540              		.loc 2 197 0
 541 0158 4610A0E3 		mov	r1, #70
 542 015c 4430A0E3 		mov	r3, #68
 543 0160 0320A0E1 		mov	r2, r3
 544 0164 0100A0E1 		mov	r0, r1
 545              	.L33:
 197:apps/rssi/main.c **** 		sprintf(text, "%c%cE%c%c", (power >= 40) ? 'D':'G',
 546              		.loc 2 197 0 discriminator 12
 547 0168 00108DE5 		str	r1, [sp]
 548 016c 04008DE5 		str	r0, [sp, #4]
 549 0170 641E9FE5 		ldr	r1, .L203+36
 550 0174 18008DE2 		add	r0, sp, #24
 551 0178 FEFFFFEB 		bl	sprintf
 552              	.LVL36:
 200:apps/rssi/main.c **** 		fb_putstr(text, framebuffer->width);
 553              		.loc 2 200 0 is_stmt 1 discriminator 12
 554 017c 003094E5 		ldr	r3, [r4]
 555 0180 18008DE2 		add	r0, sp, #24
 556 0184 B012D3E1 		ldrh	r1, [r3, #32]
 557 0188 FEFFFFEB 		bl	fb_putstr
 558              	.LVL37:
 559              	.LBB367:
 560              	.LBB368:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 561              		.loc 1 87 0 discriminator 12
 562 018c 003094E5 		ldr	r3, [r4]
 563              	.LBE368:
 564              	.LBE367:
 203:apps/rssi/main.c **** 		fb_boxto(framebuffer->width - 1, 10);
 565              		.loc 2 203 0 discriminator 12
 566 0190 B002D3E1 		ldrh	r0, [r3, #32]
 567              	.LBB371:
 568              	.LBB369:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 569              		.loc 1 87 0 discriminator 12
 570 0194 FF2CA0E3 		mov	r2, #65280
 571              	.LBE369:
 572              	.LBE371:
 203:apps/rssi/main.c **** 		fb_boxto(framebuffer->width - 1, 10);
 573              		.loc 2 203 0 discriminator 12
 574 0198 010040E2 		sub	r0, r0, #1
 575              	.LBB372:
 576              	.LBB370:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 577              		.loc 1 87 0 discriminator 12
 578 019c 282083E5 		str	r2, [r3, #40]
 579              	.LVL38:
 580              	.LBE370:
 581              	.LBE372:
 582              	.LBB373:
 583              	.LBB374:
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 584              		.loc 1 82 0 discriminator 12
 585 01a0 0A10A0E3 		mov	r1, #10
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 586              		.loc 1 81 0 discriminator 12
 587 01a4 0020A0E3 		mov	r2, #0
 588              	.LBE374:
 589              	.LBE373:
 203:apps/rssi/main.c **** 		fb_boxto(framebuffer->width - 1, 10);
 590              		.loc 2 203 0 discriminator 12
 591 01a8 0008A0E1 		mov	r0, r0, asl #16
 592              	.LBB376:
 593              	.LBB375:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 594              		.loc 1 81 0 discriminator 12
 595 01ac B422C3E1 		strh	r2, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 596              		.loc 1 82 0 discriminator 12
 597 01b0 B612C3E1 		strh	r1, [r3, #38]	@ movhi
 598              	.LBE375:
 599              	.LBE376:
 203:apps/rssi/main.c **** 		fb_boxto(framebuffer->width - 1, 10);
 600              		.loc 2 203 0 discriminator 12
 601 01b4 2008A0E1 		mov	r0, r0, lsr #16
 602 01b8 FEFFFFEB 		bl	fb_boxto
 603              	.LVL39:
 604              	.L26:
 605              	.LBB377:
 606              	.LBB378:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 607              		.loc 1 87 0
 608 01bc 003094E5 		ldr	r3, [r4]
 609              	.LBE378:
 610              	.LBE377:
 611              	.LBB381:
 612              	.LBB382:
 613              		.loc 1 97 0
 614 01c0 0210A0E3 		mov	r1, #2
 615 01c4 3010C3E5 		strb	r1, [r3, #48]
 616              	.LBE382:
 617              	.LBE381:
 209:apps/rssi/main.c **** 	if (mode == MODE_RACH) {
 618              		.loc 2 209 0
 619 01c8 0410D5E5 		ldrb	r1, [r5, #4]	@ zero_extendqisi2
 620              	.LBB383:
 621              	.LBB379:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 622              		.loc 1 87 0
 623 01cc 0020A0E3 		mov	r2, #0
 624              	.LBE379:
 625              	.LBE383:
 209:apps/rssi/main.c **** 	if (mode == MODE_RACH) {
 626              		.loc 2 209 0
 627 01d0 040051E3 		cmp	r1, #4
 628              	.LBB384:
 629              	.LBB380:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 630              		.loc 1 87 0
 631 01d4 282083E5 		str	r2, [r3, #40]
 632              	.LVL40:
 633              	.LBE380:
 634              	.LBE384:
 209:apps/rssi/main.c **** 	if (mode == MODE_RACH) {
 635              		.loc 2 209 0
 636 01d8 4400001A 		bne	.L35
 637              	.LBB385:
 638              	.LBB386:
 639              	.LBB387:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 640              		.loc 1 81 0
 641 01dc B422C3E1 		strh	r2, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 642              		.loc 1 82 0
 643 01e0 1C20A0E3 		mov	r2, #28
 644              	.LBE387:
 645              	.LBE386:
 210:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - rach_when;
 646              		.loc 2 210 0
 647 01e4 F41D9FE5 		ldr	r1, .L203+40
 648              	.LBB389:
 649              	.LBB388:
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 650              		.loc 1 82 0
 651 01e8 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 652              	.LBE388:
 653              	.LBE389:
 213:apps/rssi/main.c **** 		switch (assign) {
 654              		.loc 2 213 0
 655 01ec F02D9FE5 		ldr	r2, .L203+44
 210:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - rach_when;
 656              		.loc 2 210 0
 657 01f0 008091E5 		ldr	r8, [r1]
 213:apps/rssi/main.c **** 		switch (assign) {
 658              		.loc 2 213 0
 659 01f4 0030D2E5 		ldrb	r3, [r2]	@ zero_extendqisi2
 210:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - rach_when;
 660              		.loc 2 210 0
 661 01f8 E81D9FE5 		ldr	r1, .L203+48
 662 01fc 0290A0E1 		mov	r9, r2
 663 0200 007091E5 		ldr	r7, [r1]
 664              	.LVL41:
 213:apps/rssi/main.c **** 		switch (assign) {
 665              		.loc 2 213 0
 666 0204 040053E3 		cmp	r3, #4
 667 0208 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 668 020c 220000EA 		b	.L36
 669              	.L38:
 670 0210 24020000 		.word	.L37
 671 0214 88020000 		.word	.L39
 672 0218 2C020000 		.word	.L40
 673 021c 80020000 		.word	.L41
 674 0220 90020000 		.word	.L42
 675              	.L37:
 215:apps/rssi/main.c **** 			fb_putstr("Rach sent...", -1);
 676              		.loc 2 215 0
 677 0224 C00D9FE5 		ldr	r0, .L203+52
 678 0228 190000EA 		b	.L192
 679              	.L40:
 218:apps/rssi/main.c **** 			sprintf(text, "TA = %d", ta);
 680              		.loc 2 218 0
 681 022c BC6D9FE5 		ldr	r6, .L203+56
 682              	.LVL42:
 683 0230 BC1D9FE5 		ldr	r1, .L203+60
 684 0234 0020D6E5 		ldrb	r2, [r6]	@ zero_extendqisi2
 685 0238 18008DE2 		add	r0, sp, #24
 686 023c FEFFFFEB 		bl	sprintf
 687              	.LVL43:
 219:apps/rssi/main.c **** 			fb_putstr(text, -1);
 688              		.loc 2 219 0
 689 0240 0010E0E3 		mvn	r1, #0
 690 0244 18008DE2 		add	r0, sp, #24
 691 0248 FEFFFFEB 		bl	fb_putstr
 692              	.LVL44:
 693              	.LBB390:
 694              	.LBB391:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 695              		.loc 1 81 0
 696 024c 003094E5 		ldr	r3, [r4]
 697 0250 0020A0E3 		mov	r2, #0
 698 0254 B422C3E1 		strh	r2, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 699              		.loc 1 82 0
 700 0258 2420A0E3 		mov	r2, #36
 701 025c B622C3E1 		strh	r2, [r3, #38]	@ movhi
 702              	.LBE391:
 703              	.LBE390:
 221:apps/rssi/main.c **** 			sprintf(text, "(%dm)", ta * 554);
 704              		.loc 2 221 0
 705 0260 0030D6E5 		ldrb	r3, [r6]	@ zero_extendqisi2
 706 0264 8C2D9FE5 		ldr	r2, .L203+64
 707 0268 18008DE2 		add	r0, sp, #24
 708 026c 881D9FE5 		ldr	r1, .L203+68
 709 0270 930202E0 		mul	r2, r3, r2
 710 0274 FEFFFFEB 		bl	sprintf
 711              	.LVL45:
 222:apps/rssi/main.c **** 			fb_putstr(text, -1);
 712              		.loc 2 222 0
 713 0278 18008DE2 		add	r0, sp, #24
 714 027c 040000EA 		b	.L192
 715              	.LVL46:
 716              	.L41:
 225:apps/rssi/main.c **** 			fb_putstr("Rejected!", -1);
 717              		.loc 2 225 0
 718 0280 780D9FE5 		ldr	r0, .L203+72
 719 0284 020000EA 		b	.L192
 720              	.L39:
 228:apps/rssi/main.c **** 			fb_putstr("TX disabled", -1);
 721              		.loc 2 228 0
 722 0288 740D9FE5 		ldr	r0, .L203+76
 723 028c 000000EA 		b	.L192
 724              	.L42:
 231:apps/rssi/main.c **** 			fb_putstr("Timeout", -1);
 725              		.loc 2 231 0
 726 0290 700D9FE5 		ldr	r0, .L203+80
 727              	.LVL47:
 728              	.L192:
 729 0294 0010E0E3 		mvn	r1, #0
 730 0298 FEFFFFEB 		bl	fb_putstr
 731              	.LVL48:
 732              	.L36:
 234:apps/rssi/main.c **** 		switch (assign) {
 733              		.loc 2 234 0
 734 029c 0030D9E5 		ldrb	r3, [r9]	@ zero_extendqisi2
 735 02a0 023043E2 		sub	r3, r3, #2
 736 02a4 010053E3 		cmp	r3, #1
 737 02a8 1000008A 		bhi	.L35
 738              	.LVL49:
 739              	.LBB392:
 740              	.LBB393:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 741              		.loc 1 81 0
 742 02ac 003094E5 		ldr	r3, [r4]
 743 02b0 0020A0E3 		mov	r2, #0
 744 02b4 B422C3E1 		strh	r2, [r3, #36]	@ movhi
 745              	.LBE393:
 746              	.LBE392:
 210:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - rach_when;
 747              		.loc 2 210 0
 748 02b8 087067E0 		rsb	r7, r7, r8
 749              	.LVL50:
 750              	.LBB396:
 751              	.LBB394:
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 752              		.loc 1 82 0
 753 02bc 2C20A0E3 		mov	r2, #44
 754              	.LBE394:
 755              	.LBE396:
 238:apps/rssi/main.c **** 			sprintf(text, "Delay:%ldms", elapsed * 1000 / HZ);
 756              		.loc 2 238 0
 757 02c0 FA0FA0E3 		mov	r0, #1000
 758              	.LBB397:
 759              	.LBB395:
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 760              		.loc 1 82 0
 761 02c4 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 762              	.LBE395:
 763              	.LBE397:
 238:apps/rssi/main.c **** 			sprintf(text, "Delay:%ldms", elapsed * 1000 / HZ);
 764              		.loc 2 238 0
 765 02c8 6410A0E3 		mov	r1, #100
 766 02cc 970000E0 		mul	r0, r7, r0
 767 02d0 FEFFFFEB 		bl	__aeabi_uidiv
 768              	.LVL51:
 769 02d4 301D9FE5 		ldr	r1, .L203+84
 770 02d8 0020A0E1 		mov	r2, r0
 771 02dc 18008DE2 		add	r0, sp, #24
 772 02e0 FEFFFFEB 		bl	sprintf
 773              	.LVL52:
 239:apps/rssi/main.c **** 			fb_putstr(text, -1);
 774              		.loc 2 239 0
 775 02e4 18008DE2 		add	r0, sp, #24
 776 02e8 0010E0E3 		mvn	r1, #0
 777 02ec FEFFFFEB 		bl	fb_putstr
 778              	.LVL53:
 779              	.L35:
 780              	.LBE385:
 247:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor < 0) {
 781              		.loc 2 247 0
 782 02f0 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 783 02f4 030053E3 		cmp	r3, #3
 784 02f8 8F00001A 		bne	.L44
 247:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor < 0) {
 785              		.loc 2 247 0 is_stmt 0 discriminator 1
 786 02fc C03C9FE5 		ldr	r3, .L203+12
 787 0300 003093E5 		ldr	r3, [r3]
 788 0304 000053E3 		cmp	r3, #0
 789 0308 8B0000AA 		bge	.L44
 790              	.LBB398:
 249:apps/rssi/main.c **** 		int offset = (framebuffer->width - 96) >> 1;
 791              		.loc 2 249 0 is_stmt 1
 792 030c 003094E5 		ldr	r3, [r4]
 793 0310 B062D3E1 		ldrh	r6, [r3, #32]
 250:apps/rssi/main.c **** 		int height = framebuffer->height - 25;
 794              		.loc 2 250 0
 795 0314 B282D3E1 		ldrh	r8, [r3, #34]
 249:apps/rssi/main.c **** 		int offset = (framebuffer->width - 96) >> 1;
 796              		.loc 2 249 0
 797 0318 606046E2 		sub	r6, r6, #96
 798 031c C660A0E1 		mov	r6, r6, asr #1
 799              	.LVL54:
 250:apps/rssi/main.c **** 		int height = framebuffer->height - 25;
 800              		.loc 2 250 0
 801 0320 198048E2 		sub	r8, r8, #25
 802              	.LVL55:
 803              	.LBB399:
 804              	.LBB400:
 805              		.loc 1 97 0
 806 0324 0070A0E3 		mov	r7, #0
 807 0328 036086E2 		add	r6, r6, #3
 808              	.LVL56:
 809              	.LBE400:
 810              	.LBE399:
 267:apps/rssi/main.c **** 			fb_gotoxy(offset + 3 + 12 * i, height + 10);
 811              		.loc 2 267 0
 812 032c 0A9088E2 		add	r9, r8, #10
 813 0330 0668A0E1 		mov	r6, r6, asl #16
 814              	.LVL57:
 815 0334 0998A0E1 		mov	r9, r9, asl #16
 816              	.LBB402:
 817              	.LBB401:
 818              		.loc 1 97 0
 819 0338 3070C3E5 		strb	r7, [r3, #48]
 820              	.LVL58:
 821              	.LBE401:
 822              	.LBE402:
 260:apps/rssi/main.c **** 			l = (max) ? ul_max[tn] : ul_levels[tn];
 823              		.loc 2 260 0
 824 033c CCBC9FE5 		ldr	fp, .L203+88
 825 0340 2668A0E1 		mov	r6, r6, lsr #16
 267:apps/rssi/main.c **** 			fb_gotoxy(offset + 3 + 12 * i, height + 10);
 826              		.loc 2 267 0
 827 0344 2998A0E1 		mov	r9, r9, lsr #16
 828              	.LVL59:
 829              	.L51:
 830              	.LBB403:
 831              	.LBB404:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 832              		.loc 1 92 0
 833 0348 002094E5 		ldr	r2, [r4]
 834 034c FF14E0E3 		mvn	r1, #-16777216
 835              	.LBE404:
 836              	.LBE403:
 254:apps/rssi/main.c **** 			if (uplink)
 837              		.loc 2 254 0
 838 0350 083095E5 		ldr	r3, [r5, #8]
 839              	.LBB406:
 840              	.LBB405:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 841              		.loc 1 92 0
 842 0354 2C1082E5 		str	r1, [r2, #44]
 843              	.LBE405:
 844              	.LBE406:
 259:apps/rssi/main.c **** 			fb_gotoxy(offset + 12 * i, 7);
 845              		.loc 2 259 0
 846 0358 031046E2 		sub	r1, r6, #3
 847              	.LBB407:
 848              	.LBB408:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 849              		.loc 1 81 0
 850 035c B412C2E1 		strh	r1, [r2, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 851              		.loc 1 82 0
 852 0360 0710A0E3 		mov	r1, #7
 853              	.LBE408:
 854              	.LBE407:
 254:apps/rssi/main.c **** 			if (uplink)
 855              		.loc 2 254 0
 856 0364 000053E3 		cmp	r3, #0
 857              	.LBB410:
 858              	.LBB409:
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 859              		.loc 1 82 0
 860 0368 B612C2E1 		strh	r1, [r2, #38]	@ movhi
 861              	.LBE409:
 862              	.LBE410:
 260:apps/rssi/main.c **** 			l = (max) ? ul_max[tn] : ul_levels[tn];
 863              		.loc 2 260 0
 864 036c 0C2095E5 		ldr	r2, [r5, #12]
 865 0370 03308712 		addne	r3, r7, #3
 255:apps/rssi/main.c **** 				tn = (i + 3) & 7; /* UL is shifted by 3 */
 866              		.loc 2 255 0
 867 0374 07A00312 		andne	r10, r3, #7
 868              	.LVL60:
 869 0378 07A0A001 		moveq	r10, r7
 870              	.LVL61:
 260:apps/rssi/main.c **** 			l = (max) ? ul_max[tn] : ul_levels[tn];
 871              		.loc 2 260 0
 872 037c 000052E3 		cmp	r2, #0
 873 0380 8C3C9F05 		ldreq	r3, .L203+92
 874 0384 0A10DB17 		ldrneb	r1, [fp, r10]	@ zero_extendqisi2
 875 0388 0A10D307 		ldreqb	r1, [r3, r10]	@ zero_extendqisi2
 876              	.LVL62:
 261:apps/rssi/main.c **** 			l = 110 - l;
 877              		.loc 2 261 0
 878 038c 6E2061E2 		rsb	r2, r1, #110
 879              	.LVL63:
 262:apps/rssi/main.c **** 			if (l >= 100)
 880              		.loc 2 262 0
 881 0390 630052E3 		cmp	r2, #99
 263:apps/rssi/main.c **** 				l -= 100;
 882              		.loc 2 263 0
 883 0394 0A2061C2 		rsbgt	r2, r1, #10
 884              	.LVL64:
 264:apps/rssi/main.c **** 			sprintf(text, "%02d", l);
 885              		.loc 2 264 0
 886 0398 18008DE2 		add	r0, sp, #24
 887 039c 741C9FE5 		ldr	r1, .L203+96
 888 03a0 FEFFFFEB 		bl	sprintf
 889              	.LVL65:
 265:apps/rssi/main.c **** 			fb_putstr(text, framebuffer->width);
 890              		.loc 2 265 0
 891 03a4 002094E5 		ldr	r2, [r4]
 892 03a8 18008DE2 		add	r0, sp, #24
 893 03ac B012D2E1 		ldrh	r1, [r2, #32]
 894 03b0 FEFFFFEB 		bl	fb_putstr
 895              	.LVL66:
 896              	.LBB411:
 897              	.LBB412:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 898              		.loc 1 92 0
 899 03b4 002094E5 		ldr	r2, [r4]
 900              	.LBE412:
 901              	.LBE411:
 268:apps/rssi/main.c **** 			fb_boxto(offset + 3 + 12 * i + 5, height + 10 - ul_levels[tn] * height / 64);
 902              		.loc 2 268 0
 903 03b8 54CC9FE5 		ldr	ip, .L203+92
 904              	.LBB414:
 905              	.LBB413:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 906              		.loc 1 92 0
 907 03bc 0010A0E3 		mov	r1, #0
 908 03c0 2C1082E5 		str	r1, [r2, #44]
 909              	.LVL67:
 910              	.LBE413:
 911              	.LBE414:
 268:apps/rssi/main.c **** 			fb_boxto(offset + 3 + 12 * i + 5, height + 10 - ul_levels[tn] * height / 64);
 912              		.loc 2 268 0
 913 03c4 0A10DCE7 		ldrb	r1, [ip, r10]	@ zero_extendqisi2
 914 03c8 980101E0 		mul	r1, r8, r1
 915 03cc 000051E3 		cmp	r1, #0
 916 03d0 3F0081E2 		add	r0, r1, #63
 917 03d4 0010A0B1 		movlt	r1, r0
 918              	.LBB415:
 919              	.LBB416:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 920              		.loc 1 81 0
 921 03d8 B462C2E1 		strh	r6, [r2, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 922              		.loc 1 82 0
 923 03dc B692C2E1 		strh	r9, [r2, #38]	@ movhi
 924              	.LBE416:
 925              	.LBE415:
 268:apps/rssi/main.c **** 			fb_boxto(offset + 3 + 12 * i + 5, height + 10 - ul_levels[tn] * height / 64);
 926              		.loc 2 268 0
 927 03e0 052086E2 		add	r2, r6, #5
 928 03e4 0228A0E1 		mov	r2, r2, asl #16
 929 03e8 411349E0 		sub	r1, r9, r1, asr #6
 930 03ec 2228A0E1 		mov	r2, r2, lsr #16
 931 03f0 0118A0E1 		mov	r1, r1, asl #16
 932 03f4 0200A0E1 		mov	r0, r2
 933 03f8 2118A0E1 		mov	r1, r1, lsr #16
 934 03fc 0C208DE5 		str	r2, [sp, #12]
 935 0400 FEFFFFEB 		bl	fb_boxto
 936              	.LVL68:
 269:apps/rssi/main.c **** 			if (max) {
 937              		.loc 2 269 0
 938 0404 0C1095E5 		ldr	r1, [r5, #12]
 939 0408 000051E3 		cmp	r1, #0
 940 040c 0C209DE5 		ldr	r2, [sp, #12]
 941 0410 0D00000A 		beq	.L49
 270:apps/rssi/main.c **** 				fb_gotoxy(offset + 3 + 12 * i, height + 10 - ul_max[tn] * height / 64);
 942              		.loc 2 270 0
 943 0414 0A30DBE7 		ldrb	r3, [fp, r10]	@ zero_extendqisi2
 944 0418 980303E0 		mul	r3, r8, r3
 945 041c 3F1083E2 		add	r1, r3, #63
 946 0420 000053E3 		cmp	r3, #0
 947 0424 0130A0B1 		movlt	r3, r1
 948 0428 431349E0 		sub	r1, r9, r3, asr #6
 949              	.LBB417:
 950              	.LBB418:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 951              		.loc 1 81 0
 952 042c 843B9FE5 		ldr	r3, .L203
 953              	.LBE418:
 954              	.LBE417:
 270:apps/rssi/main.c **** 				fb_gotoxy(offset + 3 + 12 * i, height + 10 - ul_max[tn] * height / 64);
 955              		.loc 2 270 0
 956 0430 0118A0E1 		mov	r1, r1, asl #16
 957              	.LBB421:
 958              	.LBB419:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 959              		.loc 1 81 0
 960 0434 003093E5 		ldr	r3, [r3]
 961              	.LBE419:
 962              	.LBE421:
 270:apps/rssi/main.c **** 				fb_gotoxy(offset + 3 + 12 * i, height + 10 - ul_max[tn] * height / 64);
 963              		.loc 2 270 0
 964 0438 2118A0E1 		mov	r1, r1, lsr #16
 965              	.LVL69:
 966              	.LBB422:
 967              	.LBB420:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 968              		.loc 1 81 0
 969 043c B462C3E1 		strh	r6, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 970              		.loc 1 82 0
 971 0440 B612C3E1 		strh	r1, [r3, #38]	@ movhi
 972              	.LBE420:
 973              	.LBE422:
 271:apps/rssi/main.c **** 				fb_boxto(offset + 3 + 12 * i + 5, height + 10 - ul_max[tn] * height / 64);
 974              		.loc 2 271 0
 975 0444 0200A0E1 		mov	r0, r2
 976 0448 FEFFFFEB 		bl	fb_boxto
 977              	.LVL70:
 978              	.L49:
 253:apps/rssi/main.c **** 		for (i = 0; i < 8; i++) {
 979              		.loc 2 253 0
 980 044c 017087E2 		add	r7, r7, #1
 981              	.LVL71:
 982 0450 0C6086E2 		add	r6, r6, #12
 983              	.LVL72:
 984 0454 0668A0E1 		mov	r6, r6, asl #16
 985              	.LVL73:
 986 0458 080057E3 		cmp	r7, #8
 987 045c 2668A0E1 		mov	r6, r6, lsr #16
 988 0460 B8FFFF1A 		bne	.L51
 989              	.LVL74:
 990              	.LBB423:
 991              	.LBB424:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 992              		.loc 1 92 0
 993 0464 003094E5 		ldr	r3, [r4]
 994 0468 FE24E0E3 		mvn	r2, #-33554432
 995 046c 2C2083E5 		str	r2, [r3, #44]
 996              	.LBE424:
 997              	.LBE423:
 275:apps/rssi/main.c **** 		if (max) {
 998              		.loc 2 275 0
 999 0470 0C2095E5 		ldr	r2, [r5, #12]
 1000 0474 000052E3 		cmp	r2, #0
 1001 0478 0800000A 		beq	.L52
 1002              	.LVL75:
 277:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16, 15);
 1003              		.loc 2 277 0
 1004 047c B012D3E1 		ldrh	r1, [r3, #32]
 1005              	.LVL76:
 1006              	.LBB425:
 1007              	.LBB426:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1008              		.loc 1 87 0
 1009 0480 FF28A0E3 		mov	r2, #16711680
 1010 0484 282083E5 		str	r2, [r3, #40]
 1011              	.LBE426:
 1012              	.LBE425:
 277:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16, 15);
 1013              		.loc 2 277 0
 1014 0488 102041E2 		sub	r2, r1, #16
 1015              	.LBB427:
 1016              	.LBB428:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1017              		.loc 1 81 0
 1018 048c B422C3E1 		strh	r2, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1019              		.loc 1 82 0
 1020 0490 0F20A0E3 		mov	r2, #15
 1021 0494 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 1022              	.LBE428:
 1023              	.LBE427:
 278:apps/rssi/main.c **** 			fb_putstr("max", framebuffer->width);
 1024              		.loc 2 278 0
 1025 0498 7C0B9FE5 		ldr	r0, .L203+100
 1026 049c FEFFFFEB 		bl	fb_putstr
 1027              	.LVL77:
 1028              	.L52:
 1029              	.LBB429:
 1030              	.LBB430:
 1031              		.loc 1 97 0
 1032 04a0 003094E5 		ldr	r3, [r4]
 1033 04a4 0220A0E3 		mov	r2, #2
 1034 04a8 3020C3E5 		strb	r2, [r3, #48]
 1035              	.LVL78:
 1036              	.LBE430:
 1037              	.LBE429:
 1038              	.LBB431:
 1039              	.LBB432:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1040              		.loc 1 87 0
 1041 04ac FF20A0E3 		mov	r2, #255
 1042 04b0 282083E5 		str	r2, [r3, #40]
 1043              	.LVL79:
 1044              	.LBE432:
 1045              	.LBE431:
 1046              	.LBB433:
 1047              	.LBB434:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1048              		.loc 1 81 0
 1049 04b4 0020A0E3 		mov	r2, #0
 1050 04b8 B422C3E1 		strh	r2, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1051              		.loc 1 82 0
 1052 04bc 1020A0E3 		mov	r2, #16
 1053 04c0 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 1054              	.LBE434:
 1055              	.LBE433:
 283:apps/rssi/main.c **** 		if (pcs && ul_arfcn >= PCS_MIN && ul_arfcn <= PCS_MAX)
 1056              		.loc 2 283 0
 1057 04c4 103095E5 		ldr	r3, [r5, #16]
 1058 04c8 000053E3 		cmp	r3, #0
 1059 04cc 0800000A 		beq	.L53
 283:apps/rssi/main.c **** 		if (pcs && ul_arfcn >= PCS_MIN && ul_arfcn <= PCS_MAX)
 1060              		.loc 2 283 0 is_stmt 0 discriminator 1
 1061 04d0 E83A9FE5 		ldr	r3, .L203+8
 1062 04d4 B421D3E1 		ldrh	r2, [r3, #20]
 1063 04d8 403B9FE5 		ldr	r3, .L203+104
 1064 04dc 021C42E2 		sub	r1, r2, #512
 1065 04e0 0118A0E1 		mov	r1, r1, asl #16
 1066 04e4 210853E1 		cmp	r3, r1, lsr #16
 284:apps/rssi/main.c **** 			sprintf(text, "%4dP", ul_arfcn);
 1067              		.loc 2 284 0 is_stmt 1
 1068 04e8 18008D22 		addcs	r0, sp, #24
 1069 04ec 301B9F25 		ldrcs	r1, .L203+108
 1070 04f0 0700002A 		bcs	.L193
 1071              	.L53:
 285:apps/rssi/main.c **** 		else if (ul_arfcn >= DCS_MIN && ul_arfcn <= DCS_MAX)
 1072              		.loc 2 285 0
 1073 04f4 B421D5E1 		ldrh	r2, [r5, #20]
 1074 04f8 283B9FE5 		ldr	r3, .L203+112
 1075 04fc 021C42E2 		sub	r1, r2, #512
 1076 0500 0118A0E1 		mov	r1, r1, asl #16
 1077 0504 210853E1 		cmp	r3, r1, lsr #16
 286:apps/rssi/main.c **** 			sprintf(text, "%4dD", ul_arfcn);
 1078              		.loc 2 286 0
 1079 0508 1C1B9F25 		ldrcs	r1, .L203+116
 288:apps/rssi/main.c **** 			sprintf(text, "%4d ", ul_arfcn);
 1080              		.loc 2 288 0
 1081 050c 1C1B9F35 		ldrcc	r1, .L203+120
 286:apps/rssi/main.c **** 			sprintf(text, "%4dD", ul_arfcn);
 1082              		.loc 2 286 0
 1083 0510 18008DE2 		add	r0, sp, #24
 1084              	.L193:
 288:apps/rssi/main.c **** 			sprintf(text, "%4d ", ul_arfcn);
 1085              		.loc 2 288 0
 1086 0514 FEFFFFEB 		bl	sprintf
 1087              	.LVL80:
 289:apps/rssi/main.c **** 		fb_putstr(text, framebuffer->width);
 1088              		.loc 2 289 0
 1089 0518 003094E5 		ldr	r3, [r4]
 1090 051c 18008DE2 		add	r0, sp, #24
 1091 0520 B012D3E1 		ldrh	r1, [r3, #32]
 1092 0524 FEFFFFEB 		bl	fb_putstr
 1093              	.LVL81:
 1094              	.LBB435:
 1095              	.LBB436:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 1096              		.loc 1 92 0
 1097 0528 003094E5 		ldr	r3, [r4]
 1098 052c FF24E0E3 		mvn	r2, #-16777216
 1099 0530 2C2083E5 		str	r2, [r3, #44]
 1100              	.LVL82:
 1101              	.LBE436:
 1102              	.LBE435:
 1103              	.LBB437:
 1104              	.LBB438:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1105              		.loc 1 87 0
 1106 0534 0020A0E3 		mov	r2, #0
 1107 0538 282083E5 		str	r2, [r3, #40]
 1108              	.LVL83:
 1109              	.L44:
 1110              	.LBE438:
 1111              	.LBE437:
 1112              	.LBE398:
 295:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor == 0) {
 1113              		.loc 2 295 0
 1114 053c 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 1115 0540 030053E3 		cmp	r3, #3
 1116 0544 8700001A 		bne	.L56
 295:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor == 0) {
 1117              		.loc 2 295 0 is_stmt 0 discriminator 1
 1118 0548 743A9FE5 		ldr	r3, .L203+12
 1119 054c 002093E5 		ldr	r2, [r3]
 1120 0550 000052E3 		cmp	r2, #0
 1121 0554 8300001A 		bne	.L56
 1122              	.LVL84:
 1123              	.LBB439:
 1124              	.LBB440:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1125              		.loc 1 81 0 is_stmt 1
 1126 0558 003094E5 		ldr	r3, [r4]
 1127 055c B422C3E1 		strh	r2, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1128              		.loc 1 82 0
 1129 0560 1420A0E3 		mov	r2, #20
 1130 0564 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 1131              	.LBE440:
 1132              	.LBE439:
 297:apps/rssi/main.c **** 		if (sync_msg[0] == 'o')
 1133              		.loc 2 297 0
 1134 0568 C43A9FE5 		ldr	r3, .L203+124
 1135 056c 002093E5 		ldr	r2, [r3]
 1136 0570 0030D2E5 		ldrb	r3, [r2]	@ zero_extendqisi2
 1137 0574 6F0053E3 		cmp	r3, #111
 1138 0578 0B00001A 		bne	.L57
 298:apps/rssi/main.c **** 			sprintf(text, "BSIC%d/%d %4d", bsic >> 3, bsic & 7,
 1139              		.loc 2 298 0
 1140 057c 542A9FE5 		ldr	r2, .L203+32
 1141 0580 B03A9FE5 		ldr	r3, .L203+128
 1142 0584 0020D2E5 		ldrb	r2, [r2]	@ zero_extendqisi2
 1143 0588 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 1144 058c 6E2042E2 		sub	r2, r2, #110
 1145 0590 00208DE5 		str	r2, [sp]
 1146 0594 18008DE2 		add	r0, sp, #24
 1147 0598 A321A0E1 		mov	r2, r3, lsr #3
 1148 059c 981A9FE5 		ldr	r1, .L203+132
 1149 05a0 073003E2 		and	r3, r3, #7
 1150 05a4 FEFFFFEB 		bl	sprintf
 1151              	.LVL85:
 1152 05a8 020000EA 		b	.L58
 1153              	.L57:
 301:apps/rssi/main.c **** 			sprintf(text, "Sync %s", sync_msg);
 1154              		.loc 2 301 0
 1155 05ac 18008DE2 		add	r0, sp, #24
 1156 05b0 881A9FE5 		ldr	r1, .L203+136
 1157 05b4 FEFFFFEB 		bl	sprintf
 1158              	.LVL86:
 1159              	.L58:
 302:apps/rssi/main.c **** 		fb_putstr(text, -1);
 1160              		.loc 2 302 0
 1161 05b8 0010E0E3 		mvn	r1, #0
 1162 05bc 18008DE2 		add	r0, sp, #24
 1163 05c0 FEFFFFEB 		bl	fb_putstr
 1164              	.LVL87:
 1165              	.LBB441:
 1166              	.LBB442:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1167              		.loc 1 81 0
 1168 05c4 003094E5 		ldr	r3, [r4]
 1169 05c8 0060A0E3 		mov	r6, #0
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1170              		.loc 1 82 0
 1171 05cc 1C20A0E3 		mov	r2, #28
 1172 05d0 B622C3E1 		strh	r2, [r3, #38]	@ movhi
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1173              		.loc 1 81 0
 1174 05d4 B462C3E1 		strh	r6, [r3, #36]	@ movhi
 1175              	.LBE442:
 1176              	.LBE441:
 305:apps/rssi/main.c **** 		text[0] = si_1[2] ? '1' : '-';
 1177              		.loc 2 305 0
 1178 05d8 643A9FE5 		ldr	r3, .L203+140
 307:apps/rssi/main.c **** 		text[2] = si_2[2] ? '2' : '-';
 1179              		.loc 2 307 0
 1180 05dc 642A9FE5 		ldr	r2, .L203+144
 305:apps/rssi/main.c **** 		text[0] = si_1[2] ? '1' : '-';
 1181              		.loc 2 305 0
 1182 05e0 0230D3E5 		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 307:apps/rssi/main.c **** 		text[2] = si_2[2] ? '2' : '-';
 1183              		.loc 2 307 0
 1184 05e4 0220D2E5 		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 305:apps/rssi/main.c **** 		text[0] = si_1[2] ? '1' : '-';
 1185              		.loc 2 305 0
 1186 05e8 060053E1 		cmp	r3, r6
 1187 05ec 2D30A003 		moveq	r3, #45
 1188 05f0 3130A013 		movne	r3, #49
 307:apps/rssi/main.c **** 		text[2] = si_2[2] ? '2' : '-';
 1189              		.loc 2 307 0
 1190 05f4 060052E1 		cmp	r2, r6
 1191 05f8 2D20A003 		moveq	r2, #45
 1192 05fc 3220A013 		movne	r2, #50
 1193 0600 1A20CDE5 		strb	r2, [sp, #26]
 309:apps/rssi/main.c **** 		text[4] = si_2bis[2] ? '2' : '-';
 1194              		.loc 2 309 0
 1195 0604 402A9FE5 		ldr	r2, .L203+148
 1196 0608 0220D2E5 		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 1197 060c 060052E1 		cmp	r2, r6
 1198 0610 2D20A003 		moveq	r2, #45
 1199 0614 3220A013 		movne	r2, #50
 305:apps/rssi/main.c **** 		text[0] = si_1[2] ? '1' : '-';
 1200              		.loc 2 305 0
 1201 0618 1830CDE5 		strb	r3, [sp, #24]
 306:apps/rssi/main.c **** 		text[1] = ' ';
 1202              		.loc 2 306 0
 1203 061c 2030A0E3 		mov	r3, #32
 309:apps/rssi/main.c **** 		text[4] = si_2bis[2] ? '2' : '-';
 1204              		.loc 2 309 0
 1205 0620 1C20CDE5 		strb	r2, [sp, #28]
 310:apps/rssi/main.c **** 		text[5] = si_2bis[2] ? 'b' : ' ';
 1206              		.loc 2 310 0
 1207 0624 0320A001 		moveq	r2, r3
 1208 0628 6220A013 		movne	r2, #98
 1209 062c 1D20CDE5 		strb	r2, [sp, #29]
 311:apps/rssi/main.c **** 		text[6] = si_2ter[2] ? '2' : '-';
 1210              		.loc 2 311 0
 1211 0630 182A9FE5 		ldr	r2, .L203+152
 1212 0634 0220D2E5 		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 1213 0638 060052E1 		cmp	r2, r6
 1214 063c 2D20A003 		moveq	r2, #45
 1215 0640 3220A013 		movne	r2, #50
 314:apps/rssi/main.c **** 		text[9] = si_3[2] ? '3' : '-';
 1216              		.loc 2 314 0
 1217 0644 087A9FE5 		ldr	r7, .L203+156
 306:apps/rssi/main.c **** 		text[1] = ' ';
 1218              		.loc 2 306 0
 1219 0648 1930CDE5 		strb	r3, [sp, #25]
 308:apps/rssi/main.c **** 		text[3] = ' ';
 1220              		.loc 2 308 0
 1221 064c 1B30CDE5 		strb	r3, [sp, #27]
 311:apps/rssi/main.c **** 		text[6] = si_2ter[2] ? '2' : '-';
 1222              		.loc 2 311 0
 1223 0650 1E20CDE5 		strb	r2, [sp, #30]
 313:apps/rssi/main.c **** 		text[8] = ' ';
 1224              		.loc 2 313 0
 1225 0654 2030CDE5 		strb	r3, [sp, #32]
 312:apps/rssi/main.c **** 		text[7] = si_2ter[2] ? 't' : ' ';
 1226              		.loc 2 312 0
 1227 0658 0320A001 		moveq	r2, r3
 1228 065c 7420A013 		movne	r2, #116
 315:apps/rssi/main.c **** 		text[10] = ' ';
 1229              		.loc 2 315 0
 1230 0660 2230CDE5 		strb	r3, [sp, #34]
 316:apps/rssi/main.c **** 		text[11] = si_4[2] ? '4' : '-';
 1231              		.loc 2 316 0
 1232 0664 EC399FE5 		ldr	r3, .L203+160
 312:apps/rssi/main.c **** 		text[7] = si_2ter[2] ? 't' : ' ';
 1233              		.loc 2 312 0
 1234 0668 1F20CDE5 		strb	r2, [sp, #31]
 314:apps/rssi/main.c **** 		text[9] = si_3[2] ? '3' : '-';
 1235              		.loc 2 314 0
 1236 066c 0220D7E5 		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 316:apps/rssi/main.c **** 		text[11] = si_4[2] ? '4' : '-';
 1237              		.loc 2 316 0
 1238 0670 0230D3E5 		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 314:apps/rssi/main.c **** 		text[9] = si_3[2] ? '3' : '-';
 1239              		.loc 2 314 0
 1240 0674 060052E1 		cmp	r2, r6
 1241 0678 2D20A003 		moveq	r2, #45
 1242 067c 3320A013 		movne	r2, #51
 316:apps/rssi/main.c **** 		text[11] = si_4[2] ? '4' : '-';
 1243              		.loc 2 316 0
 1244 0680 060053E1 		cmp	r3, r6
 1245 0684 2D30A003 		moveq	r3, #45
 1246 0688 3430A013 		movne	r3, #52
 318:apps/rssi/main.c **** 		fb_putstr(text, -1);
 1247              		.loc 2 318 0
 1248 068c 0010E0E3 		mvn	r1, #0
 1249 0690 18008DE2 		add	r0, sp, #24
 314:apps/rssi/main.c **** 		text[9] = si_3[2] ? '3' : '-';
 1250              		.loc 2 314 0
 1251 0694 2120CDE5 		strb	r2, [sp, #33]
 316:apps/rssi/main.c **** 		text[11] = si_4[2] ? '4' : '-';
 1252              		.loc 2 316 0
 1253 0698 2330CDE5 		strb	r3, [sp, #35]
 317:apps/rssi/main.c **** 		text[12] = '\0';
 1254              		.loc 2 317 0
 1255 069c 2460CDE5 		strb	r6, [sp, #36]
 318:apps/rssi/main.c **** 		fb_putstr(text, -1);
 1256              		.loc 2 318 0
 1257 06a0 FEFFFFEB 		bl	fb_putstr
 1258              	.LVL88:
 1259              	.LBB443:
 1260              	.LBB444:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1261              		.loc 1 81 0
 1262 06a4 003094E5 		ldr	r3, [r4]
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1263              		.loc 1 82 0
 1264 06a8 2420A0E3 		mov	r2, #36
 1265 06ac B622C3E1 		strh	r2, [r3, #38]	@ movhi
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1266              		.loc 1 81 0
 1267 06b0 B462C3E1 		strh	r6, [r3, #36]	@ movhi
 1268              	.LBE444:
 1269              	.LBE443:
 321:apps/rssi/main.c **** 		fb_putstr("MCC MNC LAC ", -1);
 1270              		.loc 2 321 0
 1271 06b4 A0099FE5 		ldr	r0, .L203+164
 1272 06b8 0010E0E3 		mvn	r1, #0
 1273 06bc FEFFFFEB 		bl	fb_putstr
 1274              	.LVL89:
 1275              	.LBB445:
 1276              	.LBB446:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1277              		.loc 1 81 0
 1278 06c0 003094E5 		ldr	r3, [r4]
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1279              		.loc 1 82 0
 1280 06c4 2C20A0E3 		mov	r2, #44
 1281 06c8 B622C3E1 		strh	r2, [r3, #38]	@ movhi
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1282              		.loc 1 81 0
 1283 06cc B462C3E1 		strh	r6, [r3, #36]	@ movhi
 1284              	.LBE446:
 1285              	.LBE445:
 323:apps/rssi/main.c **** 		if (mcc) {
 1286              		.loc 2 323 0
 1287 06d0 88399FE5 		ldr	r3, .L203+168
 1288 06d4 B020D3E1 		ldrh	r2, [r3]
 1289 06d8 060052E1 		cmp	r2, r6
 1290 06dc 0D00000A 		beq	.L67
 324:apps/rssi/main.c **** 			if ((mnc & 0x00f) == 0x00f)
 1291              		.loc 2 324 0
 1292 06e0 7C399FE5 		ldr	r3, .L203+172
 1293 06e4 B030D3E1 		ldrh	r3, [r3]
 1294 06e8 0F1003E2 		and	r1, r3, #15
 1295 06ec 0F0051E3 		cmp	r1, #15
 1296 06f0 70199FE5 		ldr	r1, .L203+176
 325:apps/rssi/main.c **** 				sprintf(text, "%3x %02x  %04x", mcc, mnc >> 4, lac);
 1297              		.loc 2 325 0
 1298 06f4 B010D1E1 		ldrh	r1, [r1]
 1299 06f8 18008DE2 		add	r0, sp, #24
 1300 06fc 00108DE5 		str	r1, [sp]
 1301 0700 2332A001 		moveq	r3, r3, lsr #4
 1302 0704 60199F05 		ldreq	r1, .L203+180
 327:apps/rssi/main.c **** 				sprintf(text, "%3x %03x %04x", mcc, mnc, lac);
 1303              		.loc 2 327 0
 1304 0708 60199F15 		ldrne	r1, .L203+184
 1305 070c FEFFFFEB 		bl	sprintf
 1306              	.LVL90:
 328:apps/rssi/main.c **** 			fb_putstr(text, -1);
 1307              		.loc 2 328 0
 1308 0710 18008DE2 		add	r0, sp, #24
 1309 0714 000000EA 		b	.L195
 1310              	.L67:
 330:apps/rssi/main.c **** 			fb_putstr("--- --- ----", -1);
 1311              		.loc 2 330 0
 1312 0718 54099FE5 		ldr	r0, .L203+188
 1313              	.L195:
 1314 071c 0010E0E3 		mvn	r1, #0
 1315 0720 FEFFFFEB 		bl	fb_putstr
 1316              	.LVL91:
 1317              	.LBB447:
 1318              	.LBB448:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1319              		.loc 1 81 0
 1320 0724 003094E5 		ldr	r3, [r4]
 1321 0728 0020A0E3 		mov	r2, #0
 1322 072c B422C3E1 		strh	r2, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1323              		.loc 1 82 0
 1324 0730 3420A0E3 		mov	r2, #52
 1325 0734 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 1326              	.LBE448:
 1327              	.LBE447:
 332:apps/rssi/main.c **** 		if (si_3[2]) {
 1328              		.loc 2 332 0
 1329 0738 0230D7E5 		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1330 073c 000053E3 		cmp	r3, #0
 336:apps/rssi/main.c **** 			fb_putstr("cell id:----", -1);
 1331              		.loc 2 336 0
 1332 0740 30099F05 		ldreq	r0, .L203+192
 332:apps/rssi/main.c **** 		if (si_3[2]) {
 1333              		.loc 2 332 0
 1334 0744 0500000A 		beq	.L196
 333:apps/rssi/main.c **** 			sprintf(text, "cell id:%04x", cell_id);
 1335              		.loc 2 333 0
 1336 0748 2C399FE5 		ldr	r3, .L203+196
 1337 074c 18008DE2 		add	r0, sp, #24
 1338 0750 28199FE5 		ldr	r1, .L203+200
 1339 0754 B020D3E1 		ldrh	r2, [r3]
 1340 0758 FEFFFFEB 		bl	sprintf
 1341              	.LVL92:
 334:apps/rssi/main.c **** 			fb_putstr(text, -1);
 1342              		.loc 2 334 0
 1343 075c 18008DE2 		add	r0, sp, #24
 1344              	.L196:
 336:apps/rssi/main.c **** 			fb_putstr("cell id:----", -1);
 1345              		.loc 2 336 0
 1346 0760 0010E0E3 		mvn	r1, #0
 1347 0764 FEFFFFEB 		bl	fb_putstr
 1348              	.LVL93:
 1349              	.L56:
 340:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor > 0) {
 1350              		.loc 2 340 0
 1351 0768 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 1352 076c 030053E3 		cmp	r3, #3
 1353 0770 5100001A 		bne	.L72
 340:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor > 0) {
 1354              		.loc 2 340 0 is_stmt 0 discriminator 1
 1355 0774 48889FE5 		ldr	r8, .L203+12
 1356 0778 003098E5 		ldr	r3, [r8]
 1357 077c 000053E3 		cmp	r3, #0
 1358 0780 4D0000DA 		ble	.L72
 1359              	.LBB449:
 341:apps/rssi/main.c **** 		int i, y = 0;
 1360              		.loc 2 341 0 is_stmt 1
 1361 0784 0060A0E3 		mov	r6, #0
 343:apps/rssi/main.c **** 		text[0] = '\0';
 1362              		.loc 2 343 0
 1363 0788 28708DE2 		add	r7, sp, #40
 1364 078c 106067E5 		strb	r6, [r7, #-16]!
 1365              	.LVL94:
 341:apps/rssi/main.c **** 		int i, y = 0;
 1366              		.loc 2 341 0
 1367 0790 14608DE5 		str	r6, [sp, #20]
 345:apps/rssi/main.c **** 			if (freq[i].mask & FREQ_TYPE_SERV) {
 1368              		.loc 2 345 0
 1369 0794 E8A89FE5 		ldr	r10, .L203+204
 349:apps/rssi/main.c **** 					sprintf(text + 7, " %4d", i);
 1370              		.loc 2 349 0
 1371 0798 07B087E2 		add	fp, r7, #7
 1372              	.LVL95:
 1373              	.L76:
 345:apps/rssi/main.c **** 			if (freq[i].mask & FREQ_TYPE_SERV) {
 1374              		.loc 2 345 0
 1375 079c 0A30D6E7 		ldrb	r3, [r6, r10]	@ zero_extendqisi2
 1376 07a0 010013E3 		tst	r3, #1
 1377 07a4 D8989FE5 		ldr	r9, .L203+204
 1378 07a8 1200000A 		beq	.L73
 346:apps/rssi/main.c **** 				if (!text[0])
 1379              		.loc 2 346 0
 1380 07ac 1830DDE5 		ldrb	r3, [sp, #24]	@ zero_extendqisi2
 1381 07b0 000053E3 		cmp	r3, #0
 1382 07b4 0400001A 		bne	.L74
 347:apps/rssi/main.c **** 					sprintf(text, "S: %4d", i);
 1383              		.loc 2 347 0
 1384 07b8 0700A0E1 		mov	r0, r7
 1385 07bc C4189FE5 		ldr	r1, .L203+208
 1386 07c0 0620A0E1 		mov	r2, r6
 1387 07c4 FEFFFFEB 		bl	sprintf
 1388              	.LVL96:
 1389 07c8 0A0000EA 		b	.L73
 1390              	.L74:
 349:apps/rssi/main.c **** 					sprintf(text + 7, " %4d", i);
 1391              		.loc 2 349 0
 1392 07cc B8189FE5 		ldr	r1, .L203+212
 1393 07d0 0620A0E1 		mov	r2, r6
 1394 07d4 0B00A0E1 		mov	r0, fp
 1395 07d8 FEFFFFEB 		bl	sprintf
 1396              	.LVL97:
 350:apps/rssi/main.c **** 					print_display(text, &y, cursor - 1);
 1397              		.loc 2 350 0
 1398 07dc 002098E5 		ldr	r2, [r8]
 1399 07e0 0700A0E1 		mov	r0, r7
 1400 07e4 14108DE2 		add	r1, sp, #20
 1401 07e8 012042E2 		sub	r2, r2, #1
 1402 07ec FEFFFFEB 		bl	print_display
 1403              	.LVL98:
 351:apps/rssi/main.c **** 					text[0] = '\0';
 1404              		.loc 2 351 0
 1405 07f0 0030A0E3 		mov	r3, #0
 1406 07f4 1830CDE5 		strb	r3, [sp, #24]
 1407              	.L73:
 344:apps/rssi/main.c **** 		for (i = 0; i < 1024; i++) {
 1408              		.loc 2 344 0
 1409 07f8 016086E2 		add	r6, r6, #1
 1410              	.LVL99:
 1411 07fc 010B56E3 		cmp	r6, #1024
 1412 0800 E5FFFF1A 		bne	.L76
 355:apps/rssi/main.c **** 		if (text[0])
 1413              		.loc 2 355 0
 1414 0804 1830DDE5 		ldrb	r3, [sp, #24]	@ zero_extendqisi2
 1415 0808 000053E3 		cmp	r3, #0
 356:apps/rssi/main.c **** 			print_display(text, &y, cursor - 1);
 1416              		.loc 2 356 0
 1417 080c 00209815 		ldrne	r2, [r8]
 1418 0810 18008D12 		addne	r0, sp, #24
 1419 0814 14108D12 		addne	r1, sp, #20
 1420 0818 01204212 		subne	r2, r2, #1
 1421 081c FEFFFF1B 		blne	print_display
 1422              	.LVL100:
 1423              	.L77:
 357:apps/rssi/main.c **** 		text[0] = '\0';
 1424              		.loc 2 357 0
 1425 0820 28708DE2 		add	r7, sp, #40
 1426 0824 0060A0E3 		mov	r6, #0
 1427              	.LVL101:
 1428 0828 106067E5 		strb	r6, [r7, #-16]!
 1429              	.LVL102:
 363:apps/rssi/main.c **** 					sprintf(text + 7, " %4d", i);
 1430              		.loc 2 363 0
 1431 082c 07A087E2 		add	r10, r7, #7
 1432              	.LVL103:
 1433              	.L81:
 359:apps/rssi/main.c **** 			if (freq[i].mask & FREQ_TYPE_NCELL) {
 1434              		.loc 2 359 0
 1435 0830 0630D9E7 		ldrb	r3, [r9, r6]	@ zero_extendqisi2
 1436 0834 1C0013E3 		tst	r3, #28
 1437 0838 1200000A 		beq	.L78
 360:apps/rssi/main.c **** 				if (!text[0])
 1438              		.loc 2 360 0
 1439 083c 1830DDE5 		ldrb	r3, [sp, #24]	@ zero_extendqisi2
 1440 0840 000053E3 		cmp	r3, #0
 1441 0844 0400001A 		bne	.L79
 361:apps/rssi/main.c **** 					sprintf(text, "N: %4d", i);
 1442              		.loc 2 361 0
 1443 0848 0700A0E1 		mov	r0, r7
 1444 084c 3C189FE5 		ldr	r1, .L203+216
 1445 0850 0620A0E1 		mov	r2, r6
 1446 0854 FEFFFFEB 		bl	sprintf
 1447              	.LVL104:
 1448 0858 0A0000EA 		b	.L78
 1449              	.L79:
 363:apps/rssi/main.c **** 					sprintf(text + 7, " %4d", i);
 1450              		.loc 2 363 0
 1451 085c 28189FE5 		ldr	r1, .L203+212
 1452 0860 0620A0E1 		mov	r2, r6
 1453 0864 0A00A0E1 		mov	r0, r10
 1454 0868 FEFFFFEB 		bl	sprintf
 1455              	.LVL105:
 364:apps/rssi/main.c **** 					print_display(text, &y, cursor - 1);
 1456              		.loc 2 364 0
 1457 086c 002098E5 		ldr	r2, [r8]
 1458 0870 0700A0E1 		mov	r0, r7
 1459 0874 14108DE2 		add	r1, sp, #20
 1460 0878 012042E2 		sub	r2, r2, #1
 1461 087c FEFFFFEB 		bl	print_display
 1462              	.LVL106:
 365:apps/rssi/main.c **** 					text[0] = '\0';
 1463              		.loc 2 365 0
 1464 0880 0030A0E3 		mov	r3, #0
 1465 0884 1830CDE5 		strb	r3, [sp, #24]
 1466              	.L78:
 358:apps/rssi/main.c **** 		for (i = 0; i < 1024; i++) {
 1467              		.loc 2 358 0
 1468 0888 016086E2 		add	r6, r6, #1
 1469              	.LVL107:
 1470 088c 010B56E3 		cmp	r6, #1024
 1471 0890 E6FFFF1A 		bne	.L81
 369:apps/rssi/main.c **** 		if (text[0])
 1472              		.loc 2 369 0
 1473 0894 1830DDE5 		ldrb	r3, [sp, #24]	@ zero_extendqisi2
 1474 0898 000053E3 		cmp	r3, #0
 370:apps/rssi/main.c **** 			print_display(text, &y, cursor - 1);
 1475              		.loc 2 370 0
 1476 089c 00209815 		ldrne	r2, [r8]
 1477 08a0 18008D12 		addne	r0, sp, #24
 1478 08a4 14108D12 		addne	r1, sp, #20
 1479 08a8 01204212 		subne	r2, r2, #1
 1480 08ac FEFFFF1B 		blne	print_display
 1481              	.LVL108:
 1482              	.L82:
 371:apps/rssi/main.c **** 		nb_num = y;
 1483              		.loc 2 371 0
 1484 08b0 14209DE5 		ldr	r2, [sp, #20]
 1485 08b4 D8379FE5 		ldr	r3, .L203+220
 1486 08b8 002083E5 		str	r2, [r3]
 1487              	.LVL109:
 1488              	.L72:
 1489              	.LBE449:
 375:apps/rssi/main.c **** 	if (mode == MODE_MAIN || mode == MODE_ARFCN) {
 1490              		.loc 2 375 0
 1491 08bc 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 1492 08c0 FD0013E2 		ands	r0, r3, #253
 1493 08c4 F4269FE5 		ldr	r2, .L203+8
 1494 08c8 2000001A 		bne	.L83
 1495              	.LVL110:
 1496              	.LBB450:
 1497              	.LBB451:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1498              		.loc 1 81 0
 1499 08cc 001094E5 		ldr	r1, [r4]
 1500              	.LBE451:
 1501              	.LBE450:
 377:apps/rssi/main.c **** 		if (mode == MODE_ARFCN)
 1502              		.loc 2 377 0
 1503 08d0 020053E3 		cmp	r3, #2
 1504              	.LBB453:
 1505              	.LBB452:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1506              		.loc 1 81 0
 1507 08d4 B402C1E1 		strh	r0, [r1, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1508              		.loc 1 82 0
 1509 08d8 1400A0E3 		mov	r0, #20
 1510 08dc B602C1E1 		strh	r0, [r1, #38]	@ movhi
 1511              	.LBE452:
 1512              	.LBE453:
 377:apps/rssi/main.c **** 		if (mode == MODE_ARFCN)
 1513              		.loc 2 377 0
 378:apps/rssi/main.c **** 			sprintf(text, "ARFCN %s", input);
 1514              		.loc 2 378 0
 1515 08e0 18008D02 		addeq	r0, sp, #24
 1516 08e4 AC179F05 		ldreq	r1, .L203+224
 1517 08e8 AC279F05 		ldreq	r2, .L203+228
 1518 08ec 1200000A 		beq	.L197
 1519              	.L84:
 379:apps/rssi/main.c **** 		else if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 1520              		.loc 2 379 0
 1521 08f0 103092E5 		ldr	r3, [r2, #16]
 1522 08f4 000053E3 		cmp	r3, #0
 1523 08f8 0700000A 		beq	.L86
 379:apps/rssi/main.c **** 		else if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 1524              		.loc 2 379 0 is_stmt 0 discriminator 1
 1525 08fc B621D2E1 		ldrh	r2, [r2, #22]
 1526 0900 18379FE5 		ldr	r3, .L203+104
 1527 0904 021C42E2 		sub	r1, r2, #512
 1528 0908 0118A0E1 		mov	r1, r1, asl #16
 1529 090c 210853E1 		cmp	r3, r1, lsr #16
 380:apps/rssi/main.c **** 			sprintf(text, "ARFCN %dPCS", arfcn);
 1530              		.loc 2 380 0 is_stmt 1
 1531 0910 18008D22 		addcs	r0, sp, #24
 1532 0914 84179F25 		ldrcs	r1, .L203+232
 1533 0918 0700002A 		bcs	.L197
 1534              	.L86:
 381:apps/rssi/main.c **** 		else if (arfcn >= DCS_MIN && arfcn <= DCS_MAX)
 1535              		.loc 2 381 0
 1536 091c B621D5E1 		ldrh	r2, [r5, #22]
 1537 0920 00379FE5 		ldr	r3, .L203+112
 1538 0924 021C42E2 		sub	r1, r2, #512
 1539 0928 0118A0E1 		mov	r1, r1, asl #16
 1540 092c 210853E1 		cmp	r3, r1, lsr #16
 382:apps/rssi/main.c **** 			sprintf(text, "ARFCN %dDCS", arfcn);
 1541              		.loc 2 382 0
 1542 0930 6C179F25 		ldrcs	r1, .L203+236
 384:apps/rssi/main.c **** 			sprintf(text, "ARFCN %d", arfcn);
 1543              		.loc 2 384 0
 1544 0934 6C179F35 		ldrcc	r1, .L203+240
 382:apps/rssi/main.c **** 			sprintf(text, "ARFCN %dDCS", arfcn);
 1545              		.loc 2 382 0
 1546 0938 18008DE2 		add	r0, sp, #24
 1547              	.L197:
 384:apps/rssi/main.c **** 			sprintf(text, "ARFCN %d", arfcn);
 1548              		.loc 2 384 0
 1549 093c FEFFFFEB 		bl	sprintf
 1550              	.LVL111:
 385:apps/rssi/main.c **** 		fb_putstr(text,framebuffer->width);
 1551              		.loc 2 385 0
 1552 0940 003094E5 		ldr	r3, [r4]
 1553 0944 18008DE2 		add	r0, sp, #24
 1554 0948 B012D3E1 		ldrh	r1, [r3, #32]
 1555 094c FEFFFFEB 		bl	fb_putstr
 1556              	.LVL112:
 1557              	.L83:
 389:apps/rssi/main.c **** 	if (mode == MODE_ARFCN) {
 1558              		.loc 2 389 0
 1559 0950 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 1560 0954 020053E3 		cmp	r3, #2
 1561 0958 0B00001A 		bne	.L88
 1562              	.LVL113:
 1563              	.LBB454:
 1564              	.LBB455:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1565              		.loc 1 87 0
 1566 095c 003094E5 		ldr	r3, [r4]
 1567              	.LBE455:
 1568              	.LBE454:
 1569              	.LBB458:
 1570              	.LBB459:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 1571              		.loc 1 92 0
 1572 0960 FF20A0E3 		mov	r2, #255
 1573              	.LBE459:
 1574              	.LBE458:
 1575              	.LBB461:
 1576              	.LBB456:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1577              		.loc 1 87 0
 1578 0964 FF64E0E3 		mvn	r6, #-16777216
 1579              	.LBE456:
 1580              	.LBE461:
 1581              	.LBB462:
 1582              	.LBB460:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 1583              		.loc 1 92 0
 1584 0968 2C2083E5 		str	r2, [r3, #44]
 1585              	.LBE460:
 1586              	.LBE462:
 1587              	.LBB463:
 1588              	.LBB457:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1589              		.loc 1 87 0
 1590 096c 286083E5 		str	r6, [r3, #40]
 1591              	.LVL114:
 1592              	.LBE457:
 1593              	.LBE463:
 392:apps/rssi/main.c **** 		fb_putstr(" ", framebuffer->width);
 1594              		.loc 2 392 0
 1595 0970 B012D3E1 		ldrh	r1, [r3, #32]
 1596 0974 30079FE5 		ldr	r0, .L203+244
 1597 0978 FEFFFFEB 		bl	fb_putstr
 1598              	.LVL115:
 1599              	.LBB464:
 1600              	.LBB465:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1601              		.loc 1 87 0
 1602 097c 003094E5 		ldr	r3, [r4]
 1603 0980 0020A0E3 		mov	r2, #0
 1604 0984 282083E5 		str	r2, [r3, #40]
 1605              	.LVL116:
 1606              	.LBE465:
 1607              	.LBE464:
 1608              	.LBB466:
 1609              	.LBB467:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 1610              		.loc 1 92 0
 1611 0988 2C6083E5 		str	r6, [r3, #44]
 1612              	.LVL117:
 1613              	.L88:
 1614              	.LBE467:
 1615              	.LBE466:
 398:apps/rssi/main.c **** 	if (mode == MODE_MAIN) {
 1616              		.loc 2 398 0
 1617 098c 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 1618 0990 000052E3 		cmp	r2, #0
 1619 0994 24369FE5 		ldr	r3, .L203+8
 1620 0998 7400001A 		bne	.L89
 1621              	.LBB468:
 401:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX) {
 1622              		.loc 2 401 0
 1623 099c 102093E5 		ldr	r2, [r3, #16]
 1624 09a0 000052E3 		cmp	r2, #0
 1625 09a4 04279FE5 		ldr	r2, .L203+248
 1626 09a8 0B00000A 		beq	.L90
 401:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX) {
 1627              		.loc 2 401 0 is_stmt 0 discriminator 1
 1628 09ac B601D3E1 		ldrh	r0, [r3, #22]
 1629 09b0 68169FE5 		ldr	r1, .L203+104
 1630 09b4 020C40E2 		sub	r0, r0, #512
 1631 09b8 0008A0E1 		mov	r0, r0, asl #16
 1632 09bc 200851E1 		cmp	r1, r0, lsr #16
 1633 09c0 0500003A 		bcc	.L90
 402:apps/rssi/main.c **** 			if (uplink)
 1634              		.loc 2 402 0 is_stmt 1
 1635 09c4 080093E5 		ldr	r0, [r3, #8]
 403:apps/rssi/main.c **** 				f = PCS_UL;
 1636              		.loc 2 403 0
 1637 09c8 E4169FE5 		ldr	r1, .L203+252
 1638 09cc 000050E3 		cmp	r0, #0
 1639 09d0 E0369FE5 		ldr	r3, .L203+256
 1640 09d4 0130A011 		movne	r3, r1
 1641 09d8 040000EA 		b	.L91
 1642              	.L90:
 406:apps/rssi/main.c **** 		} else if (uplink)
 1643              		.loc 2 406 0
 1644 09dc 083095E5 		ldr	r3, [r5, #8]
 1645 09e0 000053E3 		cmp	r3, #0
 407:apps/rssi/main.c **** 			f = band->freq_ul;
 1646              		.loc 2 407 0
 1647 09e4 003092E5 		ldr	r3, [r2]
 1648 09e8 10309315 		ldrne	r3, [r3, #16]
 1649              	.LVL118:
 409:apps/rssi/main.c **** 			f = band->freq_dl;
 1650              		.loc 2 409 0
 1651 09ec 14309305 		ldreq	r3, [r3, #20]
 1652              	.LVL119:
 1653              	.L91:
 410:apps/rssi/main.c **** 		f += ((arfcn - band->min) & 1023) << 1;
 1654              		.loc 2 410 0
 1655 09f0 002092E5 		ldr	r2, [r2]
 1656 09f4 B671D5E1 		ldrh	r7, [r5, #22]
 1657 09f8 002092E5 		ldr	r2, [r2]
 1658 09fc 077062E0 		rsb	r7, r2, r7
 1659 0a00 077BA0E1 		mov	r7, r7, asl #22
 1660 0a04 A77A83E0 		add	r7, r3, r7, lsr #21
 1661              	.LVL120:
 1662              	.LBB469:
 1663              	.LBB470:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1664              		.loc 1 81 0
 1665 0a08 003094E5 		ldr	r3, [r4]
 1666 0a0c 0060A0E3 		mov	r6, #0
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1667              		.loc 1 82 0
 1668 0a10 1E20A0E3 		mov	r2, #30
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1669              		.loc 1 81 0
 1670 0a14 B462C3E1 		strh	r6, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1671              		.loc 1 82 0
 1672 0a18 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 1673              	.LBE470:
 1674              	.LBE469:
 413:apps/rssi/main.c **** 		sprintf(text, "Freq. %d.%d", f / 10, f % 10);
 1675              		.loc 2 413 0
 1676 0a1c 0A10A0E3 		mov	r1, #10
 1677 0a20 0700A0E1 		mov	r0, r7
 1678 0a24 FEFFFFEB 		bl	__aeabi_idiv
 1679              	.LVL121:
 1680 0a28 0A10A0E3 		mov	r1, #10
 1681 0a2c 0080A0E1 		mov	r8, r0
 1682 0a30 0700A0E1 		mov	r0, r7
 1683 0a34 FEFFFFEB 		bl	__aeabi_idivmod
 1684              	.LVL122:
 1685 0a38 0820A0E1 		mov	r2, r8
 1686 0a3c 0130A0E1 		mov	r3, r1
 1687 0a40 18008DE2 		add	r0, sp, #24
 1688 0a44 70169FE5 		ldr	r1, .L203+260
 1689 0a48 FEFFFFEB 		bl	sprintf
 1690              	.LVL123:
 414:apps/rssi/main.c **** 		fb_putstr(text,framebuffer->width);
 1691              		.loc 2 414 0
 1692 0a4c 003094E5 		ldr	r3, [r4]
 1693 0a50 18008DE2 		add	r0, sp, #24
 1694 0a54 B012D3E1 		ldrh	r1, [r3, #32]
 1695 0a58 FEFFFFEB 		bl	fb_putstr
 1696              	.LVL124:
 1697              	.LBB471:
 1698              	.LBB472:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1699              		.loc 1 81 0
 1700 0a5c 003094E5 		ldr	r3, [r4]
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1701              		.loc 1 82 0
 1702 0a60 2820A0E3 		mov	r2, #40
 1703 0a64 B622C3E1 		strh	r2, [r3, #38]	@ movhi
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1704              		.loc 1 81 0
 1705 0a68 B462C3E1 		strh	r6, [r3, #36]	@ movhi
 1706              	.LBE472:
 1707              	.LBE471:
 417:apps/rssi/main.c **** 		sprintf(text, "Power %d", ((max) ? max_power : power) - 110);
 1708              		.loc 2 417 0
 1709 0a6c 0C3095E5 		ldr	r3, [r5, #12]
 1710 0a70 060053E1 		cmp	r3, r6
 1711 0a74 44369F15 		ldrne	r3, .L203+264
 1712 0a78 58659FE5 		ldr	r6, .L203+32
 1713 0a7c 0020D315 		ldrneb	r2, [r3]	@ zero_extendqisi2
 1714 0a80 0020D605 		ldreqb	r2, [r6]	@ zero_extendqisi2
 1715 0a84 38169FE5 		ldr	r1, .L203+268
 1716 0a88 6E2042E2 		sub	r2, r2, #110
 1717 0a8c 18008DE2 		add	r0, sp, #24
 1718 0a90 FEFFFFEB 		bl	sprintf
 1719              	.LVL125:
 418:apps/rssi/main.c **** 		fb_putstr(text, framebuffer->width);
 1720              		.loc 2 418 0
 1721 0a94 003094E5 		ldr	r3, [r4]
 1722 0a98 18008DE2 		add	r0, sp, #24
 1723 0a9c B012D3E1 		ldrh	r1, [r3, #32]
 1724 0aa0 FEFFFFEB 		bl	fb_putstr
 1725              	.LVL126:
 419:apps/rssi/main.c **** 		if (max) {
 1726              		.loc 2 419 0
 1727 0aa4 0C3095E5 		ldr	r3, [r5, #12]
 1728 0aa8 000053E3 		cmp	r3, #0
 418:apps/rssi/main.c **** 		fb_putstr(text, framebuffer->width);
 1729              		.loc 2 418 0
 1730 0aac 04859FE5 		ldr	r8, .L203
 419:apps/rssi/main.c **** 		if (max) {
 1731              		.loc 2 419 0
 1732 0ab0 0F00000A 		beq	.L95
 1733              	.LVL127:
 1734              	.LBB473:
 1735              	.LBB474:
 1736              		.loc 1 97 0
 1737 0ab4 003098E5 		ldr	r3, [r8]
 1738              	.LBE474:
 1739              	.LBE473:
 422:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16, 39);
 1740              		.loc 2 422 0
 1741 0ab8 B012D3E1 		ldrh	r1, [r3, #32]
 1742              	.LBB477:
 1743              	.LBB478:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1744              		.loc 1 87 0
 1745 0abc FF28A0E3 		mov	r2, #16711680
 1746 0ac0 282083E5 		str	r2, [r3, #40]
 1747              	.LBE478:
 1748              	.LBE477:
 422:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16, 39);
 1749              		.loc 2 422 0
 1750 0ac4 102041E2 		sub	r2, r1, #16
 1751              	.LBB479:
 1752              	.LBB480:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1753              		.loc 1 81 0
 1754 0ac8 B422C3E1 		strh	r2, [r3, #36]	@ movhi
 1755              	.LBE480:
 1756              	.LBE479:
 1757              	.LBB482:
 1758              	.LBB475:
 1759              		.loc 1 97 0
 1760 0acc 0070A0E3 		mov	r7, #0
 1761              	.LVL128:
 1762              	.LBE475:
 1763              	.LBE482:
 1764              	.LBB483:
 1765              	.LBB481:
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1766              		.loc 1 82 0
 1767 0ad0 2720A0E3 		mov	r2, #39
 1768 0ad4 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 1769              	.LBE481:
 1770              	.LBE483:
 1771              	.LBB484:
 1772              	.LBB476:
 1773              		.loc 1 97 0
 1774 0ad8 3070C3E5 		strb	r7, [r3, #48]
 1775              	.LVL129:
 1776              	.LBE476:
 1777              	.LBE484:
 423:apps/rssi/main.c **** 			fb_putstr("max", framebuffer->width);
 1778              		.loc 2 423 0
 1779 0adc 38059FE5 		ldr	r0, .L203+100
 1780 0ae0 FEFFFFEB 		bl	fb_putstr
 1781              	.LVL130:
 1782              	.LBB485:
 1783              	.LBB486:
 1784              		.loc 1 97 0
 1785 0ae4 003098E5 		ldr	r3, [r8]
 1786 0ae8 0220A0E3 		mov	r2, #2
 1787 0aec 3020C3E5 		strb	r2, [r3, #48]
 1788              	.LVL131:
 1789              	.LBE486:
 1790              	.LBE485:
 1791              	.LBB487:
 1792              	.LBB488:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1793              		.loc 1 87 0
 1794 0af0 287083E5 		str	r7, [r3, #40]
 1795              	.LVL132:
 1796              	.L95:
 1797              	.LBE488:
 1798              	.LBE487:
 1799              	.LBB489:
 1800              	.LBB490:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 1801              		.loc 1 92 0
 1802 0af4 003094E5 		ldr	r3, [r4]
 1803 0af8 0020A0E3 		mov	r2, #0
 1804              	.LBE490:
 1805              	.LBE489:
 1806              	.LBB492:
 1807              	.LBB493:
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1808              		.loc 1 82 0
 1809 0afc 2D70A0E3 		mov	r7, #45
 1810              	.LBE493:
 1811              	.LBE492:
 1812              	.LBB495:
 1813              	.LBB491:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 1814              		.loc 1 92 0
 1815 0b00 2C2083E5 		str	r2, [r3, #44]
 1816              	.LVL133:
 1817              	.LBE491:
 1818              	.LBE495:
 1819              	.LBB496:
 1820              	.LBB494:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1821              		.loc 1 81 0
 1822 0b04 B422C3E1 		strh	r2, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1823              		.loc 1 82 0
 1824 0b08 B672C3E1 		strh	r7, [r3, #38]	@ movhi
 1825              	.LBE494:
 1826              	.LBE496:
 429:apps/rssi/main.c **** 		fb_boxto(framebuffer->width * power / 64, 50);
 1827              		.loc 2 429 0
 1828 0b0c 0000D6E5 		ldrb	r0, [r6]	@ zero_extendqisi2
 1829 0b10 B032D3E1 		ldrh	r3, [r3, #32]
 1830 0b14 930000E0 		mul	r0, r3, r0
 1831 0b18 0005A0E1 		mov	r0, r0, asl #10
 1832 0b1c 2008A0E1 		mov	r0, r0, lsr #16
 1833 0b20 3210A0E3 		mov	r1, #50
 1834 0b24 FEFFFFEB 		bl	fb_boxto
 1835              	.LVL134:
 430:apps/rssi/main.c **** 		if (max) {
 1836              		.loc 2 430 0
 1837 0b28 0C3095E5 		ldr	r3, [r5, #12]
 1838 0b2c 000053E3 		cmp	r3, #0
 1839 0b30 0B00000A 		beq	.L96
 431:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width * max_power / 64 ,45);
 1840              		.loc 2 431 0
 1841 0b34 7C349FE5 		ldr	r3, .L203
 1842 0b38 80159FE5 		ldr	r1, .L203+264
 1843 0b3c 003093E5 		ldr	r3, [r3]
 1844 0b40 0000D1E5 		ldrb	r0, [r1]	@ zero_extendqisi2
 1845 0b44 B022D3E1 		ldrh	r2, [r3, #32]
 1846 0b48 920000E0 		mul	r0, r2, r0
 1847 0b4c 0005A0E1 		mov	r0, r0, asl #10
 1848 0b50 2008A0E1 		mov	r0, r0, lsr #16
 1849              	.LVL135:
 1850              	.LBB497:
 1851              	.LBB498:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1852              		.loc 1 81 0
 1853 0b54 B402C3E1 		strh	r0, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1854              		.loc 1 82 0
 1855 0b58 B672C3E1 		strh	r7, [r3, #38]	@ movhi
 1856              	.LBE498:
 1857              	.LBE497:
 432:apps/rssi/main.c **** 			fb_boxto(framebuffer->width * max_power / 64, 50);
 1858              		.loc 2 432 0
 1859 0b5c 3210A0E3 		mov	r1, #50
 1860 0b60 FEFFFFEB 		bl	fb_boxto
 1861              	.LVL136:
 1862              	.L96:
 1863              	.LBB499:
 1864              	.LBB500:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 1865              		.loc 1 92 0
 1866 0b64 003094E5 		ldr	r3, [r4]
 1867 0b68 FF24E0E3 		mvn	r2, #-16777216
 1868 0b6c 2C2083E5 		str	r2, [r3, #44]
 1869              	.LVL137:
 1870              	.L89:
 1871              	.LBE500:
 1872              	.LBE499:
 1873              	.LBE468:
 438:apps/rssi/main.c **** 	if (mode == MODE_SPECTRUM) {
 1874              		.loc 2 438 0
 1875 0b70 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 1876 0b74 010053E3 		cmp	r3, #1
 1877 0b78 40249FE5 		ldr	r2, .L203+8
 1878 0b7c A700001A 		bne	.L97
 1879              	.LBB501:
 441:apps/rssi/main.c **** 		int height = framebuffer->height - 25;
 1880              		.loc 2 441 0
 1881 0b80 003094E5 		ldr	r3, [r4]
 1882              	.LBB502:
 1883              	.LBB503:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1884              		.loc 1 81 0
 1885 0b84 0010A0E3 		mov	r1, #0
 1886 0b88 B412C3E1 		strh	r1, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1887              		.loc 1 82 0
 1888 0b8c 0810A0E3 		mov	r1, #8
 1889              	.LBE503:
 1890              	.LBE502:
 441:apps/rssi/main.c **** 		int height = framebuffer->height - 25;
 1891              		.loc 2 441 0
 1892 0b90 B272D3E1 		ldrh	r7, [r3, #34]
 1893              	.LBB505:
 1894              	.LBB504:
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1895              		.loc 1 82 0
 1896 0b94 B612C3E1 		strh	r1, [r3, #38]	@ movhi
 1897              	.LBE504:
 1898              	.LBE505:
 444:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 1899              		.loc 2 444 0
 1900 0b98 103092E5 		ldr	r3, [r2, #16]
 1901 0b9c 000053E3 		cmp	r3, #0
 441:apps/rssi/main.c **** 		int height = framebuffer->height - 25;
 1902              		.loc 2 441 0
 1903 0ba0 197047E2 		sub	r7, r7, #25
 1904              	.LVL138:
 444:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 1905              		.loc 2 444 0
 1906 0ba4 0700000A 		beq	.L98
 444:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 1907              		.loc 2 444 0 is_stmt 0 discriminator 1
 1908 0ba8 B621D2E1 		ldrh	r2, [r2, #22]
 1909 0bac 6C349FE5 		ldr	r3, .L203+104
 1910 0bb0 021C42E2 		sub	r1, r2, #512
 1911 0bb4 0118A0E1 		mov	r1, r1, asl #16
 1912 0bb8 210853E1 		cmp	r3, r1, lsr #16
 445:apps/rssi/main.c **** 			sprintf(text, "%4dP", arfcn);
 1913              		.loc 2 445 0 is_stmt 1
 1914 0bbc 18008D22 		addcs	r0, sp, #24
 1915 0bc0 5C149F25 		ldrcs	r1, .L203+108
 1916 0bc4 0700002A 		bcs	.L199
 1917              	.L98:
 446:apps/rssi/main.c **** 		else if (arfcn >= DCS_MIN && arfcn <= DCS_MAX)
 1918              		.loc 2 446 0
 1919 0bc8 B621D5E1 		ldrh	r2, [r5, #22]
 1920 0bcc 54349FE5 		ldr	r3, .L203+112
 1921 0bd0 021C42E2 		sub	r1, r2, #512
 1922 0bd4 0118A0E1 		mov	r1, r1, asl #16
 1923 0bd8 210853E1 		cmp	r3, r1, lsr #16
 447:apps/rssi/main.c **** 			sprintf(text, "%4dD", arfcn);
 1924              		.loc 2 447 0
 1925 0bdc 48149F25 		ldrcs	r1, .L203+116
 449:apps/rssi/main.c **** 			sprintf(text, "%4d ", arfcn);
 1926              		.loc 2 449 0
 1927 0be0 48149F35 		ldrcc	r1, .L203+120
 447:apps/rssi/main.c **** 			sprintf(text, "%4dD", arfcn);
 1928              		.loc 2 447 0
 1929 0be4 18008DE2 		add	r0, sp, #24
 1930              	.L199:
 449:apps/rssi/main.c **** 			sprintf(text, "%4d ", arfcn);
 1931              		.loc 2 449 0
 1932 0be8 FEFFFFEB 		bl	sprintf
 1933              	.LVL139:
 450:apps/rssi/main.c **** 		sprintf(text + 5, "   %4d", pm_spectrum[arfcn & 1023] - 110);
 1934              		.loc 2 450 0
 1935 0bec B631D5E1 		ldrh	r3, [r5, #22]
 1936 0bf0 D0649FE5 		ldr	r6, .L203+272
 1937 0bf4 033BA0E1 		mov	r3, r3, asl #22
 1938 0bf8 232BD6E7 		ldrb	r2, [r6, r3, lsr #22]	@ zero_extendqisi2
 1939 0bfc C8149FE5 		ldr	r1, .L203+276
 1940 0c00 6E2042E2 		sub	r2, r2, #110
 1941 0c04 1D008DE2 		add	r0, sp, #29
 1942 0c08 FEFFFFEB 		bl	sprintf
 1943              	.LVL140:
 451:apps/rssi/main.c **** 		fb_putstr(text, -1);
 1944              		.loc 2 451 0
 1945 0c0c 18008DE2 		add	r0, sp, #24
 1946 0c10 0010E0E3 		mvn	r1, #0
 1947 0c14 FEFFFFEB 		bl	fb_putstr
 1948              	.LVL141:
 1949              	.LBB506:
 1950              	.LBB507:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1951              		.loc 1 87 0
 1952 0c18 003094E5 		ldr	r3, [r4]
 1953 0c1c FF28A0E3 		mov	r2, #16711680
 1954 0c20 282083E5 		str	r2, [r3, #40]
 1955              	.LBE507:
 1956              	.LBE506:
 453:apps/rssi/main.c **** 		if (max) {
 1957              		.loc 2 453 0
 1958 0c24 0C2095E5 		ldr	r2, [r5, #12]
 1959 0c28 000052E3 		cmp	r2, #0
 1960 0c2c 0C00000A 		beq	.L101
 1961              	.LVL142:
 455:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16,15);
 1962              		.loc 2 455 0
 1963 0c30 B012D3E1 		ldrh	r1, [r3, #32]
 1964              	.LVL143:
 1965              	.LBB508:
 1966              	.LBB509:
 1967              		.loc 1 97 0
 1968 0c34 0020A0E3 		mov	r2, #0
 1969 0c38 3020C3E5 		strb	r2, [r3, #48]
 1970              	.LBE509:
 1971              	.LBE508:
 455:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16,15);
 1972              		.loc 2 455 0
 1973 0c3c 102041E2 		sub	r2, r1, #16
 1974              	.LBB510:
 1975              	.LBB511:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 1976              		.loc 1 81 0
 1977 0c40 B422C3E1 		strh	r2, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 1978              		.loc 1 82 0
 1979 0c44 0F20A0E3 		mov	r2, #15
 1980 0c48 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 1981              	.LBE511:
 1982              	.LBE510:
 456:apps/rssi/main.c **** 			fb_putstr("max", framebuffer->width);
 1983              		.loc 2 456 0
 1984 0c4c C8039FE5 		ldr	r0, .L203+100
 1985 0c50 FEFFFFEB 		bl	fb_putstr
 1986              	.LVL144:
 1987              	.LBB512:
 1988              	.LBB513:
 1989              		.loc 1 97 0
 1990 0c54 5C339FE5 		ldr	r3, .L203
 1991 0c58 003093E5 		ldr	r3, [r3]
 1992 0c5c 0220A0E3 		mov	r2, #2
 1993 0c60 3020C3E5 		strb	r2, [r3, #48]
 1994              	.LVL145:
 1995              	.L101:
 1996              	.LBE513:
 1997              	.LBE512:
 459:apps/rssi/main.c **** 		if (pm_scale != 1) {
 1998              		.loc 2 459 0
 1999 0c64 C8939FE5 		ldr	r9, .L203+124
 2000 0c68 042099E5 		ldr	r2, [r9, #4]
 2001 0c6c 010052E3 		cmp	r2, #1
 2002 0c70 1000000A 		beq	.L102
 2003              	.LVL146:
 2004              	.LBB514:
 2005              	.LBB515:
 2006              		.loc 1 97 0
 2007 0c74 003094E5 		ldr	r3, [r4]
 2008 0c78 0010A0E3 		mov	r1, #0
 2009 0c7c 3010C3E5 		strb	r1, [r3, #48]
 2010              	.LVL147:
 2011              	.LBE515:
 2012              	.LBE514:
 2013              	.LBB516:
 2014              	.LBB517:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 2015              		.loc 1 81 0
 2016 0c80 0110A0E3 		mov	r1, #1
 2017 0c84 B412C3E1 		strh	r1, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 2018              		.loc 1 82 0
 2019 0c88 0F10A0E3 		mov	r1, #15
 2020 0c8c B612C3E1 		strh	r1, [r3, #38]	@ movhi
 2021              	.LBE517:
 2022              	.LBE516:
 462:apps/rssi/main.c **** 			sprintf(text, "x%d", pm_scale);
 2023              		.loc 2 462 0
 2024 0c90 18008DE2 		add	r0, sp, #24
 2025 0c94 34149FE5 		ldr	r1, .L203+280
 2026 0c98 FEFFFFEB 		bl	sprintf
 2027              	.LVL148:
 463:apps/rssi/main.c **** 			fb_putstr(text, framebuffer->width);
 2028              		.loc 2 463 0
 2029 0c9c 003094E5 		ldr	r3, [r4]
 2030 0ca0 18008DE2 		add	r0, sp, #24
 2031 0ca4 B012D3E1 		ldrh	r1, [r3, #32]
 2032 0ca8 FEFFFFEB 		bl	fb_putstr
 2033              	.LVL149:
 2034              	.LBB518:
 2035              	.LBB519:
 2036              		.loc 1 97 0
 2037 0cac 003094E5 		ldr	r3, [r4]
 2038 0cb0 0220A0E3 		mov	r2, #2
 2039 0cb4 3020C3E5 		strb	r2, [r3, #48]
 2040              	.LVL150:
 2041              	.L102:
 2042              	.LBE519:
 2043              	.LBE518:
 2044              	.LBB520:
 2045              	.LBB521:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2046              		.loc 1 87 0
 2047 0cb8 003094E5 		ldr	r3, [r4]
 2048 0cbc 0020A0E3 		mov	r2, #0
 2049 0cc0 282083E5 		str	r2, [r3, #40]
 2050              	.LBE521:
 2051              	.LBE520:
 467:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX) {
 2052              		.loc 2 467 0
 2053 0cc4 103095E5 		ldr	r3, [r5, #16]
 2054 0cc8 020053E1 		cmp	r3, r2
 2055 0ccc 0600000A 		beq	.L103
 467:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX) {
 2056              		.loc 2 467 0 is_stmt 0 discriminator 1
 2057 0cd0 E8329FE5 		ldr	r3, .L203+8
 2058 0cd4 B621D3E1 		ldrh	r2, [r3, #22]
 2059 0cd8 40339FE5 		ldr	r3, .L203+104
 2060 0cdc 022C42E2 		sub	r2, r2, #512
 2061 0ce0 0228A0E1 		mov	r2, r2, asl #16
 2062 0ce4 220853E1 		cmp	r3, r2, lsr #16
 2063 0ce8 0400002A 		bcs	.L137
 2064              	.L103:
 471:apps/rssi/main.c **** 			a = band->min;
 2065              		.loc 2 471 0 is_stmt 1
 2066 0cec BC339FE5 		ldr	r3, .L203+248
 2067 0cf0 003093E5 		ldr	r3, [r3]
 2068 0cf4 B080D3E1 		ldrh	r8, [r3]
 2069              	.LVL151:
 472:apps/rssi/main.c **** 			e = band->max;
 2070              		.loc 2 472 0
 2071 0cf8 B4A0D3E1 		ldrh	r10, [r3, #4]
 2072              	.LVL152:
 2073 0cfc 010000EA 		b	.L104
 2074              	.LVL153:
 2075              	.L137:
 469:apps/rssi/main.c **** 			e = PCS_MAX;
 2076              		.loc 2 469 0
 2077 0d00 CCA39FE5 		ldr	r10, .L203+284
 468:apps/rssi/main.c **** 			a = PCS_MIN;
 2078              		.loc 2 468 0
 2079 0d04 028CA0E3 		mov	r8, #512
 2080              	.L104:
 2081              	.LVL154:
 485:apps/rssi/main.c **** 			fb_gotoxy(i, height + 10 - p);
 2082              		.loc 2 485 0
 2083 0d08 0AB087E2 		add	fp, r7, #10
 2084 0d0c 0BB8A0E1 		mov	fp, fp, asl #16
 474:apps/rssi/main.c **** 		for (i = 0; i < framebuffer->width; i++) {
 2085              		.loc 2 474 0
 2086 0d10 0060A0E3 		mov	r6, #0
 485:apps/rssi/main.c **** 			fb_gotoxy(i, height + 10 - p);
 2087              		.loc 2 485 0
 2088 0d14 2BB8A0E1 		mov	fp, fp, lsr #16
 2089              	.LVL155:
 2090              	.L105:
 474:apps/rssi/main.c **** 		for (i = 0; i < framebuffer->width; i++) {
 2091              		.loc 2 474 0 discriminator 1
 2092 0d18 003094E5 		ldr	r3, [r4]
 2093 0d1c B022D3E1 		ldrh	r2, [r3, #32]
 2094 0d20 020056E1 		cmp	r6, r2
 2095 0d24 A220A0E1 		mov	r2, r2, lsr #1
 2096 0d28 290000AA 		bge	.L202
 475:apps/rssi/main.c **** 			p = (arfcn + i - (framebuffer->width >> 1)) & 1023;
 2097              		.loc 2 475 0
 2098 0d2c B611D5E1 		ldrh	r1, [r5, #22]
 2099 0d30 0608A0E1 		mov	r0, r6, asl #16
 2100 0d34 2008A0E1 		mov	r0, r0, lsr #16
 2101              	.LVL156:
 2102 0d38 011062E0 		rsb	r1, r2, r1
 2103 0d3c 011080E0 		add	r1, r0, r1
 2104 0d40 011BA0E1 		mov	r1, r1, asl #22
 476:apps/rssi/main.c **** 			if ((((p - a) & 1023) & 512))
 2105              		.loc 2 476 0
 2106 0d44 2113A0E1 		mov	r1, r1, lsr #6
 2107 0d48 21C8A0E1 		mov	ip, r1, lsr #16
 478:apps/rssi/main.c **** 			if ((((e - p) & 1023) & 512))
 2108              		.loc 2 478 0
 2109 0d4c 0AE06CE0 		rsb	lr, ip, r10
 476:apps/rssi/main.c **** 			if ((((p - a) & 1023) & 512))
 2110              		.loc 2 476 0
 2111 0d50 0CC068E0 		rsb	ip, r8, ip
 2112 0d54 0CC08EE1 		orr	ip, lr, ip
 478:apps/rssi/main.c **** 			if ((((e - p) & 1023) & 512))
 2113              		.loc 2 478 0
 2114 0d58 020C1CE3 		tst	ip, #512
 2115 0d5c 1A00001A 		bne	.L107
 480:apps/rssi/main.c **** 			p = (pm_spectrum[p] * pm_scale * height / 64);
 2116              		.loc 2 480 0
 2117 0d60 60C39FE5 		ldr	ip, .L203+272
 2118 0d64 2118DCE7 		ldrb	r1, [ip, r1, lsr #16]	@ zero_extendqisi2
 2119 0d68 04C099E5 		ldr	ip, [r9, #4]
 2120 0d6c 9C0101E0 		mul	r1, ip, r1
 2121 0d70 970101E0 		mul	r1, r7, r1
 2122 0d74 3FC081E2 		add	ip, r1, #63
 2123 0d78 000051E3 		cmp	r1, #0
 2124 0d7c 0C10A0B1 		movlt	r1, ip
 2125              	.LVL157:
 481:apps/rssi/main.c **** 			if (p > height)
 2126              		.loc 2 481 0
 2127 0d80 0115A0E1 		mov	r1, r1, asl #10
 2128              	.LVL158:
 2129 0d84 2118A0E1 		mov	r1, r1, lsr #16
 2130 0d88 070051E1 		cmp	r1, r7
 2131              	.LVL159:
 482:apps/rssi/main.c **** 				p = height;
 2132              		.loc 2 482 0
 2133 0d8c 0718A0C1 		movgt	r1, r7, asl #16
 2134 0d90 2118A0C1 		movgt	r1, r1, lsr #16
 2135              	.LVL160:
 483:apps/rssi/main.c **** 			if (i == (framebuffer->width >> 1))
 2136              		.loc 2 483 0
 2137 0d94 020056E1 		cmp	r6, r2
 2138              	.LVL161:
 2139              	.LBB522:
 2140              	.LBB523:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2141              		.loc 1 87 0
 2142 0d98 FF28A003 		moveq	r2, #16711680
 2143 0d9c 28208305 		streq	r2, [r3, #40]
 2144              	.LVL162:
 2145              	.LBE523:
 2146              	.LBE522:
 2147              	.LBB524:
 2148              	.LBB525:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 2149              		.loc 1 81 0
 2150 0da0 003094E5 		ldr	r3, [r4]
 2151              	.LBE525:
 2152              	.LBE524:
 485:apps/rssi/main.c **** 			fb_gotoxy(i, height + 10 - p);
 2153              		.loc 2 485 0
 2154 0da4 0B1061E0 		rsb	r1, r1, fp
 2155              	.LVL163:
 2156              	.LBB527:
 2157              	.LBB526:
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 2158              		.loc 1 82 0
 2159 0da8 B612C3E1 		strh	r1, [r3, #38]	@ movhi
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 2160              		.loc 1 81 0
 2161 0dac B402C3E1 		strh	r0, [r3, #36]	@ movhi
 2162              	.LBE526:
 2163              	.LBE527:
 486:apps/rssi/main.c **** 			fb_boxto(i, height + 10);
 2164              		.loc 2 486 0
 2165 0db0 0B10A0E1 		mov	r1, fp
 2166 0db4 FEFFFFEB 		bl	fb_boxto
 2167              	.LVL164:
 487:apps/rssi/main.c **** 			if (i == (framebuffer->width >> 1))
 2168              		.loc 2 487 0
 2169 0db8 003094E5 		ldr	r3, [r4]
 2170 0dbc B022D3E1 		ldrh	r2, [r3, #32]
 2171 0dc0 A20056E1 		cmp	r6, r2, lsr #1
 2172              	.LVL165:
 2173              	.LBB528:
 2174              	.LBB529:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2175              		.loc 1 87 0
 2176 0dc4 0020A003 		moveq	r2, #0
 2177 0dc8 28208305 		streq	r2, [r3, #40]
 2178              	.LVL166:
 2179              	.L107:
 2180              	.LBE529:
 2181              	.LBE528:
 474:apps/rssi/main.c **** 		for (i = 0; i < framebuffer->width; i++) {
 2182              		.loc 2 474 0
 2183 0dcc 016086E2 		add	r6, r6, #1
 2184              	.LVL167:
 2185 0dd0 D0FFFFEA 		b	.L105
 2186              	.L202:
 490:apps/rssi/main.c **** 		i = framebuffer->width >> 1;
 2187              		.loc 2 490 0
 2188 0dd4 0260A0E1 		mov	r6, r2
 2189              	.LVL168:
 2190              	.LBB530:
 2191              	.LBB531:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 2192              		.loc 1 81 0
 2193 0dd8 B422C3E1 		strh	r2, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 2194              		.loc 1 82 0
 2195 0ddc 0020A0E3 		mov	r2, #0
 2196 0de0 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 2197              	.LBE531:
 2198              	.LBE530:
 492:apps/rssi/main.c **** 		fb_boxto(i, 4);
 2199              		.loc 2 492 0
 2200 0de4 0600A0E1 		mov	r0, r6
 2201 0de8 0410A0E3 		mov	r1, #4
 2202 0dec FEFFFFEB 		bl	fb_boxto
 2203              	.LVL169:
 493:apps/rssi/main.c **** 		fb_gotoxy(i, height + 10);
 2204              		.loc 2 493 0
 2205 0df0 0778A0E1 		mov	r7, r7, asl #16
 2206              	.LVL170:
 2207              	.LBB532:
 2208              	.LBB533:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 2209              		.loc 1 81 0
 2210 0df4 BC319FE5 		ldr	r3, .L203
 2211              	.LBE533:
 2212              	.LBE532:
 493:apps/rssi/main.c **** 		fb_gotoxy(i, height + 10);
 2213              		.loc 2 493 0
 2214 0df8 2778A0E1 		mov	r7, r7, lsr #16
 2215              	.LVL171:
 2216              	.LBB536:
 2217              	.LBB534:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 2218              		.loc 1 81 0
 2219 0dfc 003093E5 		ldr	r3, [r3]
 2220              	.LBE534:
 2221              	.LBE536:
 493:apps/rssi/main.c **** 		fb_gotoxy(i, height + 10);
 2222              		.loc 2 493 0
 2223 0e00 0A2087E2 		add	r2, r7, #10
 494:apps/rssi/main.c **** 		fb_boxto(i, height + 14);
 2224              		.loc 2 494 0
 2225 0e04 0E7087E2 		add	r7, r7, #14
 2226              	.LVL172:
 2227 0e08 0718A0E1 		mov	r1, r7, asl #16
 2228              	.LBB537:
 2229              	.LBB535:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 2230              		.loc 1 81 0
 2231 0e0c B462C3E1 		strh	r6, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 2232              		.loc 1 82 0
 2233 0e10 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 2234              	.LBE535:
 2235              	.LBE537:
 494:apps/rssi/main.c **** 		fb_boxto(i, height + 14);
 2236              		.loc 2 494 0
 2237 0e14 0600A0E1 		mov	r0, r6
 2238 0e18 2118A0E1 		mov	r1, r1, lsr #16
 2239 0e1c FEFFFFEB 		bl	fb_boxto
 2240              	.LVL173:
 2241              	.L97:
 2242              	.LBE501:
 2243              	.LBB538:
 2244              	.LBB539:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2245              		.loc 1 87 0
 2246 0e20 003094E5 		ldr	r3, [r4]
 2247              	.LBE539:
 2248              	.LBE538:
 499:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 10);
 2249              		.loc 2 499 0
 2250 0e24 B212D3E1 		ldrh	r1, [r3, #34]
 500:apps/rssi/main.c **** 	fb_boxto(framebuffer->width-1, framebuffer->height - 10);
 2251              		.loc 2 500 0
 2252 0e28 B002D3E1 		ldrh	r0, [r3, #32]
 499:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 10);
 2253              		.loc 2 499 0
 2254 0e2c 0A1041E2 		sub	r1, r1, #10
 2255 0e30 0118A0E1 		mov	r1, r1, asl #16
 500:apps/rssi/main.c **** 	fb_boxto(framebuffer->width-1, framebuffer->height - 10);
 2256              		.loc 2 500 0
 2257 0e34 010040E2 		sub	r0, r0, #1
 2258              	.LBB542:
 2259              	.LBB540:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2260              		.loc 1 87 0
 2261 0e38 FF2CA0E3 		mov	r2, #65280
 2262              	.LBE540:
 2263              	.LBE542:
 499:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 10);
 2264              		.loc 2 499 0
 2265 0e3c 2118A0E1 		mov	r1, r1, lsr #16
 2266              	.LVL174:
 2267              	.LBB543:
 2268              	.LBB544:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 2269              		.loc 1 81 0
 2270 0e40 0060A0E3 		mov	r6, #0
 2271              	.LBE544:
 2272              	.LBE543:
 500:apps/rssi/main.c **** 	fb_boxto(framebuffer->width-1, framebuffer->height - 10);
 2273              		.loc 2 500 0
 2274 0e44 0008A0E1 		mov	r0, r0, asl #16
 2275              	.LBB546:
 2276              	.LBB541:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2277              		.loc 1 87 0
 2278 0e48 282083E5 		str	r2, [r3, #40]
 2279              	.LBE541:
 2280              	.LBE546:
 2281              	.LBB547:
 2282              	.LBB545:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 2283              		.loc 1 81 0
 2284 0e4c B462C3E1 		strh	r6, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 2285              		.loc 1 82 0
 2286 0e50 B612C3E1 		strh	r1, [r3, #38]	@ movhi
 2287              	.LBE545:
 2288              	.LBE547:
 500:apps/rssi/main.c **** 	fb_boxto(framebuffer->width-1, framebuffer->height - 10);
 2289              		.loc 2 500 0
 2290 0e54 2008A0E1 		mov	r0, r0, lsr #16
 2291 0e58 FEFFFFEB 		bl	fb_boxto
 2292              	.LVL175:
 501:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 1);
 2293              		.loc 2 501 0
 2294 0e5c 003094E5 		ldr	r3, [r4]
 2295 0e60 B222D3E1 		ldrh	r2, [r3, #34]
 2296 0e64 012042E2 		sub	r2, r2, #1
 2297              	.LVL176:
 2298              	.LBB548:
 2299              	.LBB549:
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 2300              		.loc 1 82 0
 2301 0e68 B622C3E1 		strh	r2, [r3, #38]	@ movhi
 2302              	.LVL177:
 2303              	.LBE549:
 2304              	.LBE548:
 2305              	.LBB551:
 2306              	.LBB552:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2307              		.loc 1 87 0
 2308 0e6c FF28A0E3 		mov	r2, #16711680
 2309              	.LVL178:
 2310              	.LBE552:
 2311              	.LBE551:
 2312              	.LBB554:
 2313              	.LBB550:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 2314              		.loc 1 81 0
 2315 0e70 B462C3E1 		strh	r6, [r3, #36]	@ movhi
 2316              	.LBE550:
 2317              	.LBE554:
 2318              	.LBB555:
 2319              	.LBB553:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2320              		.loc 1 87 0
 2321 0e74 282083E5 		str	r2, [r3, #40]
 2322              	.LBE553:
 2323              	.LBE555:
 503:apps/rssi/main.c **** 	if (mode == MODE_ARFCN)
 2324              		.loc 2 503 0
 2325 0e78 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 2326              	.LVL179:
 2327 0e7c 020053E3 		cmp	r3, #2
 2328 0e80 0B00001A 		bne	.L113
 504:apps/rssi/main.c **** 		sprintf(text, "%s   %s", (cursor) ? "del " : "back",
 2329              		.loc 2 504 0
 2330 0e84 38319FE5 		ldr	r3, .L203+12
 2331 0e88 003093E5 		ldr	r3, [r3]
 2332 0e8c 44229FE5 		ldr	r2, .L203+288
 2333 0e90 060053E1 		cmp	r3, r6
 2334 0e94 40329FE5 		ldr	r3, .L203+292
 2335 0e98 40C29FE5 		ldr	ip, .L203+296
 2336 0e9c 0320A001 		moveq	r2, r3
 2337 0ea0 3C329FE5 		ldr	r3, .L203+300
 2338 0ea4 18008DE2 		add	r0, sp, #24
 2339 0ea8 38129FE5 		ldr	r1, .L203+304
 2340 0eac 0C30A011 		movne	r3, ip
 2341 0eb0 200000EA 		b	.L200
 2342              	.L113:
 506:apps/rssi/main.c **** 	else if (mode == MODE_SYNC && cursor < 0)
 2343              		.loc 2 506 0
 2344 0eb4 030053E3 		cmp	r3, #3
 2345 0eb8 0900001A 		bne	.L116
 506:apps/rssi/main.c **** 	else if (mode == MODE_SYNC && cursor < 0)
 2346              		.loc 2 506 0 is_stmt 0 discriminator 1
 2347 0ebc 00219FE5 		ldr	r2, .L203+12
 2348 0ec0 002092E5 		ldr	r2, [r2]
 2349 0ec4 000052E3 		cmp	r2, #0
 2350 0ec8 050000AA 		bge	.L116
 507:apps/rssi/main.c **** 		sprintf(text, "%s      %s", "back",
 2351              		.loc 2 507 0 is_stmt 1
 2352 0ecc EC309FE5 		ldr	r3, .L203+8
 2353 0ed0 18008DE2 		add	r0, sp, #24
 2354 0ed4 08E093E5 		ldr	lr, [r3, #8]
 2355 0ed8 0C129FE5 		ldr	r1, .L203+308
 2356 0edc F8219FE5 		ldr	r2, .L203+292
 2357 0ee0 100000EA 		b	.L201
 2358              	.L116:
 509:apps/rssi/main.c **** 	else if (mode == MODE_SYNC || mode == MODE_RACH)
 2359              		.loc 2 509 0
 2360 0ee4 033043E2 		sub	r3, r3, #3
 2361 0ee8 FF3003E2 		and	r3, r3, #255
 2362 0eec 010053E3 		cmp	r3, #1
 2363 0ef0 0400008A 		bhi	.L118
 510:apps/rssi/main.c **** 		sprintf(text, "%s        ", "back");
 2364              		.loc 2 510 0
 2365 0ef4 18008DE2 		add	r0, sp, #24
 2366 0ef8 F0119FE5 		ldr	r1, .L203+312
 2367 0efc D8219FE5 		ldr	r2, .L203+292
 2368 0f00 FEFFFFEB 		bl	sprintf
 2369              	.LVL180:
 2370 0f04 0C0000EA 		b	.L115
 2371              	.LVL181:
 2372              	.L118:
 512:apps/rssi/main.c **** 		sprintf(text, "%s       %s", (pcs) ? "PCS" : "DCS",
 2373              		.loc 2 512 0
 2374 0f08 10C095E5 		ldr	ip, [r5, #16]
 2375 0f0c E0319FE5 		ldr	r3, .L203+316
 2376 0f10 00005CE3 		cmp	ip, #0
 2377 0f14 08E095E5 		ldr	lr, [r5, #8]
 2378 0f18 D8119FE5 		ldr	r1, .L203+320
 2379 0f1c D8219FE5 		ldr	r2, .L203+324
 2380 0f20 18008DE2 		add	r0, sp, #24
 2381 0f24 0320A011 		movne	r2, r3
 2382              	.L201:
 2383 0f28 D0C19FE5 		ldr	ip, .L203+328
 2384 0f2c 00005EE3 		cmp	lr, #0
 2385 0f30 CC319FE5 		ldr	r3, .L203+332
 2386 0f34 0C30A011 		movne	r3, ip
 2387              	.L200:
 2388 0f38 FEFFFFEB 		bl	sprintf
 2389              	.LVL182:
 2390              	.L115:
 514:apps/rssi/main.c **** 	fb_putstr(text, -1);
 2391              		.loc 2 514 0
 2392 0f3c 18008DE2 		add	r0, sp, #24
 2393 0f40 0010E0E3 		mvn	r1, #0
 2394 0f44 FEFFFFEB 		bl	fb_putstr
 2395              	.LVL183:
 2396              	.LBB556:
 2397              	.LBB557:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2398              		.loc 1 87 0
 2399 0f48 003094E5 		ldr	r3, [r4]
 2400              	.LBE557:
 2401              	.LBE556:
 517:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 2);
 2402              		.loc 2 517 0
 2403 0f4c B212D3E1 		ldrh	r1, [r3, #34]
 2404              	.LBB560:
 2405              	.LBB558:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2406              		.loc 1 87 0
 2407 0f50 0020A0E3 		mov	r2, #0
 2408              	.LBE558:
 2409              	.LBE560:
 517:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 2);
 2410              		.loc 2 517 0
 2411 0f54 021041E2 		sub	r1, r1, #2
 2412              	.LBB561:
 2413              	.LBB559:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2414              		.loc 1 87 0
 2415 0f58 282083E5 		str	r2, [r3, #40]
 2416              	.LVL184:
 2417              	.LBE559:
 2418              	.LBE561:
 2419              	.LBB562:
 2420              	.LBB563:
 2421              		.loc 1 97 0
 2422 0f5c 3020C3E5 		strb	r2, [r3, #48]
 2423              	.LBE563:
 2424              	.LBE562:
 2425              	.LBB564:
 2426              	.LBB565:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
 2427              		.loc 1 81 0
 2428 0f60 B422C3E1 		strh	r2, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
 2429              		.loc 1 82 0
 2430 0f64 B612C3E1 		strh	r1, [r3, #38]	@ movhi
 2431              	.LBE565:
 2432              	.LBE564:
 518:apps/rssi/main.c **** 	sprintf(text, "%d", tone / 25);
 2433              		.loc 2 518 0
 2434 0f68 180095E5 		ldr	r0, [r5, #24]
 2435 0f6c 1910A0E3 		mov	r1, #25
 2436              	.LVL185:
 2437 0f70 FEFFFFEB 		bl	__aeabi_idiv
 2438              	.LVL186:
 2439 0f74 8C119FE5 		ldr	r1, .L203+336
 2440 0f78 0020A0E1 		mov	r2, r0
 2441 0f7c 18008DE2 		add	r0, sp, #24
 2442 0f80 FEFFFFEB 		bl	sprintf
 2443              	.LVL187:
 519:apps/rssi/main.c **** 	fb_putstr(text, -1);
 2444              		.loc 2 519 0
 2445 0f84 0010E0E3 		mvn	r1, #0
 2446 0f88 18008DE2 		add	r0, sp, #24
 2447 0f8c FEFFFFEB 		bl	fb_putstr
 2448              	.LVL188:
 2449              	.LBB566:
 2450              	.LBB567:
  76:include/fb/framebuffer.h **** 	framebuffer->flush();
 2451              		.loc 1 76 0
 2452 0f90 003094E5 		ldr	r3, [r4]
 2453 0f94 1CC093E5 		ldr	ip, [r3, #28]
 2454 0f98 0FE0A0E1 		mov	lr, pc
 2455 0f9c 1CFF2FE1 		bx	ip
 2456              	.LVL189:
 2457              	.LBE567:
 2458              	.LBE566:
 522:apps/rssi/main.c **** }
 2459              		.loc 2 522 0
 2460 0fa0 2CD08DE2 		add	sp, sp, #44
 2461              		@ sp needed
 2462 0fa4 F04FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2463 0fa8 1EFF2FE1 		bx	lr
 2464              	.LVL190:
 2465              	.L123:
 2466 0fac 4220A0E3 		mov	r2, #66
 2467              	.L31:
 2468 0fb0 4130A0E3 		mov	r3, #65
 2469 0fb4 4DFCFFEA 		b	.L121
 2470              	.L204:
 2471              		.align	2
 2472              	.L203:
 2473 0fb8 00000000 		.word	framebuffer
 2474 0fbc 00000000 		.word	battery_info
 2475 0fc0 00000000 		.word	.LANCHOR0
 2476 0fc4 00000000 		.word	cursor
 2477 0fc8 46000000 		.word	.LC11
 2478 0fcc 00C0C000 		.word	12632064
 2479 0fd0 57000000 		.word	.LC12
 2480 0fd4 5D000000 		.word	.LC13
 2481 0fd8 00000000 		.word	power
 2482 0fdc 66000000 		.word	.LC14
 2483 0fe0 00000000 		.word	jiffies
 2484 0fe4 00000000 		.word	assign
 2485 0fe8 00000000 		.word	rach_when
 2486 0fec 70000000 		.word	.LC15
 2487 0ff0 00000000 		.word	ta
 2488 0ff4 7D000000 		.word	.LC16
 2489 0ff8 2A020000 		.word	554
 2490 0ffc 85000000 		.word	.LC17
 2491 1000 8B000000 		.word	.LC18
 2492 1004 95000000 		.word	.LC19
 2493 1008 A1000000 		.word	.LC20
 2494 100c A9000000 		.word	.LC21
 2495 1010 00000000 		.word	ul_max
 2496 1014 00000000 		.word	ul_levels
 2497 1018 B5000000 		.word	.LC22
 2498 101c BA000000 		.word	.LC23
 2499 1020 2A010000 		.word	298
 2500 1024 BE000000 		.word	.LC24
 2501 1028 75010000 		.word	373
 2502 102c C3000000 		.word	.LC25
 2503 1030 C8000000 		.word	.LC26
 2504 1034 00000000 		.word	.LANCHOR1
 2505 1038 00000000 		.word	bsic
 2506 103c CD000000 		.word	.LC27
 2507 1040 DB000000 		.word	.LC28
 2508 1044 00000000 		.word	si_1
 2509 1048 00000000 		.word	si_2
 2510 104c 00000000 		.word	si_2bis
 2511 1050 00000000 		.word	si_2ter
 2512 1054 00000000 		.word	si_3
 2513 1058 00000000 		.word	si_4
 2514 105c E3000000 		.word	.LC29
 2515 1060 00000000 		.word	mcc
 2516 1064 00000000 		.word	mnc
 2517 1068 00000000 		.word	lac
 2518 106c F0000000 		.word	.LC30
 2519 1070 FF000000 		.word	.LC31
 2520 1074 0D010000 		.word	.LC32
 2521 1078 27010000 		.word	.LC34
 2522 107c 00000000 		.word	cell_id
 2523 1080 1A010000 		.word	.LC33
 2524 1084 00000000 		.word	freq
 2525 1088 34010000 		.word	.LC35
 2526 108c 3B010000 		.word	.LC36
 2527 1090 40010000 		.word	.LC37
 2528 1094 00000000 		.word	nb_num
 2529 1098 47010000 		.word	.LC38
 2530 109c 00000000 		.word	input
 2531 10a0 50010000 		.word	.LC39
 2532 10a4 5C010000 		.word	.LC40
 2533 10a8 68010000 		.word	.LC41
 2534 10ac 71010000 		.word	.LC42
 2535 10b0 00000000 		.word	band
 2536 10b4 46480000 		.word	18502
 2537 10b8 664B0000 		.word	19302
 2538 10bc 73010000 		.word	.LC43
 2539 10c0 00000000 		.word	max_power
 2540 10c4 7F010000 		.word	.LC44
 2541 10c8 00000000 		.word	pm_spectrum
 2542 10cc 88010000 		.word	.LC45
 2543 10d0 8F010000 		.word	.LC46
 2544 10d4 2A030000 		.word	810
 2545 10d8 22000000 		.word	.LC3
 2546 10dc 2D000000 		.word	.LC5
 2547 10e0 27000000 		.word	.LC4
 2548 10e4 32000000 		.word	.LC6
 2549 10e8 93010000 		.word	.LC47
 2550 10ec 9B010000 		.word	.LC48
 2551 10f0 A6010000 		.word	.LC49
 2552 10f4 3E000000 		.word	.LC9
 2553 10f8 B1010000 		.word	.LC50
 2554 10fc 42000000 		.word	.LC10
 2555 1100 38000000 		.word	.LC7
 2556 1104 3B000000 		.word	.LC8
 2557 1108 BD010000 		.word	.LC51
 2558              		.cfi_endproc
 2559              	.LFE110:
 2561              		.section	.text.inc_dec_arfcn,"ax",%progbits
 2562              		.align	2
 2564              	inc_dec_arfcn:
 2565              	.LFB113:
 600:apps/rssi/main.c **** {
 2566              		.loc 2 600 0
 2567              		.cfi_startproc
 2568              		@ Function supports interworking.
 2569              		@ args = 0, pretend = 0, frame = 0
 2570              		@ frame_needed = 0, uses_anonymous_args = 0
 2571              	.LVL191:
 2572 0000 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 2573              	.LCFI7:
 2574              		.cfi_def_cfa_offset 24
 2575              		.cfi_offset 4, -24
 2576              		.cfi_offset 5, -20
 2577              		.cfi_offset 6, -16
 2578              		.cfi_offset 7, -12
 2579              		.cfi_offset 8, -8
 2580              		.cfi_offset 14, -4
 2581 0004 4C319FE5 		ldr	r3, .L238
 607:apps/rssi/main.c **** 			if (arfcn >= band->min && arfcn <= band->max)
 2582              		.loc 2 607 0
 2583 0008 4C619FE5 		ldr	r6, .L238+4
 2584 000c 00C093E5 		ldr	ip, [r3]
 2585 0010 B651D6E1 		ldrh	r5, [r6, #22]
 2586 0014 44819FE5 		ldr	r8, .L238+8
 604:apps/rssi/main.c **** 	for (i = 0; bands[i].max; i++) {
 2587              		.loc 2 604 0
 2588 0018 0040A0E3 		mov	r4, #0
 2589              	.LVL192:
 2590              	.L206:
 2591 001c 042088E0 		add	r2, r8, r4
 604:apps/rssi/main.c **** 	for (i = 0; bands[i].max; i++) {
 2592              		.loc 2 604 0 is_stmt 0 discriminator 1
 2593 0020 041092E5 		ldr	r1, [r2, #4]
 2594 0024 000051E3 		cmp	r1, #0
 2595 0028 30719FE5 		ldr	r7, .L238+8
 2596 002c 0C00000A 		beq	.L235
 606:apps/rssi/main.c **** 		if (band->min < band->max) {
 2597              		.loc 2 606 0 is_stmt 1
 2598 0030 04C098E7 		ldr	ip, [r8, r4]
 2599 0034 01005CE1 		cmp	ip, r1
 2600 0038 020000AA 		bge	.L207
 607:apps/rssi/main.c **** 			if (arfcn >= band->min && arfcn <= band->max)
 2601              		.loc 2 607 0
 2602 003c 0C0055E1 		cmp	r5, ip
 2603 0040 040000BA 		blt	.L208
 2604 0044 010000EA 		b	.L210
 2605              	.L207:
 610:apps/rssi/main.c **** 			if (arfcn >= band->min || arfcn <= band->max)
 2606              		.loc 2 610 0
 2607 0048 0C0055E1 		cmp	r5, ip
 2608 004c 070000AA 		bge	.L209
 2609              	.L210:
 610:apps/rssi/main.c **** 			if (arfcn >= band->min || arfcn <= band->max)
 2610              		.loc 2 610 0 is_stmt 0 discriminator 1
 2611 0050 010055E1 		cmp	r5, r1
 2612 0054 050000DA 		ble	.L209
 2613              	.L208:
 2614 0058 184084E2 		add	r4, r4, #24
 605:apps/rssi/main.c **** 		band = &bands[i];
 2615              		.loc 2 605 0 is_stmt 1
 2616 005c 02C0A0E1 		mov	ip, r2
 2617 0060 EDFFFFEA 		b	.L206
 2618              	.L235:
 2619 0064 00C083E5 		str	ip, [r3]
 2620              	.LVL193:
 2621              	.L226:
 615:apps/rssi/main.c **** 		return -EINVAL;
 2622              		.loc 2 615 0
 2623 0068 1500E0E3 		mvn	r0, #21
 2624 006c 370000EA 		b	.L229
 2625              	.LVL194:
 2626              	.L209:
 617:apps/rssi/main.c **** 	if (inc) {
 2627              		.loc 2 617 0
 2628 0070 000050E3 		cmp	r0, #0
 2629 0074 002083E5 		str	r2, [r3]
 2630 0078 1000000A 		beq	.L236
 618:apps/rssi/main.c **** 		if (arfcn == band->max)
 2631              		.loc 2 618 0
 2632 007c B6C1D6E1 		ldrh	ip, [r6, #22]
 2633 0080 01005CE1 		cmp	ip, r1
 2634 0084 D0009FE5 		ldr	r0, .L238+4
 2635              	.LVL195:
 619:apps/rssi/main.c **** 			arfcn = band->next;
 2636              		.loc 2 619 0
 2637 0088 0C209205 		ldreq	r2, [r2, #12]
 618:apps/rssi/main.c **** 		if (arfcn == band->max)
 2638              		.loc 2 618 0
 2639 008c 0500000A 		beq	.L232
 620:apps/rssi/main.c **** 		else if (arfcn == 1023)
 2640              		.loc 2 620 0
 2641 0090 CC209FE5 		ldr	r2, .L238+12
 2642 0094 02005CE1 		cmp	ip, r2
 623:apps/rssi/main.c **** 			arfcn++;
 2643              		.loc 2 623 0
 2644 0098 01C08C12 		addne	ip, ip, #1
 2645 009c B6C1C011 		strneh	ip, [r0, #22]	@ movhi
 620:apps/rssi/main.c **** 		else if (arfcn == 1023)
 2646              		.loc 2 620 0
 2647 00a0 0100001A 		bne	.L215
 621:apps/rssi/main.c **** 			arfcn = 0;
 2648              		.loc 2 621 0
 2649 00a4 0020A0E3 		mov	r2, #0
 2650              	.L232:
 2651 00a8 B621C0E1 		strh	r2, [r0, #22]	@ movhi
 2652              	.L215:
 636:apps/rssi/main.c **** 			if (arfcn >= band->min && arfcn <= band->max)
 2653              		.loc 2 636 0 discriminator 1
 2654 00ac B6C1D6E1 		ldrh	ip, [r6, #22]
 2655 00b0 004093E5 		ldr	r4, [r3]
 2656 00b4 0000A0E3 		mov	r0, #0
 2657 00b8 A0509FE5 		ldr	r5, .L238+8
 2658 00bc 140000EA 		b	.L217
 2659              	.LVL196:
 2660              	.L236:
 625:apps/rssi/main.c **** 		if (arfcn == band->min)
 2661              		.loc 2 625 0
 2662 00c0 B601D6E1 		ldrh	r0, [r6, #22]
 2663              	.LVL197:
 2664 00c4 0C0050E1 		cmp	r0, ip
 2665 00c8 8C109FE5 		ldr	r1, .L238+4
 626:apps/rssi/main.c **** 			arfcn = band->prev;
 2666              		.loc 2 626 0
 2667 00cc 08209205 		ldreq	r2, [r2, #8]
 625:apps/rssi/main.c **** 		if (arfcn == band->min)
 2668              		.loc 2 625 0
 2669 00d0 0200000A 		beq	.L231
 627:apps/rssi/main.c **** 		else if (arfcn == 0)
 2670              		.loc 2 627 0
 2671 00d4 000050E3 		cmp	r0, #0
 2672 00d8 0200001A 		bne	.L219
 628:apps/rssi/main.c **** 			arfcn = 1023;
 2673              		.loc 2 628 0
 2674 00dc 3F2BE0E3 		mvn	r2, #64512
 2675              	.L231:
 2676 00e0 B621C1E1 		strh	r2, [r1, #22]	@ movhi
 2677 00e4 F0FFFFEA 		b	.L215
 2678              	.L219:
 630:apps/rssi/main.c **** 			arfcn--;
 2679              		.loc 2 630 0
 2680 00e8 010040E2 		sub	r0, r0, #1
 2681 00ec B601C1E1 		strh	r0, [r1, #22]	@ movhi
 2682 00f0 EDFFFFEA 		b	.L215
 2683              	.L225:
 635:apps/rssi/main.c **** 		if (band->min < band->max) {
 2684              		.loc 2 635 0
 2685 00f4 054090E7 		ldr	r4, [r0, r5]
 2686 00f8 010054E1 		cmp	r4, r1
 2687 00fc 0260A0E1 		mov	r6, r2
 2688 0100 080000AA 		bge	.L220
 636:apps/rssi/main.c **** 			if (arfcn >= band->min && arfcn <= band->max)
 2689              		.loc 2 636 0
 2690 0104 04005CE1 		cmp	ip, r4
 2691 0108 080000AA 		bge	.L223
 2692              	.L221:
 2693 010c 180080E2 		add	r0, r0, #24
 634:apps/rssi/main.c **** 		band = &bands[i];
 2694              		.loc 2 634 0
 2695 0110 0640A0E1 		mov	r4, r6
 2696              	.L217:
 2697 0114 002087E0 		add	r2, r7, r0
 633:apps/rssi/main.c **** 	for (i = 0; bands[i].max; i++) {
 2698              		.loc 2 633 0 discriminator 1
 2699 0118 041092E5 		ldr	r1, [r2, #4]
 2700 011c 000051E3 		cmp	r1, #0
 2701 0120 F3FFFF1A 		bne	.L225
 2702 0124 040000EA 		b	.L237
 2703              	.L220:
 639:apps/rssi/main.c **** 			if (arfcn >= band->min || arfcn <= band->max)
 2704              		.loc 2 639 0
 2705 0128 04005CE1 		cmp	ip, r4
 2706 012c 040000AA 		bge	.L222
 2707              	.L223:
 639:apps/rssi/main.c **** 			if (arfcn >= band->min || arfcn <= band->max)
 2708              		.loc 2 639 0 is_stmt 0 discriminator 1
 2709 0130 01005CE1 		cmp	ip, r1
 2710 0134 F4FFFFCA 		bgt	.L221
 2711 0138 010000EA 		b	.L222
 2712              	.L237:
 2713 013c 004083E5 		str	r4, [r3]
 2714 0140 C8FFFFEA 		b	.L226
 2715              	.L222:
 2716 0144 002083E5 		str	r2, [r3]
 646:apps/rssi/main.c **** 	refresh_display();
 2717              		.loc 2 646 0 is_stmt 1
 2718 0148 FEFFFFEB 		bl	refresh_display
 2719              	.LVL198:
 648:apps/rssi/main.c **** 	return 0;
 2720              		.loc 2 648 0
 2721 014c 0000A0E3 		mov	r0, #0
 2722              	.L229:
 649:apps/rssi/main.c **** }
 2723              		.loc 2 649 0
 2724 0150 F041BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 2725 0154 1EFF2FE1 		bx	lr
 2726              	.L239:
 2727              		.align	2
 2728              	.L238:
 2729 0158 00000000 		.word	band
 2730 015c 00000000 		.word	.LANCHOR0
 2731 0160 08000000 		.word	.LANCHOR1+8
 2732 0164 FF030000 		.word	1023
 2733              		.cfi_endproc
 2734              	.LFE113:
 2736              		.section	.text.msgb_put,"ax",%progbits
 2737              		.align	2
 2739              	msgb_put:
 2740              	.LFB47:
 2741              		.file 3 "../../shared/libosmocore/include/osmocom/core/msgb.h"
   1:../../shared/libosmocore/include/osmocom/core/msgb.h **** #ifndef _MSGB_H
   2:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define _MSGB_H
   3:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
   4:../../shared/libosmocore/include/osmocom/core/msgb.h **** /* (C) 2008 by Harald Welte <laforge@gnumonks.org>
   5:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * All Rights Reserved
   6:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
   7:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This program is free software; you can redistribute it and/or modify
   8:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * it under the terms of the GNU General Public License as published by
   9:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * the Free Software Foundation; either version 2 of the License, or
  10:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * (at your option) any later version.
  11:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
  12:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This program is distributed in the hope that it will be useful,
  13:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * GNU General Public License for more details.
  16:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
  17:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * You should have received a copy of the GNU General Public License along
  18:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
  21:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
  22:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  23:../../shared/libosmocore/include/osmocom/core/msgb.h **** #include <stdint.h>
  24:../../shared/libosmocore/include/osmocom/core/msgb.h **** #include <osmocom/core/linuxlist.h>
  25:../../shared/libosmocore/include/osmocom/core/msgb.h **** #include <osmocom/core/utils.h>
  26:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  27:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \defgroup msgb Message buffers
  28:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  @{
  29:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
  30:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  31:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \file msgb.h
  32:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \brief Osmocom message buffers
  33:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * The Osmocom message buffers are modelled after the 'struct skb'
  34:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * inside the Linux kernel network stack.  As they exist in userspace,
  35:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * they are much simplified.  However, terminology such as headroom,
  36:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * tailroom, push/pull/put etc. remains the same.
  37:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
  38:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  39:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define MSGB_DEBUG
  40:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  41:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief Osmocom message buffer */
  42:../../shared/libosmocore/include/osmocom/core/msgb.h **** struct msgb {
  43:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	struct llist_head list; /*!< \brief linked list header */
  44:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  45:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  46:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	/* Part of which TRX logical channel we were received / transmitted */
  47:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	/* FIXME: move them into the control buffer */
  48:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	union {
  49:../../shared/libosmocore/include/osmocom/core/msgb.h **** 		void *dst; /*!< \brief reference of origin/destination */
  50:../../shared/libosmocore/include/osmocom/core/msgb.h **** 		struct gsm_bts_trx *trx;
  51:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	};
  52:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	struct gsm_lchan *lchan; /*!< \brief logical channel */
  53:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  54:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *l1h; /*!< \brief pointer to Layer1 header (if any) */
  55:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *l2h; /*!< \brief pointer to A-bis layer 2 header: OML, RSL(RLL), NS */
  56:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *l3h; /*!< \brief pointer to Layer 3 header. For OML: FOM; RSL: 04.08; GPRS: BSSGP *
  57:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *l4h; /*!< \brief pointer to layer 4 header */
  58:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  59:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned long cb[5]; /*!< \brief control buffer */
  60:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  61:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	uint16_t data_len;   /*!< \brief length of underlying data array */
  62:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	uint16_t len;	     /*!< \brief length of bytes used in msgb */
  63:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  64:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *head;	/*!< \brief start of underlying memory buffer */
  65:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *tail;	/*!< \brief end of message in buffer */
  66:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *data;	/*!< \brief start of message in buffer */
  67:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char _data[0]; /*!< \brief optional immediate data array */
  68:../../shared/libosmocore/include/osmocom/core/msgb.h **** };
  69:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  70:../../shared/libosmocore/include/osmocom/core/msgb.h **** extern struct msgb *msgb_alloc(uint16_t size, const char *name);
  71:../../shared/libosmocore/include/osmocom/core/msgb.h **** extern void msgb_free(struct msgb *m);
  72:../../shared/libosmocore/include/osmocom/core/msgb.h **** extern void msgb_enqueue(struct llist_head *queue, struct msgb *msg);
  73:../../shared/libosmocore/include/osmocom/core/msgb.h **** extern struct msgb *msgb_dequeue(struct llist_head *queue);
  74:../../shared/libosmocore/include/osmocom/core/msgb.h **** extern void msgb_reset(struct msgb *m);
  75:../../shared/libosmocore/include/osmocom/core/msgb.h **** uint16_t msgb_length(const struct msgb *msg);
  76:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  77:../../shared/libosmocore/include/osmocom/core/msgb.h **** #ifdef MSGB_DEBUG
  78:../../shared/libosmocore/include/osmocom/core/msgb.h **** #include <osmocom/core/panic.h>
  79:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define MSGB_ABORT(msg, fmt, args ...) do {		\
  80:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	osmo_panic("msgb(%p): " fmt, msg, ## args);	\
  81:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	} while(0)
  82:../../shared/libosmocore/include/osmocom/core/msgb.h **** #else
  83:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define MSGB_ABORT(msg, fmt, args ...)
  84:../../shared/libosmocore/include/osmocom/core/msgb.h **** #endif
  85:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  86:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief obtain L1 header of msgb */
  87:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define msgb_l1(m)	((void *)(m->l1h))
  88:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief obtain L2 header of msgb */
  89:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define msgb_l2(m)	((void *)(m->l2h))
  90:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief obtain L3 header of msgb */
  91:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define msgb_l3(m)	((void *)(m->l3h))
  92:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief obtain SMS header of msgb */
  93:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define msgb_sms(m)	((void *)(m->l4h))
  94:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  95:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief determine length of L1 message
  96:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
  97:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns size of L1 message in bytes
  98:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
  99:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function computes the number of bytes between the tail of the
 100:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * message and the layer 1 header.
 101:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 102:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline unsigned int msgb_l1len(const struct msgb *msgb)
 103:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 104:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l1(msgb);
 105:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 106:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 107:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief determine length of L2 message
 108:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 109:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns size of L2 message in bytes
 110:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 111:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function computes the number of bytes between the tail of the
 112:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * message and the layer 2 header.
 113:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 114:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline unsigned int msgb_l2len(const struct msgb *msgb)
 115:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 116:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l2(msgb);
 117:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 118:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 119:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief determine length of L3 message
 120:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 121:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns size of L3 message in bytes
 122:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 123:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function computes the number of bytes between the tail of the
 124:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * message and the layer 3 header.
 125:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 126:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline unsigned int msgb_l3len(const struct msgb *msgb)
 127:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 128:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l3(msgb);
 129:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 130:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 131:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief determine the length of the header
 132:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 133:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns number of bytes between start of buffer and start of msg
 134:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 135:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function computes the length difference between the underlying
 136:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * data buffer and the used section of the \a msgb.
 137:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 138:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline unsigned int msgb_headlen(const struct msgb *msgb)
 139:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 140:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->len - msgb->data_len;
 141:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 142:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 143:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief determine how much tail room is left in msgb
 144:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 145:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns number of bytes remaining at end of msgb
 146:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 147:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function computes the amount of octets left in the underlying
 148:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * data buffer after the end of the message.
 149:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 150:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline int msgb_tailroom(const struct msgb *msgb)
 151:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 152:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return (msgb->head + msgb->data_len) - msgb->tail;
 153:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 154:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 155:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief determine the amount of headroom in msgb
 156:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 157:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns number of bytes left ahead of message start in msgb
 158:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 159:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function computes the amount of bytes left in the underlying
 160:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * data buffer before the start of the actual message.
 161:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 162:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline int msgb_headroom(const struct msgb *msgb)
 163:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 164:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return (msgb->data - msgb->head);
 165:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 166:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 167:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief append data to end of message buffer
 168:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 169:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] len number of bytes to append to message
 170:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns pointer to start of newly-appended data
 171:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 172:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function will move the \a tail pointer of the message buffer \a
 173:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * len bytes further, thus enlarging the message by \a len bytes.
 174:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 175:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * The return value is a pointer to start of the newly added section at
 176:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * the end of the message and can be used for actually filling/copying
 177:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * data into it.
 178:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 179:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline unsigned char *msgb_put(struct msgb *msgb, unsigned int len)
 180:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 2742              		.loc 3 180 0
 2743              		.cfi_startproc
 2744              		@ Function supports interworking.
 2745              		@ args = 0, pretend = 0, frame = 0
 2746              		@ frame_needed = 0, uses_anonymous_args = 0
 2747              	.LVL199:
 2748              	.LBB570:
 2749              	.LBB571:
 152:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return (msgb->head + msgb->data_len) - msgb->tail;
 2750              		.loc 3 152 0
 2751 0000 B433D0E1 		ldrh	r3, [r0, #52]
 2752 0004 382090E5 		ldr	r2, [r0, #56]
 2753              	.LBE571:
 2754              	.LBE570:
 2755              		.loc 3 180 0
 2756 0008 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 2757              	.LCFI8:
 2758              		.cfi_def_cfa_offset 16
 2759              		.cfi_offset 4, -16
 2760              		.cfi_offset 5, -12
 2761              		.cfi_offset 6, -8
 2762              		.cfi_offset 14, -4
 181:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *tmp = msgb->tail;
 2763              		.loc 3 181 0
 2764 000c 3C6090E5 		ldr	r6, [r0, #60]
 2765              	.LVL200:
 2766              	.LBB573:
 2767              	.LBB572:
 152:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return (msgb->head + msgb->data_len) - msgb->tail;
 2768              		.loc 3 152 0
 2769 0010 032082E0 		add	r2, r2, r3
 2770 0014 022066E0 		rsb	r2, r6, r2
 2771              	.LBE572:
 2772              	.LBE573:
 182:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	if (msgb_tailroom(msgb) < (int) len)
 2773              		.loc 3 182 0
 2774 0018 010052E1 		cmp	r2, r1
 180:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 2775              		.loc 3 180 0
 2776 001c 0040A0E1 		mov	r4, r0
 2777 0020 0150A0E1 		mov	r5, r1
 2778              		.loc 3 182 0
 183:../../shared/libosmocore/include/osmocom/core/msgb.h **** 		MSGB_ABORT(msgb, "Not enough tailroom msgb_push (%u < %u)\n",
 2779              		.loc 3 183 0
 2780 0024 2C009FB5 		ldrlt	r0, .L242
 2781              	.LVL201:
 2782 0028 0410A0B1 		movlt	r1, r4
 2783              	.LVL202:
 2784 002c 0530A0B1 		movlt	r3, r5
 2785 0030 FEFFFFBB 		bllt	osmo_panic
 2786              	.LVL203:
 2787              	.L241:
 184:../../shared/libosmocore/include/osmocom/core/msgb.h **** 			   msgb_tailroom(msgb), len);
 185:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->tail += len;
 2788              		.loc 3 185 0
 2789 0034 3C3094E5 		ldr	r3, [r4, #60]
 2790 0038 053083E0 		add	r3, r3, r5
 2791 003c 3C3084E5 		str	r3, [r4, #60]
 186:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->len += len;
 2792              		.loc 3 186 0
 2793 0040 B633D4E1 		ldrh	r3, [r4, #54]
 2794 0044 035085E0 		add	r5, r5, r3
 2795              	.LVL204:
 187:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return tmp;
 188:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 2796              		.loc 3 188 0
 2797 0048 0600A0E1 		mov	r0, r6
 186:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->len += len;
 2798              		.loc 3 186 0
 2799 004c B653C4E1 		strh	r5, [r4, #54]	@ movhi
 2800              		.loc 3 188 0
 2801 0050 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 2802              	.LVL205:
 2803 0054 1EFF2FE1 		bx	lr
 2804              	.L243:
 2805              		.align	2
 2806              	.L242:
 2807 0058 C0010000 		.word	.LC52
 2808              		.cfi_endproc
 2809              	.LFE47:
 2811              		.section	.text.request_ul_levels,"ax",%progbits
 2812              		.align	2
 2814              	request_ul_levels:
 2815              	.LFB128:
1061:apps/rssi/main.c **** {
 2816              		.loc 2 1061 0
 2817              		.cfi_startproc
 2818              		@ Function supports interworking.
 2819              		@ args = 0, pretend = 0, frame = 0
 2820              		@ frame_needed = 0, uses_anonymous_args = 0
 2821              	.LVL206:
 2822 0000 38402DE9 		stmfd	sp!, {r3, r4, r5, lr}
 2823              	.LCFI9:
 2824              		.cfi_def_cfa_offset 16
 2825              		.cfi_offset 3, -16
 2826              		.cfi_offset 4, -12
 2827              		.cfi_offset 5, -8
 2828              		.cfi_offset 14, -4
1061:apps/rssi/main.c **** {
 2829              		.loc 2 1061 0
 2830 0004 0040A0E1 		mov	r4, r0
1062:apps/rssi/main.c **** 	struct msgb *msg = l1ctl_msgb_alloc(L1CTL_NEIGH_PM_REQ);
 2831              		.loc 2 1062 0
 2832 0008 1A00A0E3 		mov	r0, #26
 2833              	.LVL207:
 2834 000c FEFFFFEB 		bl	l1ctl_msgb_alloc
 2835              	.LVL208:
1063:apps/rssi/main.c **** 	struct l1ctl_neigh_pm_req *pm_req =
 2836              		.loc 2 1063 0
 2837 0010 C210A0E3 		mov	r1, #194
1062:apps/rssi/main.c **** 	struct msgb *msg = l1ctl_msgb_alloc(L1CTL_NEIGH_PM_REQ);
 2838              		.loc 2 1062 0
 2839 0014 0050A0E1 		mov	r5, r0
 2840              	.LVL209:
1063:apps/rssi/main.c **** 	struct l1ctl_neigh_pm_req *pm_req =
 2841              		.loc 2 1063 0
 2842 0018 FEFFFFEB 		bl	msgb_put
 2843              	.LVL210:
1067:apps/rssi/main.c **** 	if (pcs && a >= PCS_MIN && a <= PCS_MAX)
 2844              		.loc 2 1067 0
 2845 001c 84309FE5 		ldr	r3, .L256
 2846 0020 102093E5 		ldr	r2, [r3, #16]
 2847 0024 000052E3 		cmp	r2, #0
 2848 0028 0400000A 		beq	.L245
1067:apps/rssi/main.c **** 	if (pcs && a >= PCS_MIN && a <= PCS_MAX)
 2849              		.loc 2 1067 0 is_stmt 0 discriminator 1
 2850 002c 021C44E2 		sub	r1, r4, #512
 2851 0030 74209FE5 		ldr	r2, .L256+4
 2852 0034 0118A0E1 		mov	r1, r1, asl #16
 2853 0038 210852E1 		cmp	r2, r1, lsr #16
1068:apps/rssi/main.c **** 		a |= ARFCN_PCS;
 2854              		.loc 2 1068 0 is_stmt 1 discriminator 1
 2855 003c 02498423 		orrcs	r4, r4, #32768
 2856              	.LVL211:
 2857              	.L245:
1069:apps/rssi/main.c **** 	if (uplink)
 2858              		.loc 2 1069 0
 2859 0040 083093E5 		ldr	r3, [r3, #8]
 2860 0044 000053E3 		cmp	r3, #0
1070:apps/rssi/main.c **** 		a |= ARFCN_UPLINK;
 2861              		.loc 2 1070 0
 2862 0048 01498413 		orrne	r4, r4, #16384
 2863              	.LVL212:
1071:apps/rssi/main.c **** 	pm_req->n = 8;
 2864              		.loc 2 1071 0
 2865 004c 0830A0E3 		mov	r3, #8
 2866 0050 0030C0E5 		strb	r3, [r0]
 2867              	.LVL213:
 2868              	.LBB574:
 2869              	.LBB575:
 2870              		.file 4 "include/swab.h"
   1:include/swab.h **** #ifndef _LINUX_SWAB_H
   2:include/swab.h **** #define _LINUX_SWAB_H
   3:include/swab.h **** 
   4:include/swab.h **** #include <stdint.h>
   5:include/swab.h **** #include <defines.h>
   6:include/swab.h **** #include <asm/swab.h>
   7:include/swab.h **** 
   8:include/swab.h **** /*
   9:include/swab.h ****  * casts are necessary for constants, because we never know how for sure
  10:include/swab.h ****  * how U/UL/ULL map to uint16_t, uint32_t, uint64_t. At least not in a portable way.
  11:include/swab.h ****  */
  12:include/swab.h **** #define ___constant_swab16(x) ((uint16_t)(				\
  13:include/swab.h **** 	(((uint16_t)(x) & (uint16_t)0x00ffU) << 8) |			\
  14:include/swab.h **** 	(((uint16_t)(x) & (uint16_t)0xff00U) >> 8)))
  15:include/swab.h **** 
  16:include/swab.h **** #define ___constant_swab32(x) ((uint32_t)(				\
  17:include/swab.h **** 	(((uint32_t)(x) & (uint32_t)0x000000ffUL) << 24) |		\
  18:include/swab.h **** 	(((uint32_t)(x) & (uint32_t)0x0000ff00UL) <<  8) |		\
  19:include/swab.h **** 	(((uint32_t)(x) & (uint32_t)0x00ff0000UL) >>  8) |		\
  20:include/swab.h **** 	(((uint32_t)(x) & (uint32_t)0xff000000UL) >> 24)))
  21:include/swab.h **** 
  22:include/swab.h **** #define ___constant_swab64(x) ((uint64_t)(				\
  23:include/swab.h **** 	(((uint64_t)(x) & (uint64_t)0x00000000000000ffULL) << 56) |	\
  24:include/swab.h **** 	(((uint64_t)(x) & (uint64_t)0x000000000000ff00ULL) << 40) |	\
  25:include/swab.h **** 	(((uint64_t)(x) & (uint64_t)0x0000000000ff0000ULL) << 24) |	\
  26:include/swab.h **** 	(((uint64_t)(x) & (uint64_t)0x00000000ff000000ULL) <<  8) |	\
  27:include/swab.h **** 	(((uint64_t)(x) & (uint64_t)0x000000ff00000000ULL) >>  8) |	\
  28:include/swab.h **** 	(((uint64_t)(x) & (uint64_t)0x0000ff0000000000ULL) >> 24) |	\
  29:include/swab.h **** 	(((uint64_t)(x) & (uint64_t)0x00ff000000000000ULL) >> 40) |	\
  30:include/swab.h **** 	(((uint64_t)(x) & (uint64_t)0xff00000000000000ULL) >> 56)))
  31:include/swab.h **** 
  32:include/swab.h **** #define ___constant_swahw32(x) ((uint32_t)(			\
  33:include/swab.h **** 	(((uint32_t)(x) & (uint32_t)0x0000ffffUL) << 16) |		\
  34:include/swab.h **** 	(((uint32_t)(x) & (uint32_t)0xffff0000UL) >> 16)))
  35:include/swab.h **** 
  36:include/swab.h **** #define ___constant_swahb32(x) ((uint32_t)(			\
  37:include/swab.h **** 	(((uint32_t)(x) & (uint32_t)0x00ff00ffUL) << 8) |		\
  38:include/swab.h **** 	(((uint32_t)(x) & (uint32_t)0xff00ff00UL) >> 8)))
  39:include/swab.h **** 
  40:include/swab.h **** /*
  41:include/swab.h ****  * Implement the following as inlines, but define the interface using
  42:include/swab.h ****  * macros to allow constant folding when possible:
  43:include/swab.h ****  * ___swab16, ___swab32, ___swab64, ___swahw32, ___swahb32
  44:include/swab.h ****  */
  45:include/swab.h **** 
  46:include/swab.h **** static inline __attribute_const__ uint16_t __fswab16(uint16_t val)
  47:include/swab.h **** {
  48:include/swab.h **** #ifdef __arch_swab16
  49:include/swab.h **** 	return __arch_swab16(val);
  50:include/swab.h **** #else
  51:include/swab.h **** 	return ___constant_swab16(val);
 2871              		.loc 4 51 0
 2872 0054 3433A0E1 		mov	r3, r4, lsr r3
 2873 0058 044483E1 		orr	r4, r3, r4, asl #8
 2874 005c 0448A0E1 		mov	r4, r4, asl #16
 2875 0060 2418A0E1 		mov	r1, r4, lsr #16
 2876 0064 0020A0E1 		mov	r2, r0
 2877              	.LBE575:
 2878              	.LBE574:
1072:apps/rssi/main.c **** 	for (i = 0; i < 8; i++) {
 2879              		.loc 2 1072 0
 2880 0068 0030A0E3 		mov	r3, #0
1073:apps/rssi/main.c **** 		pm_req->band_arfcn[i] = htons(a);
 2881              		.loc 2 1073 0
 2882 006c FF1001E2 		and	r1, r1, #255
 2883 0070 244CA0E1 		mov	r4, r4, lsr #24
 2884              	.LVL214:
 2885              	.L248:
 2886 0074 83C080E0 		add	ip, r0, r3, asl #1
 2887 0078 0210CCE5 		strb	r1, [ip, #2]
 2888 007c 0340CCE5 		strb	r4, [ip, #3]
1074:apps/rssi/main.c **** 		pm_req->tn[i] = i;
 2889              		.loc 2 1074 0
 2890 0080 8230C2E5 		strb	r3, [r2, #130]
1072:apps/rssi/main.c **** 	for (i = 0; i < 8; i++) {
 2891              		.loc 2 1072 0
 2892 0084 013083E2 		add	r3, r3, #1
 2893              	.LVL215:
 2894 0088 080053E3 		cmp	r3, #8
 2895 008c 012082E2 		add	r2, r2, #1
 2896 0090 F7FFFF1A 		bne	.L248
1076:apps/rssi/main.c **** 	l1a_l23_rx(SC_DLCI_L1A_L23, msg);
 2897              		.loc 2 1076 0
 2898 0094 0510A0E1 		mov	r1, r5
 2899 0098 0500A0E3 		mov	r0, #5
 2900              	.LVL216:
 2901 009c FEFFFFEB 		bl	l1a_l23_rx
 2902              	.LVL217:
1077:apps/rssi/main.c **** }
 2903              		.loc 2 1077 0
 2904 00a0 3840BDE8 		ldmfd	sp!, {r3, r4, r5, lr}
 2905              	.LVL218:
 2906 00a4 1EFF2FE1 		bx	lr
 2907              	.L257:
 2908              		.align	2
 2909              	.L256:
 2910 00a8 00000000 		.word	.LANCHOR0
 2911 00ac 2A010000 		.word	298
 2912              		.cfi_endproc
 2913              	.LFE128:
 2915              		.section	.text.exit_rach,"ax",%progbits
 2916              		.align	2
 2918              	exit_rach:
 2919              	.LFB131:
1231:apps/rssi/main.c **** {
 2920              		.loc 2 1231 0
 2921              		.cfi_startproc
 2922              		@ Function supports interworking.
 2923              		@ args = 0, pretend = 0, frame = 0
 2924              		@ frame_needed = 0, uses_anonymous_args = 0
 2925 0000 10402DE9 		stmfd	sp!, {r4, lr}
 2926              	.LCFI10:
 2927              		.cfi_def_cfa_offset 8
 2928              		.cfi_offset 4, -8
 2929              		.cfi_offset 14, -4
1232:apps/rssi/main.c **** 	rach = 0;
 2930              		.loc 2 1232 0
 2931 0004 1C409FE5 		ldr	r4, .L259
 2932 0008 0030A0E3 		mov	r3, #0
1234:apps/rssi/main.c **** 	request_ul_levels(ul_arfcn);
 2933              		.loc 2 1234 0
 2934 000c B401D4E1 		ldrh	r0, [r4, #20]
1232:apps/rssi/main.c **** 	rach = 0;
 2935              		.loc 2 1232 0
 2936 0010 003084E5 		str	r3, [r4]
1234:apps/rssi/main.c **** 	request_ul_levels(ul_arfcn);
 2937              		.loc 2 1234 0
 2938 0014 FEFFFFEB 		bl	request_ul_levels
 2939              	.LVL219:
1236:apps/rssi/main.c **** 	mode = MODE_SYNC;
 2940              		.loc 2 1236 0
 2941 0018 0330A0E3 		mov	r3, #3
 2942 001c 0430C4E5 		strb	r3, [r4, #4]
1238:apps/rssi/main.c **** }
 2943              		.loc 2 1238 0
 2944 0020 1040BDE8 		ldmfd	sp!, {r4, lr}
1237:apps/rssi/main.c **** 	refresh_display();
 2945              		.loc 2 1237 0
 2946 0024 FEFFFFEA 		b	refresh_display
 2947              	.LVL220:
 2948              	.L260:
 2949              		.align	2
 2950              	.L259:
 2951 0028 00000000 		.word	.LANCHOR0
 2952              		.cfi_endproc
 2953              	.LFE131:
 2955              		.section	.text.toggle_spectrum,"ax",%progbits
 2956              		.align	2
 2958              	toggle_spectrum:
 2959              	.LFB117:
 696:apps/rssi/main.c **** {
 2960              		.loc 2 696 0
 2961              		.cfi_startproc
 2962              		@ Function supports interworking.
 2963              		@ args = 0, pretend = 0, frame = 0
 2964              		@ frame_needed = 0, uses_anonymous_args = 0
 2965 0000 10402DE9 		stmfd	sp!, {r4, lr}
 2966              	.LCFI11:
 2967              		.cfi_def_cfa_offset 8
 2968              		.cfi_offset 4, -8
 2969              		.cfi_offset 14, -4
 697:apps/rssi/main.c **** 	if (mode == MODE_MAIN) {
 2970              		.loc 2 697 0
 2971 0004 3C409FE5 		ldr	r4, .L265
 2972 0008 0430D4E5 		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2973 000c 000053E3 		cmp	r3, #0
 698:apps/rssi/main.c **** 		mode = MODE_SPECTRUM;
 2974              		.loc 2 698 0
 2975 0010 0120A003 		moveq	r2, #1
 2976 0014 0420C405 		streqb	r2, [r4, #4]
 697:apps/rssi/main.c **** 	if (mode == MODE_MAIN) {
 2977              		.loc 2 697 0
 2978 0018 0300000A 		beq	.L264
 700:apps/rssi/main.c **** 	} else if (mode == MODE_SPECTRUM) {
 2979              		.loc 2 700 0
 2980 001c 010053E3 		cmp	r3, #1
 2981 0020 0200001A 		bne	.L263
 701:apps/rssi/main.c **** 		mode = MODE_MAIN;
 2982              		.loc 2 701 0
 2983 0024 0030A0E3 		mov	r3, #0
 2984 0028 0430C4E5 		strb	r3, [r4, #4]
 2985              	.L264:
 702:apps/rssi/main.c **** 		pm_mode = PM_IDLE;
 2986              		.loc 2 702 0
 2987 002c 1C30C4E5 		strb	r3, [r4, #28]
 2988              	.L263:
 704:apps/rssi/main.c **** 	l1s_reset();
 2989              		.loc 2 704 0
 2990 0030 FEFFFFEB 		bl	l1s_reset
 2991              	.LVL221:
 705:apps/rssi/main.c **** 	l1s_reset_hw();
 2992              		.loc 2 705 0
 2993 0034 FEFFFFEB 		bl	l1s_reset_hw
 2994              	.LVL222:
 706:apps/rssi/main.c **** 	pm_count = 0;
 2995              		.loc 2 706 0
 2996 0038 0030A0E3 		mov	r3, #0
 2997 003c 203084E5 		str	r3, [r4, #32]
 708:apps/rssi/main.c **** }
 2998              		.loc 2 708 0
 2999 0040 1040BDE8 		ldmfd	sp!, {r4, lr}
 707:apps/rssi/main.c **** 	refresh_display();
 3000              		.loc 2 707 0
 3001 0044 FEFFFFEA 		b	refresh_display
 3002              	.LVL223:
 3003              	.L266:
 3004              		.align	2
 3005              	.L265:
 3006 0048 00000000 		.word	.LANCHOR0
 3007              		.cfi_endproc
 3008              	.LFE117:
 3010              		.section	.text.l1a_l23_tx,"ax",%progbits
 3011              		.align	2
 3013              	l1a_l23_tx:
 3014              	.LFB139:
1384:apps/rssi/main.c **** {
 3015              		.loc 2 1384 0
 3016              		.cfi_startproc
 3017              		@ Function supports interworking.
 3018              		@ args = 0, pretend = 0, frame = 16
 3019              		@ frame_needed = 0, uses_anonymous_args = 0
 3020              	.LVL224:
 3021 0000 FF472DE9 		stmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, lr}
 3022              	.LCFI12:
 3023              		.cfi_def_cfa_offset 48
 3024              		.cfi_offset 0, -48
 3025              		.cfi_offset 1, -44
 3026              		.cfi_offset 2, -40
 3027              		.cfi_offset 3, -36
 3028              		.cfi_offset 4, -32
 3029              		.cfi_offset 5, -28
 3030              		.cfi_offset 6, -24
 3031              		.cfi_offset 7, -20
 3032              		.cfi_offset 8, -16
 3033              		.cfi_offset 9, -12
 3034              		.cfi_offset 10, -8
 3035              		.cfi_offset 14, -4
1385:apps/rssi/main.c **** 	struct l1ctl_hdr *l1h = (struct l1ctl_hdr *) msg->l1h;
 3036              		.loc 2 1385 0
 3037 0004 105090E5 		ldr	r5, [r0, #16]
 3038              	.LVL225:
1393:apps/rssi/main.c **** 	switch (l1h->msg_type) {
 3039              		.loc 2 1393 0
 3040 0008 0060D5E5 		ldrb	r6, [r5]	@ zero_extendqisi2
 3041 000c 090056E3 		cmp	r6, #9
1384:apps/rssi/main.c **** {
 3042              		.loc 2 1384 0
 3043 0010 0040A0E1 		mov	r4, r0
1393:apps/rssi/main.c **** 	switch (l1h->msg_type) {
 3044              		.loc 2 1393 0
 3045 0014 1400000A 		beq	.L269
 3046 0018 0400008A 		bhi	.L270
 3047 001c 020056E3 		cmp	r6, #2
 3048 0020 4500000A 		beq	.L271
 3049 0024 030056E3 		cmp	r6, #3
 3050 0028 4D00000A 		beq	.L272
 3051 002c FC0000EA 		b	.L268
 3052              	.L270:
 3053 0030 0C0056E3 		cmp	r6, #12
 3054 0034 E000000A 		beq	.L273
 3055 0038 1B0056E3 		cmp	r6, #27
 3056 003c F800001A 		bne	.L268
 3057              	.LVL226:
1450:apps/rssi/main.c **** 			if (!max || ul_levels[pm_ind->tn] > ul_max[pm_ind->tn])
 3058              		.loc 2 1450 0
 3059 0040 F0339FE5 		ldr	r3, .L337
1448:apps/rssi/main.c **** 			ul_levels[pm_ind->tn] = pm_ind->pm[0];
 3060              		.loc 2 1448 0
 3061 0044 F0139FE5 		ldr	r1, .L337+4
1450:apps/rssi/main.c **** 			if (!max || ul_levels[pm_ind->tn] > ul_max[pm_ind->tn])
 3062              		.loc 2 1450 0
 3063 0048 0C6093E5 		ldr	r6, [r3, #12]
 3064 004c EC339FE5 		ldr	r3, .L337+8
1447:apps/rssi/main.c **** 			(uint8_t *) pm_ind < msg->tail; pm_ind++) {
 3065              		.loc 2 1447 0
 3066 0050 3CE090E5 		ldr	lr, [r0, #60]
 3067 0054 B020D3E1 		ldrh	r2, [r3]
 3068 0058 0A5085E2 		add	r5, r5, #10
 3069              	.LVL227:
 3070 005c 03C0A0E1 		mov	ip, r3
 3071 0060 0170A0E1 		mov	r7, r1
 3072 0064 D8039FE5 		ldr	r0, .L337+12
 3073              	.LVL228:
1446:apps/rssi/main.c **** 		for (pm_ind = (struct l1ctl_neigh_pm_ind *) l1h->data;
 3074              		.loc 2 1446 0
 3075 0068 CA0000EA 		b	.L307
 3076              	.LVL229:
 3077              	.L269:
1395:apps/rssi/main.c **** 		if (pm_mode == PM_SENT) {
 3078              		.loc 2 1395 0
 3079 006c C4239FE5 		ldr	r2, .L337
 3080 0070 1C30D2E5 		ldrb	r3, [r2, #28]	@ zero_extendqisi2
 3081 0074 010053E3 		cmp	r3, #1
 3082 0078 0700001A 		bne	.L275
 3083              	.LVL230:
1397:apps/rssi/main.c **** 			pm_meas[pm_count] = pmr->pm[0];
 3084              		.loc 2 1397 0
 3085 007c 203092E5 		ldr	r3, [r2, #32]
 3086 0080 0600D5E5 		ldrb	r0, [r5, #6]	@ zero_extendqisi2
 3087              	.LVL231:
 3088 0084 BC139FE5 		ldr	r1, .L337+16
 3089 0088 030181E7 		str	r0, [r1, r3, asl #2]
1398:apps/rssi/main.c **** 			pm_count++;
 3090              		.loc 2 1398 0
 3091 008c 013083E2 		add	r3, r3, #1
 3092 0090 203082E5 		str	r3, [r2, #32]
1399:apps/rssi/main.c **** 			pm_mode = PM_RESULT;
 3093              		.loc 2 1399 0
 3094 0094 0430A0E3 		mov	r3, #4
 3095 0098 1C30C2E5 		strb	r3, [r2, #28]
 3096              	.L275:
1401:apps/rssi/main.c **** 		if (pm_mode == PM_RANGE_SENT) {
 3097              		.loc 2 1401 0
 3098 009c 1C30D2E5 		ldrb	r3, [r2, #28]	@ zero_extendqisi2
 3099 00a0 020053E3 		cmp	r3, #2
 3100 00a4 1F00001A 		bne	.L277
1404:apps/rssi/main.c **** 				if (!max || pm_spectrum[ntohs(pmr->band_arfcn) & 1023] < pmr->pm[0])
 3101              		.loc 2 1404 0
 3102 00a8 88339FE5 		ldr	r3, .L337
 3103 00ac 98139FE5 		ldr	r1, .L337+20
 3104 00b0 0C6093E5 		ldr	r6, [r3, #12]
 3105 00b4 083085E2 		add	r3, r5, #8
 3106              	.L278:
1402:apps/rssi/main.c **** 			for (pmr = (struct l1ctl_pm_conf *) l1h->data;
 3107              		.loc 2 1402 0 discriminator 1
 3108 00b8 3C0094E5 		ldr	r0, [r4, #60]
 3109 00bc 04C043E2 		sub	ip, r3, #4
 3110 00c0 00005CE1 		cmp	ip, r0
 3111 00c4 1300002A 		bcs	.L334
1404:apps/rssi/main.c **** 				if (!max || pm_spectrum[ntohs(pmr->band_arfcn) & 1023] < pmr->pm[0])
 3112              		.loc 2 1404 0
 3113 00c8 000056E3 		cmp	r6, #0
 3114 00cc 040053E5 		ldrb	r0, [r3, #-4]	@ zero_extendqisi2
 3115 00d0 03C053E5 		ldrb	ip, [r3, #-3]	@ zero_extendqisi2
 3116 00d4 0700000A 		beq	.L279
1404:apps/rssi/main.c **** 				if (!max || pm_spectrum[ntohs(pmr->band_arfcn) & 1023] < pmr->pm[0])
 3117              		.loc 2 1404 0 is_stmt 0 discriminator 1
 3118 00d8 0CE480E1 		orr	lr, r0, ip, asl #8
 3119              	.LVL232:
 3120              	.LBB606:
 3121              	.LBB607:
 3122              		.loc 4 51 0 is_stmt 1 discriminator 1
 3123 00dc 2E74A0E1 		mov	r7, lr, lsr #8
 3124 00e0 0EE487E1 		orr	lr, r7, lr, asl #8
 3125              	.LVL233:
 3126              	.LBE607:
 3127              	.LBE606:
1404:apps/rssi/main.c **** 				if (!max || pm_spectrum[ntohs(pmr->band_arfcn) & 1023] < pmr->pm[0])
 3128              		.loc 2 1404 0 discriminator 1
 3129 00e4 0EEBA0E1 		mov	lr, lr, asl #22
 3130 00e8 2E7BD1E7 		ldrb	r7, [r1, lr, lsr #22]	@ zero_extendqisi2
 3131 00ec 02E053E5 		ldrb	lr, [r3, #-2]	@ zero_extendqisi2
 3132 00f0 0E0057E1 		cmp	r7, lr
 3133 00f4 0500002A 		bcs	.L280
 3134              	.LVL234:
 3135              	.L279:
1405:apps/rssi/main.c **** 					pm_spectrum[ntohs(pmr->band_arfcn) & 1023] = pmr->pm[0];
 3136              		.loc 2 1405 0
 3137 00f8 0C0480E1 		orr	r0, r0, ip, asl #8
 3138              	.LVL235:
 3139              	.LBB608:
 3140              	.LBB609:
 3141              		.loc 4 51 0
 3142 00fc 20E4A0E1 		mov	lr, r0, lsr #8
 3143              	.LBE609:
 3144              	.LBE608:
1405:apps/rssi/main.c **** 					pm_spectrum[ntohs(pmr->band_arfcn) & 1023] = pmr->pm[0];
 3145              		.loc 2 1405 0
 3146 0100 02C053E5 		ldrb	ip, [r3, #-2]	@ zero_extendqisi2
 3147              	.LBB611:
 3148              	.LBB610:
 3149              		.loc 4 51 0
 3150 0104 00048EE1 		orr	r0, lr, r0, asl #8
 3151              	.LVL236:
 3152              	.LBE610:
 3153              	.LBE611:
1405:apps/rssi/main.c **** 					pm_spectrum[ntohs(pmr->band_arfcn) & 1023] = pmr->pm[0];
 3154              		.loc 2 1405 0
 3155 0108 000BA0E1 		mov	r0, r0, asl #22
 3156 010c 20CBC1E7 		strb	ip, [r1, r0, lsr #22]
 3157              	.LVL237:
 3158              	.L280:
 3159 0110 043083E2 		add	r3, r3, #4
 3160              	.LVL238:
 3161 0114 E7FFFFEA 		b	.L278
 3162              	.LVL239:
 3163              	.L334:
1407:apps/rssi/main.c **** 			if ((l1h->flags & L1CTL_F_DONE))
 3164              		.loc 2 1407 0
 3165 0118 0130D5E5 		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 3166 011c 010013E3 		tst	r3, #1
1408:apps/rssi/main.c **** 				pm_mode = PM_RANGE_RESULT;
 3167              		.loc 2 1408 0
 3168 0120 0330A013 		movne	r3, #3
 3169 0124 1C30C215 		strneb	r3, [r2, #28]
 3170              	.L277:
1410:apps/rssi/main.c **** 		l1s.tpu_offset_correction += 5000 / NUM_PM_UL;
 3171              		.loc 2 1410 0
 3172 0128 20339FE5 		ldr	r3, .L337+24
 3173 012c 442A93E5 		ldr	r2, [r3, #2628]
 3174 0130 7D2F82E2 		add	r2, r2, #500
 3175 0134 442A83E5 		str	r2, [r3, #2628]
1411:apps/rssi/main.c **** 		break;
 3176              		.loc 2 1411 0
 3177 0138 B90000EA 		b	.L268
 3178              	.LVL240:
 3179              	.L271:
1415:apps/rssi/main.c **** 		if (sb->result == 0)
 3180              		.loc 2 1415 0
 3181 013c 1230D5E5 		ldrb	r3, [r5, #18]	@ zero_extendqisi2
 3182 0140 000053E3 		cmp	r3, #0
1416:apps/rssi/main.c **** 			sync_result = "ok";
 3183              		.loc 2 1416 0
 3184 0144 08239F05 		ldreq	r2, .L337+28
 3185 0148 E8329FE5 		ldr	r3, .L337
1418:apps/rssi/main.c **** 			sync_result = "error";
 3186              		.loc 2 1418 0
 3187 014c 04239F15 		ldrne	r2, .L337+32
 3188 0150 242083E5 		str	r2, [r3, #36]
1419:apps/rssi/main.c **** 		bsic = sb->bsic;
 3189              		.loc 2 1419 0
 3190 0154 1320D5E5 		ldrb	r2, [r5, #19]	@ zero_extendqisi2
 3191 0158 FC329FE5 		ldr	r3, .L337+36
 3192 015c 0020C3E5 		strb	r2, [r3]
1420:apps/rssi/main.c **** 		break;
 3193              		.loc 2 1420 0
 3194 0160 AF0000EA 		b	.L268
 3195              	.L272:
1423:apps/rssi/main.c **** 		msg->l2h = dl->payload;
 3196              		.loc 2 1423 0
 3197 0164 103085E2 		add	r3, r5, #16
 3198 0168 143080E5 		str	r3, [r0, #20]
1424:apps/rssi/main.c **** 		rsl_dec_chan_nr(dl->chan_nr, &chan_type, &chan_ss, &chan_ts);
 3199              		.loc 2 1424 0
 3200 016c 03208DE2 		add	r2, sp, #3
 3201 0170 02308DE2 		add	r3, sp, #2
 3202 0174 0400D5E5 		ldrb	r0, [r5, #4]	@ zero_extendqisi2
 3203              	.LVL241:
 3204 0178 01108DE2 		add	r1, sp, #1
 3205 017c FEFFFFEB 		bl	rsl_dec_chan_nr
 3206              	.LVL242:
1426:apps/rssi/main.c **** 		power = dl->rx_level;
 3207              		.loc 2 1426 0
 3208 0180 D8329FE5 		ldr	r3, .L337+40
 3209 0184 0C20D5E5 		ldrb	r2, [r5, #12]	@ zero_extendqisi2
 3210 0188 0020C3E5 		strb	r2, [r3]
1427:apps/rssi/main.c **** 		if (dl->fire_crc >= 2) {
 3211              		.loc 2 1427 0
 3212 018c 0F30D5E5 		ldrb	r3, [r5, #15]	@ zero_extendqisi2
 3213 0190 010053E3 		cmp	r3, #1
 3214 0194 0130DDE5 		ldrb	r3, [sp, #1]	@ zero_extendqisi2
 3215 0198 0400009A 		bls	.L285
1428:apps/rssi/main.c **** 			if (chan_type == RSL_CHAN_BCCH)
 3216              		.loc 2 1428 0
 3217 019c 800053E3 		cmp	r3, #128
1429:apps/rssi/main.c **** 				si_new = 0x1ff; /* error frame indication */
 3218              		.loc 2 1429 0
 3219 01a0 90329F05 		ldreq	r3, .L337
 3220 01a4 FE2CE003 		mvneq	r2, #65024
 3221 01a8 B822C301 		streqh	r2, [r3, #40]	@ movhi
 3222 01ac 9C0000EA 		b	.L268
 3223              	.L285:
1433:apps/rssi/main.c **** 		switch (chan_type) {
 3224              		.loc 2 1433 0
 3225 01b0 800053E3 		cmp	r3, #128
 3226 01b4 0200000A 		beq	.L288
 3227 01b8 900053E3 		cmp	r3, #144
 3228 01bc 2800000A 		beq	.L289
 3229 01c0 620000EA 		b	.L287
 3230              	.L288:
1435:apps/rssi/main.c **** 			msg->l3h = msg->l2h;
 3231              		.loc 2 1435 0
 3232 01c4 145094E5 		ldr	r5, [r4, #20]
 3233              	.LVL243:
 3234 01c8 185084E5 		str	r5, [r4, #24]
 3235              	.LVL244:
 3236              	.LBB612:
 3237              	.LBB613:
1359:apps/rssi/main.c **** 	switch (sih->system_information) {
 3238              		.loc 2 1359 0
 3239 01cc 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 3240 01d0 190053E3 		cmp	r3, #25
 3241 01d4 0F00000A 		beq	.L291
 3242 01d8 0600008A 		bhi	.L292
 3243 01dc 020053E3 		cmp	r3, #2
 3244 01e0 1200000A 		beq	.L293
 3245 01e4 030053E3 		cmp	r3, #3
 3246              	.LBB614:
 3247              	.LBB615:
 128:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l3(msgb);
 3248              		.loc 3 128 0
 3249 01e8 3C209405 		ldreq	r2, [r4, #60]
 3250              	.LBE615:
 3251              	.LBE614:
1370:apps/rssi/main.c **** 		memcpy(si_2ter, msgb_l3(msg), msgb_l3len(msg));
 3252              		.loc 2 1370 0
 3253 01ec 70029F05 		ldreq	r0, .L337+44
1359:apps/rssi/main.c **** 	switch (sih->system_information) {
 3254              		.loc 2 1359 0
 3255 01f0 1300000A 		beq	.L332
 3256 01f4 150000EA 		b	.L290
 3257              	.L292:
 3258 01f8 1B0053E3 		cmp	r3, #27
 3259 01fc 0E00000A 		beq	.L295
 3260 0200 0700003A 		bcc	.L296
 3261 0204 1C0053E3 		cmp	r3, #28
 3262              	.LBB616:
 3263              	.LBB617:
 128:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l3(msgb);
 3264              		.loc 3 128 0
 3265 0208 3C209405 		ldreq	r2, [r4, #60]
 3266              	.LBE617:
 3267              	.LBE616:
1376:apps/rssi/main.c **** 		memcpy(si_4, msgb_l3(msg), msgb_l3len(msg));
 3268              		.loc 2 1376 0
 3269 020c 54029F05 		ldreq	r0, .L337+48
1359:apps/rssi/main.c **** 	switch (sih->system_information) {
 3270              		.loc 2 1359 0
 3271 0210 0B00000A 		beq	.L332
 3272 0214 0D0000EA 		b	.L290
 3273              	.L291:
 3274              	.LVL245:
 3275              	.LBB618:
 3276              	.LBB619:
 128:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l3(msgb);
 3277              		.loc 3 128 0
 3278 0218 3C2094E5 		ldr	r2, [r4, #60]
 3279              	.LBE619:
 3280              	.LBE618:
1361:apps/rssi/main.c **** 		memcpy(si_1, msgb_l3(msg), msgb_l3len(msg));
 3281              		.loc 2 1361 0
 3282 021c 48029FE5 		ldr	r0, .L337+52
 3283 0220 070000EA 		b	.L332
 3284              	.LVL246:
 3285              	.L296:
 3286              	.LBB620:
 3287              	.LBB621:
 128:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l3(msgb);
 3288              		.loc 3 128 0
 3289 0224 3C2094E5 		ldr	r2, [r4, #60]
 3290              	.LBE621:
 3291              	.LBE620:
1364:apps/rssi/main.c **** 		memcpy(si_2, msgb_l3(msg), msgb_l3len(msg));
 3292              		.loc 2 1364 0
 3293 0228 40029FE5 		ldr	r0, .L337+56
 3294 022c 040000EA 		b	.L332
 3295              	.LVL247:
 3296              	.L293:
 3297              	.LBB622:
 3298              	.LBB623:
 128:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l3(msgb);
 3299              		.loc 3 128 0
 3300 0230 3C2094E5 		ldr	r2, [r4, #60]
 3301              	.LBE623:
 3302              	.LBE622:
1367:apps/rssi/main.c **** 		memcpy(si_2bis, msgb_l3(msg), msgb_l3len(msg));
 3303              		.loc 2 1367 0
 3304 0234 38029FE5 		ldr	r0, .L337+60
 3305 0238 010000EA 		b	.L332
 3306              	.LVL248:
 3307              	.L295:
 3308              	.LBB624:
 3309              	.LBB625:
 128:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l3(msgb);
 3310              		.loc 3 128 0
 3311 023c 3C2094E5 		ldr	r2, [r4, #60]
 3312              	.LBE625:
 3313              	.LBE624:
1373:apps/rssi/main.c **** 		memcpy(si_3, msgb_l3(msg), msgb_l3len(msg));
 3314              		.loc 2 1373 0
 3315 0240 30029FE5 		ldr	r0, .L337+64
 3316              	.LVL249:
 3317              	.L332:
1376:apps/rssi/main.c **** 		memcpy(si_4, msgb_l3(msg), msgb_l3len(msg));
 3318              		.loc 2 1376 0
 3319 0244 0510A0E1 		mov	r1, r5
 3320 0248 022065E0 		rsb	r2, r5, r2
 3321 024c FEFFFFEB 		bl	memcpy
 3322              	.LVL250:
 3323              	.L290:
1379:apps/rssi/main.c **** 	si_new = sih->system_information | 0x100;
 3324              		.loc 2 1379 0
 3325 0250 0220D5E5 		ldrb	r2, [r5, #2]	@ zero_extendqisi2
 3326 0254 DC319FE5 		ldr	r3, .L337
 3327 0258 012C82E3 		orr	r2, r2, #256
 3328 025c B822C3E1 		strh	r2, [r3, #40]	@ movhi
 3329 0260 3A0000EA 		b	.L287
 3330              	.LVL251:
 3331              	.L289:
 3332              	.LBE613:
 3333              	.LBE612:
1439:apps/rssi/main.c **** 			msg->l3h = msg->l2h;
 3334              		.loc 2 1439 0
 3335 0264 145094E5 		ldr	r5, [r4, #20]
 3336              	.LVL252:
 3337 0268 185084E5 		str	r5, [r4, #24]
 3338              	.LVL253:
 3339              	.LBB626:
 3340              	.LBB627:
1339:apps/rssi/main.c **** 	switch (sih->system_information) {
 3341              		.loc 2 1339 0
 3342 026c 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 3343 0270 3A0053E3 		cmp	r3, #58
 3344 0274 2800000A 		beq	.L298
 3345 0278 3F0053E3 		cmp	r3, #63
 3346 027c 0200000A 		beq	.L299
 3347 0280 390053E3 		cmp	r3, #57
 3348 0284 3100001A 		bne	.L287
 3349 0288 080000EA 		b	.L335
 3350              	.L299:
 3351              	.LVL254:
 3352              	.LBB628:
 3353              	.LBB629:
1290:apps/rssi/main.c **** 	if (gsm48_match_ra(&ia->req_ref)) {
 3354              		.loc 2 1290 0
 3355 028c 070085E2 		add	r0, r5, #7
 3356 0290 FEFFFFEB 		bl	gsm48_match_ra
 3357              	.LVL255:
 3358 0294 000050E3 		cmp	r0, #0
 3359 0298 2C00000A 		beq	.L287
1291:apps/rssi/main.c **** 		assign = ASSIGN_RESULT;
 3360              		.loc 2 1291 0
 3361 029c D8319FE5 		ldr	r3, .L337+68
 3362 02a0 0220A0E3 		mov	r2, #2
 3363 02a4 0020C3E5 		strb	r2, [r3]
1292:apps/rssi/main.c **** 		ta = ia->timing_advance;
 3364              		.loc 2 1292 0
 3365 02a8 0A20D5E5 		ldrb	r2, [r5, #10]	@ zero_extendqisi2
 3366 02ac 140000EA 		b	.L333
 3367              	.LVL256:
 3368              	.L335:
 3369              	.LBE629:
 3370              	.LBE628:
 3371              	.LBB630:
 3372              	.LBB631:
1302:apps/rssi/main.c **** 	if (gsm48_match_ra(&ia->req_ref1)) {
 3373              		.loc 2 1302 0
 3374 02b0 070085E2 		add	r0, r5, #7
 3375 02b4 FEFFFFEB 		bl	gsm48_match_ra
 3376              	.LVL257:
 3377 02b8 000050E3 		cmp	r0, #0
 3378 02bc 0800000A 		beq	.L302
1303:apps/rssi/main.c **** 		assign = ASSIGN_RESULT;
 3379              		.loc 2 1303 0
 3380 02c0 B4319FE5 		ldr	r3, .L337+68
 3381 02c4 0220A0E3 		mov	r2, #2
 3382 02c8 0020C3E5 		strb	r2, [r3]
1304:apps/rssi/main.c **** 		ta = ia->timing_advance1;
 3383              		.loc 2 1304 0
 3384 02cc 0A20D5E5 		ldrb	r2, [r5, #10]	@ zero_extendqisi2
 3385 02d0 A8319FE5 		ldr	r3, .L337+72
 3386 02d4 0020C3E5 		strb	r2, [r3]
1305:apps/rssi/main.c **** 		rach = 0;
 3387              		.loc 2 1305 0
 3388 02d8 58319FE5 		ldr	r3, .L337
 3389 02dc 0020A0E3 		mov	r2, #0
 3390 02e0 002083E5 		str	r2, [r3]
 3391              	.L302:
1307:apps/rssi/main.c **** 	if (gsm48_match_ra(&ia->req_ref2)) {
 3392              		.loc 2 1307 0
 3393 02e4 0E0085E2 		add	r0, r5, #14
 3394 02e8 FEFFFFEB 		bl	gsm48_match_ra
 3395              	.LVL258:
 3396 02ec 000050E3 		cmp	r0, #0
 3397 02f0 1600000A 		beq	.L287
1308:apps/rssi/main.c **** 		assign = ASSIGN_RESULT;
 3398              		.loc 2 1308 0
 3399 02f4 80319FE5 		ldr	r3, .L337+68
 3400 02f8 0220A0E3 		mov	r2, #2
 3401 02fc 0020C3E5 		strb	r2, [r3]
1309:apps/rssi/main.c **** 		ta = ia->timing_advance2;
 3402              		.loc 2 1309 0
 3403 0300 1120D5E5 		ldrb	r2, [r5, #17]	@ zero_extendqisi2
 3404              	.LVL259:
 3405              	.L333:
 3406 0304 74319FE5 		ldr	r3, .L337+72
 3407 0308 0020C3E5 		strb	r2, [r3]
1310:apps/rssi/main.c **** 		rach = 0;
 3408              		.loc 2 1310 0
 3409 030c 24319FE5 		ldr	r3, .L337
 3410 0310 0020A0E3 		mov	r2, #0
 3411 0314 002083E5 		str	r2, [r3]
 3412 0318 0C0000EA 		b	.L287
 3413              	.L298:
 3414              	.LBE631:
 3415              	.LBE630:
 3416              	.LBB632:
 3417              	.LBB633:
1326:apps/rssi/main.c **** 			assign = ASSIGN_REJECT;
 3418              		.loc 2 1326 0
 3419 031c 58819FE5 		ldr	r8, .L337+68
1327:apps/rssi/main.c **** 			rach = 0;
 3420              		.loc 2 1327 0
 3421 0320 10919FE5 		ldr	r9, .L337
 3422 0324 047085E2 		add	r7, r5, #4
 3423 0328 00A0A0E3 		mov	r10, #0
 3424 032c 145085E2 		add	r5, r5, #20
 3425              	.LVL260:
 3426              	.L305:
1325:apps/rssi/main.c **** 		if (gsm48_match_ra(req_ref)) {
 3427              		.loc 2 1325 0
 3428 0330 0700A0E1 		mov	r0, r7
 3429 0334 FEFFFFEB 		bl	gsm48_match_ra
 3430              	.LVL261:
 3431 0338 047087E2 		add	r7, r7, #4
 3432              	.LVL262:
 3433 033c 000050E3 		cmp	r0, #0
1326:apps/rssi/main.c **** 			assign = ASSIGN_REJECT;
 3434              		.loc 2 1326 0
 3435 0340 0060C815 		strneb	r6, [r8]
1327:apps/rssi/main.c **** 			rach = 0;
 3436              		.loc 2 1327 0
 3437 0344 00A08915 		strne	r10, [r9]
 3438              	.LVL263:
1321:apps/rssi/main.c **** 	for (i = 0; i < 4; i++) {
 3439              		.loc 2 1321 0
 3440 0348 050057E1 		cmp	r7, r5
 3441 034c F7FFFF1A 		bne	.L305
 3442              	.LVL264:
 3443              	.L287:
 3444              	.LBE633:
 3445              	.LBE632:
 3446              	.LBE627:
 3447              	.LBE626:
1443:apps/rssi/main.c **** 		sercomm_sendmsg(SC_DLCI_L1A_L23, msg);
 3448              		.loc 2 1443 0
 3449 0350 0500A0E3 		mov	r0, #5
 3450 0354 0410A0E1 		mov	r1, r4
 3451 0358 FEFFFFEB 		bl	sercomm_sendmsg
 3452              	.LVL265:
 3453 035c 320000EA 		b	.L267
 3454              	.LVL266:
 3455              	.L311:
1448:apps/rssi/main.c **** 			ul_levels[pm_ind->tn] = pm_ind->pm[0];
 3456              		.loc 2 1448 0
 3457 0360 023055E5 		ldrb	r3, [r5, #-2]	@ zero_extendqisi2
 3458              	.LVL267:
 3459 0364 048055E5 		ldrb	r8, [r5, #-4]	@ zero_extendqisi2
 3460 0368 0380C1E7 		strb	r8, [r1, r3]
1450:apps/rssi/main.c **** 			if (!max || ul_levels[pm_ind->tn] > ul_max[pm_ind->tn])
 3461              		.loc 2 1450 0
 3462 036c 000056E3 		cmp	r6, #0
 3463 0370 023055E5 		ldrb	r3, [r5, #-2]	@ zero_extendqisi2
 3464 0374 0B00000A 		beq	.L308
1450:apps/rssi/main.c **** 			if (!max || ul_levels[pm_ind->tn] > ul_max[pm_ind->tn])
 3465              		.loc 2 1450 0 is_stmt 0 discriminator 1
 3466 0378 0390D1E7 		ldrb	r9, [r1, r3]	@ zero_extendqisi2
 3467 037c 0380D0E7 		ldrb	r8, [r0, r3]	@ zero_extendqisi2
 3468 0380 080059E1 		cmp	r9, r8
 3469 0384 0700008A 		bhi	.L308
 3470              	.L309:
1452:apps/rssi/main.c **** 			if (pm_ind->tn == 7)
 3471              		.loc 2 1452 0 is_stmt 1
 3472 0388 023055E5 		ldrb	r3, [r5, #-2]	@ zero_extendqisi2
1453:apps/rssi/main.c **** 				ul_new = 1;
 3473              		.loc 2 1453 0
 3474 038c 070053E3 		cmp	r3, #7
 3475 0390 0120A003 		moveq	r2, #1
 3476              	.LVL268:
 3477 0394 065085E2 		add	r5, r5, #6
 3478              	.LVL269:
 3479              	.L307:
 3480 0398 063045E2 		sub	r3, r5, #6
 3481              	.LVL270:
1446:apps/rssi/main.c **** 		for (pm_ind = (struct l1ctl_neigh_pm_ind *) l1h->data;
 3482              		.loc 2 1446 0 discriminator 1
 3483 039c 03005EE1 		cmp	lr, r3
 3484 03a0 EEFFFF8A 		bhi	.L311
 3485 03a4 020000EA 		b	.L336
 3486              	.LVL271:
 3487              	.L308:
1451:apps/rssi/main.c **** 				ul_max[pm_ind->tn] = ul_levels[pm_ind->tn];
 3488              		.loc 2 1451 0
 3489 03a8 0380D7E7 		ldrb	r8, [r7, r3]	@ zero_extendqisi2
 3490 03ac 0380C0E7 		strb	r8, [r0, r3]
 3491 03b0 F4FFFFEA 		b	.L309
 3492              	.LVL272:
 3493              	.L336:
 3494 03b4 B020CCE1 		strh	r2, [ip]	@ movhi
 3495 03b8 190000EA 		b	.L268
 3496              	.LVL273:
 3497              	.L273:
1458:apps/rssi/main.c **** 		gsm_fn2gsmtime(&tm, ntohl(dl->frame_nr));
 3498              		.loc 2 1458 0
 3499 03bc 0920D5E5 		ldrb	r2, [r5, #9]	@ zero_extendqisi2
 3500 03c0 0830D5E5 		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 3501 03c4 023483E1 		orr	r3, r3, r2, asl #8
 3502 03c8 0A20D5E5 		ldrb	r2, [r5, #10]	@ zero_extendqisi2
 3503 03cc 023883E1 		orr	r3, r3, r2, asl #16
 3504 03d0 0B20D5E5 		ldrb	r2, [r5, #11]	@ zero_extendqisi2
 3505 03d4 023C83E1 		orr	r3, r3, r2, asl #24
 3506              	.LVL274:
 3507              	.LBB634:
 3508              	.LBB635:
 3509              	.LBB636:
 3510              		.file 5 "include/asm/swab.h"
   1:include/asm/swab.h **** /*
   2:include/asm/swab.h ****  *  arch/arm/include/asm/byteorder.h
   3:include/asm/swab.h ****  *
   4:include/asm/swab.h ****  * ARM Endian-ness.  In little endian mode, the data bus is connected such
   5:include/asm/swab.h ****  * that byte accesses appear as:
   6:include/asm/swab.h ****  *  0 = d0...d7, 1 = d8...d15, 2 = d16...d23, 3 = d24...d31
   7:include/asm/swab.h ****  * and word accesses (data or instruction) appear as:
   8:include/asm/swab.h ****  *  d0...d31
   9:include/asm/swab.h ****  *
  10:include/asm/swab.h ****  * When in big endian mode, byte accesses appear as:
  11:include/asm/swab.h ****  *  0 = d24...d31, 1 = d16...d23, 2 = d8...d15, 3 = d0...d7
  12:include/asm/swab.h ****  * and word accesses (data or instruction) appear as:
  13:include/asm/swab.h ****  *  d0...d31
  14:include/asm/swab.h ****  */
  15:include/asm/swab.h **** #ifndef __ASM_ARM_SWAB_H
  16:include/asm/swab.h **** #define __ASM_ARM_SWAB_H
  17:include/asm/swab.h **** 
  18:include/asm/swab.h **** #include <stdint.h>
  19:include/asm/swab.h **** #include <defines.h>
  20:include/asm/swab.h **** 
  21:include/asm/swab.h **** static inline uint32_t __arch_swab32(uint32_t x)
  22:include/asm/swab.h **** {
  23:include/asm/swab.h **** 	uint32_t t;
  24:include/asm/swab.h **** 
  25:include/asm/swab.h **** #ifndef __thumb__
  26:include/asm/swab.h **** 	if (!__builtin_constant_p(x)) {
  27:include/asm/swab.h **** 		/*
  28:include/asm/swab.h **** 		 * The compiler needs a bit of a hint here to always do the
  29:include/asm/swab.h **** 		 * right thing and not screw it up to different degrees
  30:include/asm/swab.h **** 		 * depending on the gcc version.
  31:include/asm/swab.h **** 		 */
  32:include/asm/swab.h **** 		asm ("eor\t%0, %1, %1, ror #16" : "=r" (t) : "r" (x));
 3511              		.loc 5 32 0
 3512              	@ 32 "include/asm/swab.h" 1
 3513 03d8 631823E0 		eor	r1, r3, r3, ror #16
 3514              	@ 0 "" 2
 3515              	.LVL275:
  33:include/asm/swab.h **** 	} else
  34:include/asm/swab.h **** #endif
  35:include/asm/swab.h **** 		t = x ^ ((x << 16) | (x >> 16)); /* eor r1,r0,r0,ror #16 */
  36:include/asm/swab.h **** 
  37:include/asm/swab.h **** 	x = (x << 24) | (x >> 8);		/* mov r0,r0,ror #8      */
  38:include/asm/swab.h **** 	t &= ~0x00FF0000;			/* bic r1,r1,#0x00FF0000 */
 3516              		.loc 5 38 0
 3517 03dc FF18C1E3 		bic	r1, r1, #16711680
 3518              	.LVL276:
  39:include/asm/swab.h **** 	x ^= (t >> 8);				/* eor r0,r0,r1,lsr #8   */
 3519              		.loc 5 39 0
 3520 03e0 2114A0E1 		mov	r1, r1, lsr #8
 3521              	.LVL277:
 3522              	.LBE636:
 3523              	.LBE635:
 3524              	.LBE634:
1458:apps/rssi/main.c **** 		gsm_fn2gsmtime(&tm, ntohl(dl->frame_nr));
 3525              		.loc 2 1458 0
 3526 03e4 631421E0 		eor	r1, r1, r3, ror #8
 3527              	.LVL278:
 3528 03e8 04008DE2 		add	r0, sp, #4
 3529              	.LVL279:
 3530 03ec FEFFFFEB 		bl	gsm_fn2gsmtime
 3531              	.LVL280:
1461:apps/rssi/main.c **** 		rach_ref.t3_low = tm.t3 & 0x7;
 3532              		.loc 2 1461 0
 3533 03f0 0B20DDE5 		ldrb	r2, [sp, #11]	@ zero_extendqisi2
1459:apps/rssi/main.c **** 		rach_ref.t1 = tm.t1;
 3534              		.loc 2 1459 0
 3535 03f4 B810DDE1 		ldrh	r1, [sp, #8]
1460:apps/rssi/main.c **** 		rach_ref.t2 = tm.t2;
 3536              		.loc 2 1460 0
 3537 03f8 0A00DDE5 		ldrb	r0, [sp, #10]	@ zero_extendqisi2
1461:apps/rssi/main.c **** 		rach_ref.t3_low = tm.t3 & 0x7;
 3538              		.loc 2 1461 0
 3539 03fc 07C002E2 		and	ip, r2, #7
1462:apps/rssi/main.c **** 		rach_ref.t3_high = tm.t3 >> 3;
 3540              		.loc 2 1462 0
 3541 0400 A221A0E1 		mov	r2, r2, lsr #3
1459:apps/rssi/main.c **** 		rach_ref.t1 = tm.t1;
 3542              		.loc 2 1459 0
 3543 0404 78309FE5 		ldr	r3, .L337+76
 3544 0408 1F1001E2 		and	r1, r1, #31
1461:apps/rssi/main.c **** 		rach_ref.t3_low = tm.t3 & 0x7;
 3545              		.loc 2 1461 0
 3546 040c 1F0000E2 		and	r0, r0, #31
1462:apps/rssi/main.c **** 		rach_ref.t3_high = tm.t3 >> 3;
 3547              		.loc 2 1462 0
 3548 0410 072002E2 		and	r2, r2, #7
1461:apps/rssi/main.c **** 		rach_ref.t3_low = tm.t3 & 0x7;
 3549              		.loc 2 1461 0
 3550 0414 8C0280E1 		orr	r0, r0, ip, asl #5
1462:apps/rssi/main.c **** 		rach_ref.t3_high = tm.t3 >> 3;
 3551              		.loc 2 1462 0
 3552 0418 812182E1 		orr	r2, r2, r1, asl #3
1461:apps/rssi/main.c **** 		rach_ref.t3_low = tm.t3 & 0x7;
 3553              		.loc 2 1461 0
 3554 041c 0200C3E5 		strb	r0, [r3, #2]
1462:apps/rssi/main.c **** 		rach_ref.t3_high = tm.t3 >> 3;
 3555              		.loc 2 1462 0
 3556 0420 0120C3E5 		strb	r2, [r3, #1]
 3557              	.LVL281:
 3558              	.L268:
1466:apps/rssi/main.c **** 	msgb_free(msg);
 3559              		.loc 2 1466 0
 3560 0424 0400A0E1 		mov	r0, r4
 3561 0428 FEFFFFEB 		bl	msgb_free
 3562              	.LVL282:
 3563              	.L267:
1468:apps/rssi/main.c **** }
 3564              		.loc 2 1468 0
 3565 042c 10D08DE2 		add	sp, sp, #16
 3566              		@ sp needed
 3567 0430 F047BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
 3568              	.LVL283:
 3569 0434 1EFF2FE1 		bx	lr
 3570              	.L338:
 3571              		.align	2
 3572              	.L337:
 3573 0438 00000000 		.word	.LANCHOR0
 3574 043c 00000000 		.word	ul_levels
 3575 0440 00000000 		.word	ul_new
 3576 0444 00000000 		.word	ul_max
 3577 0448 00000000 		.word	pm_meas
 3578 044c 00000000 		.word	pm_spectrum
 3579 0450 00000000 		.word	l1s
 3580 0454 F3010000 		.word	.LC53
 3581 0458 F6010000 		.word	.LC54
 3582 045c 00000000 		.word	bsic
 3583 0460 00000000 		.word	power
 3584 0464 00000000 		.word	si_2ter
 3585 0468 00000000 		.word	si_4
 3586 046c 00000000 		.word	si_1
 3587 0470 00000000 		.word	si_2
 3588 0474 00000000 		.word	si_2bis
 3589 0478 00000000 		.word	si_3
 3590 047c 00000000 		.word	assign
 3591 0480 00000000 		.word	ta
 3592 0484 00000000 		.word	rach_ref
 3593              		.cfi_endproc
 3594              	.LFE139:
 3596              		.section	.text.key_handler,"ax",%progbits
 3597              		.align	2
 3599              	key_handler:
 3600              	.LFB142:
1489:apps/rssi/main.c **** 
1490:apps/rssi/main.c **** static void key_handler(enum key_codes code, enum key_states state)
1491:apps/rssi/main.c **** {
 3601              		.loc 2 1491 0
 3602              		.cfi_startproc
 3603              		@ Function supports interworking.
 3604              		@ args = 0, pretend = 0, frame = 0
 3605              		@ frame_needed = 0, uses_anonymous_args = 0
 3606              		@ link register save eliminated.
 3607              	.LVL284:
1492:apps/rssi/main.c **** 	if (state != PRESSED) {
 3608              		.loc 2 1492 0
 3609 0000 000051E3 		cmp	r1, #0
 3610 0004 4C309FE5 		ldr	r3, .L343
1493:apps/rssi/main.c **** 		key_pressed = 0;
 3611              		.loc 2 1493 0
 3612 0008 0020A013 		movne	r2, #0
 3613 000c 2C208315 		strne	r2, [r3, #44]
1492:apps/rssi/main.c **** 	if (state != PRESSED) {
 3614              		.loc 2 1492 0
 3615 0010 1EFF2F11 		bxne	lr
 3616              	.LVL285:
 3617              	.LBB639:
 3618              	.LBB640:
1494:apps/rssi/main.c **** 		return;
1495:apps/rssi/main.c **** 	}
1496:apps/rssi/main.c **** 	/* key repeat */
1497:apps/rssi/main.c **** 	if (!key_pressed) {
 3619              		.loc 2 1497 0
 3620 0014 2C2093E5 		ldr	r2, [r3, #44]
 3621 0018 000052E3 		cmp	r2, #0
 3622 001c 0A00001A 		bne	.L342
1498:apps/rssi/main.c **** 		key_pressed = 1;
 3623              		.loc 2 1498 0
 3624 0020 0120A0E3 		mov	r2, #1
 3625 0024 2C2083E5 		str	r2, [r3, #44]
1499:apps/rssi/main.c **** 		key_pressed_when = jiffies;
 3626              		.loc 2 1499 0
 3627 0028 2C309FE5 		ldr	r3, .L343+4
 3628 002c 002093E5 		ldr	r2, [r3]
 3629 0030 28309FE5 		ldr	r3, .L343+8
 3630 0034 002083E5 		str	r2, [r3]
1500:apps/rssi/main.c **** 		key_pressed_code = code;
 3631              		.loc 2 1500 0
 3632 0038 24309FE5 		ldr	r3, .L343+12
 3633 003c 0000C3E5 		strb	r0, [r3]
1501:apps/rssi/main.c **** 		key_pressed_delay = HZ * 6 / 10;
 3634              		.loc 2 1501 0
 3635 0040 20309FE5 		ldr	r3, .L343+16
 3636 0044 3C20A0E3 		mov	r2, #60
 3637 0048 002083E5 		str	r2, [r3]
 3638              	.L342:
1502:apps/rssi/main.c **** 	}
1503:apps/rssi/main.c **** 
1504:apps/rssi/main.c **** 	key_code = code;
 3639              		.loc 2 1504 0
 3640 004c 18309FE5 		ldr	r3, .L343+20
 3641 0050 6800C3E5 		strb	r0, [r3, #104]
 3642 0054 1EFF2FE1 		bx	lr
 3643              	.L344:
 3644              		.align	2
 3645              	.L343:
 3646 0058 00000000 		.word	.LANCHOR0
 3647 005c 00000000 		.word	jiffies
 3648 0060 00000000 		.word	key_pressed_when
 3649 0064 00000000 		.word	key_pressed_code
 3650 0068 00000000 		.word	key_pressed_delay
 3651 006c 00000000 		.word	.LANCHOR1
 3652              	.LBE640:
 3653              	.LBE639:
 3654              		.cfi_endproc
 3655              	.LFE142:
 3657              		.section	.text.console_rx_cb,"ax",%progbits
 3658              		.align	2
 3660              	console_rx_cb:
 3661              	.LFB140:
1471:apps/rssi/main.c **** {
 3662              		.loc 2 1471 0
 3663              		.cfi_startproc
 3664              		@ Function supports interworking.
 3665              		@ args = 0, pretend = 0, frame = 0
 3666              		@ frame_needed = 0, uses_anonymous_args = 0
 3667              	.LVL286:
1472:apps/rssi/main.c **** 	if (dlci != SC_DLCI_CONSOLE) {
 3668              		.loc 2 1472 0
 3669 0000 0A0050E3 		cmp	r0, #10
1471:apps/rssi/main.c **** {
 3670              		.loc 2 1471 0
 3671 0004 10402DE9 		stmfd	sp!, {r4, lr}
 3672              	.LCFI13:
 3673              		.cfi_def_cfa_offset 8
 3674              		.cfi_offset 4, -8
 3675              		.cfi_offset 14, -4
1471:apps/rssi/main.c **** {
 3676              		.loc 2 1471 0
 3677 0008 0030A0E1 		mov	r3, r0
 3678 000c 0140A0E1 		mov	r4, r1
1472:apps/rssi/main.c **** 	if (dlci != SC_DLCI_CONSOLE) {
 3679              		.loc 2 1472 0
 3680 0010 0300000A 		beq	.L346
1473:apps/rssi/main.c **** 		printf("Message for unknown DLCI %u\n", dlci);
 3681              		.loc 2 1473 0
 3682 0014 0310A0E1 		mov	r1, r3
 3683              	.LVL287:
 3684 0018 20009FE5 		ldr	r0, .L348
 3685              	.LVL288:
 3686 001c FEFFFFEB 		bl	printf
 3687              	.LVL289:
1474:apps/rssi/main.c **** 		return;
 3688              		.loc 2 1474 0
 3689 0020 040000EA 		b	.L345
 3690              	.LVL290:
 3691              	.L346:
 3692              	.LBB643:
 3693              	.LBB644:
1477:apps/rssi/main.c **** 	printf("Message on console DLCI: '%s'\n", msg->data);
 3694              		.loc 2 1477 0
 3695 0024 18009FE5 		ldr	r0, .L348+4
 3696              	.LVL291:
 3697 0028 401091E5 		ldr	r1, [r1, #64]
 3698              	.LVL292:
 3699 002c FEFFFFEB 		bl	printf
 3700              	.LVL293:
1478:apps/rssi/main.c **** 	msgb_free(msg);
 3701              		.loc 2 1478 0
 3702 0030 0400A0E1 		mov	r0, r4
 3703 0034 FEFFFFEB 		bl	msgb_free
 3704              	.LVL294:
 3705              	.L345:
 3706              	.LBE644:
 3707              	.LBE643:
1479:apps/rssi/main.c **** }
 3708              		.loc 2 1479 0
 3709 0038 1040BDE8 		ldmfd	sp!, {r4, lr}
 3710              	.LVL295:
 3711 003c 1EFF2FE1 		bx	lr
 3712              	.L349:
 3713              		.align	2
 3714              	.L348:
 3715 0040 FC010000 		.word	.LC55
 3716 0044 19020000 		.word	.LC56
 3717              		.cfi_endproc
 3718              	.LFE140:
 3720              		.section	.text.toggle_up_down,"ax",%progbits
 3721              		.align	2
 3723              	toggle_up_down:
 3724              	.LFB116:
 687:apps/rssi/main.c **** {
 3725              		.loc 2 687 0
 3726              		.cfi_startproc
 3727              		@ Function supports interworking.
 3728              		@ args = 0, pretend = 0, frame = 0
 3729              		@ frame_needed = 0, uses_anonymous_args = 0
 3730 0000 10402DE9 		stmfd	sp!, {r4, lr}
 3731              	.LCFI14:
 3732              		.cfi_def_cfa_offset 8
 3733              		.cfi_offset 4, -8
 3734              		.cfi_offset 14, -4
 688:apps/rssi/main.c **** 	uplink = !uplink;
 3735              		.loc 2 688 0
 3736 0004 3C409FE5 		ldr	r4, .L352
 3737 0008 083094E5 		ldr	r3, [r4, #8]
 3738 000c 013073E2 		rsbs	r3, r3, #1
 3739 0010 0030A033 		movcc	r3, #0
 3740 0014 083084E5 		str	r3, [r4, #8]
 689:apps/rssi/main.c **** 	refresh_display();
 3741              		.loc 2 689 0
 3742 0018 FEFFFFEB 		bl	refresh_display
 3743              	.LVL296:
 691:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor < 0)
 3744              		.loc 2 691 0
 3745 001c 0430D4E5 		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 3746 0020 030053E3 		cmp	r3, #3
 3747 0024 0500001A 		bne	.L350
 691:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor < 0)
 3748              		.loc 2 691 0 is_stmt 0 discriminator 1
 3749 0028 1C309FE5 		ldr	r3, .L352+4
 3750 002c 003093E5 		ldr	r3, [r3]
 3751 0030 000053E3 		cmp	r3, #0
 3752              	.LBB647:
 3753              	.LBB648:
 692:apps/rssi/main.c **** 		request_ul_levels(ul_arfcn);
 3754              		.loc 2 692 0 is_stmt 1
 3755 0034 B401D4B1 		ldrlth	r0, [r4, #20]
 3756              	.LBE648:
 3757              	.LBE647:
 693:apps/rssi/main.c **** }
 3758              		.loc 2 693 0
 3759 0038 1040BDB8 		ldmltfd	sp!, {r4, lr}
 3760              	.LBB650:
 3761              	.LBB649:
 692:apps/rssi/main.c **** 		request_ul_levels(ul_arfcn);
 3762              		.loc 2 692 0
 3763 003c FEFFFFBA 		blt	request_ul_levels
 3764              	.LVL297:
 3765              	.L350:
 3766              	.LBE649:
 3767              	.LBE650:
 693:apps/rssi/main.c **** }
 3768              		.loc 2 693 0
 3769 0040 1040BDE8 		ldmfd	sp!, {r4, lr}
 3770 0044 1EFF2FE1 		bx	lr
 3771              	.L353:
 3772              		.align	2
 3773              	.L352:
 3774 0048 00000000 		.word	.LANCHOR0
 3775 004c 00000000 		.word	cursor
 3776              		.cfi_endproc
 3777              	.LFE116:
 3779              		.section	.text.enter_arfcn,"ax",%progbits
 3780              		.align	2
 3782              	enter_arfcn:
 3783              	.LFB112:
 531:apps/rssi/main.c **** {
 3784              		.loc 2 531 0
 3785              		.cfi_startproc
 3786              		@ Function supports interworking.
 3787              		@ args = 0, pretend = 0, frame = 0
 3788              		@ frame_needed = 0, uses_anonymous_args = 0
 3789              		@ link register save eliminated.
 3790              	.LVL298:
 533:apps/rssi/main.c **** 	if (mode != MODE_ARFCN) {
 3791              		.loc 2 533 0
 3792 0000 60219FE5 		ldr	r2, .L378
 3793 0004 0410D2E5 		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 3794 0008 020051E3 		cmp	r1, #2
 531:apps/rssi/main.c **** {
 3795              		.loc 2 531 0
 3796 000c 30002DE9 		stmfd	sp!, {r4, r5}
 3797              	.LCFI15:
 3798              		.cfi_def_cfa_offset 8
 3799              		.cfi_offset 4, -8
 3800              		.cfi_offset 5, -4
 3801 0010 54319FE5 		ldr	r3, .L378+4
 3802 0014 0240A0E1 		mov	r4, r2
 533:apps/rssi/main.c **** 	if (mode != MODE_ARFCN) {
 3803              		.loc 2 533 0
 3804 0018 0B00000A 		beq	.L355
 534:apps/rssi/main.c **** 		last_mode = mode;
 3805              		.loc 2 534 0
 3806 001c 4CC19FE5 		ldr	ip, .L378+8
 3807 0020 0010CCE5 		strb	r1, [ip]
 535:apps/rssi/main.c **** 		mode = MODE_ARFCN;
 3808              		.loc 2 535 0
 3809 0024 0210A0E3 		mov	r1, #2
 3810 0028 0410C2E5 		strb	r1, [r2, #4]
 536:apps/rssi/main.c **** 		input[0] = code - KEY_0 + '0';
 3811              		.loc 2 536 0
 3812 002c 40219FE5 		ldr	r2, .L378+12
 3813 0030 300080E2 		add	r0, r0, #48
 3814              	.LVL299:
 537:apps/rssi/main.c **** 		input[1] = '\0';
 3815              		.loc 2 537 0
 3816 0034 0010A0E3 		mov	r1, #0
 536:apps/rssi/main.c **** 		input[0] = code - KEY_0 + '0';
 3817              		.loc 2 536 0
 3818 0038 0000C2E5 		strb	r0, [r2]
 537:apps/rssi/main.c **** 		input[1] = '\0';
 3819              		.loc 2 537 0
 3820 003c 0110C2E5 		strb	r1, [r2, #1]
 538:apps/rssi/main.c **** 		cursor = 1;
 3821              		.loc 2 538 0
 3822 0040 0120A0E3 		mov	r2, #1
 3823 0044 002083E5 		str	r2, [r3]
 3824 0048 390000EA 		b	.L376
 3825              	.LVL300:
 3826              	.L355:
 543:apps/rssi/main.c **** 	if (code == KEY_LEFT_SB) {
 3827              		.loc 2 543 0
 3828 004c 0D0050E3 		cmp	r0, #13
 3829 0050 0A00001A 		bne	.L356
 545:apps/rssi/main.c **** 		if (cursor == 0) {
 3830              		.loc 2 545 0
 3831 0054 001093E5 		ldr	r1, [r3]
 3832 0058 000051E3 		cmp	r1, #0
 3833              	.LBB656:
 3834              	.LBB657:
 526:apps/rssi/main.c **** 	mode = last_mode;
 3835              		.loc 2 526 0
 3836 005c 0C319F05 		ldreq	r3, .L378+8
 3837              	.LBE657:
 3838              	.LBE656:
 550:apps/rssi/main.c **** 		cursor--;
 3839              		.loc 2 550 0
 3840 0060 01204112 		subne	r2, r1, #1
 3841              	.LBB660:
 3842              	.LBB658:
 526:apps/rssi/main.c **** 	mode = last_mode;
 3843              		.loc 2 526 0
 3844 0064 0030D305 		ldreqb	r3, [r3]	@ zero_extendqisi2
 3845              	.LBE658:
 3846              	.LBE660:
 550:apps/rssi/main.c **** 		cursor--;
 3847              		.loc 2 550 0
 3848 0068 00208315 		strne	r2, [r3]
 551:apps/rssi/main.c **** 		input[cursor] = '\0';
 3849              		.loc 2 551 0
 3850 006c 00319F15 		ldrne	r3, .L378+12
 3851 0070 0010A013 		movne	r1, #0
 3852              	.LBB661:
 3853              	.LBB659:
 526:apps/rssi/main.c **** 	mode = last_mode;
 3854              		.loc 2 526 0
 3855 0074 0430C205 		streqb	r3, [r2, #4]
 3856              	.LBE659:
 3857              	.LBE661:
 551:apps/rssi/main.c **** 		input[cursor] = '\0';
 3858              		.loc 2 551 0
 3859 0078 0210C317 		strneb	r1, [r3, r2]
 3860 007c 2C0000EA 		b	.L376
 3861              	.L356:
 556:apps/rssi/main.c **** 	if (code == KEY_RIGHT_SB) {
 3862              		.loc 2 556 0
 3863 0080 0E0050E3 		cmp	r0, #14
 3864 0084 2000001A 		bne	.L358
 3865              	.LVL301:
 3866              	.LBB662:
 3867              	.LBB663:
 562:apps/rssi/main.c **** 		if (cursor == 0) {
 3868              		.loc 2 562 0
 3869 0088 001093E5 		ldr	r1, [r3]
 3870 008c 000051E3 		cmp	r1, #0
 3871 0090 3200000A 		beq	.L354
 3872 0094 0020A0E3 		mov	r2, #0
 566:apps/rssi/main.c **** 			check = (check << 3) + (check << 1) + input[i] - '0';
 3873              		.loc 2 566 0
 3874 0098 D4009FE5 		ldr	r0, .L378+12
 3875              	.LVL302:
 562:apps/rssi/main.c **** 		if (cursor == 0) {
 3876              		.loc 2 562 0
 3877 009c 0230A0E1 		mov	r3, r2
 3878              	.LVL303:
 3879              	.L360:
 565:apps/rssi/main.c **** 		for (i = 0; i < cursor; i++)
 3880              		.loc 2 565 0
 3881 00a0 010052E1 		cmp	r2, r1
 3882 00a4 060000AA 		bge	.L377
 566:apps/rssi/main.c **** 			check = (check << 3) + (check << 1) + input[i] - '0';
 3883              		.loc 2 566 0
 3884 00a8 83C0A0E1 		mov	ip, r3, asl #1
 3885 00ac 83318CE0 		add	r3, ip, r3, asl #3
 3886              	.LVL304:
 3887 00b0 00C0D2E7 		ldrb	ip, [r2, r0]	@ zero_extendqisi2
 3888 00b4 0C3083E0 		add	r3, r3, ip
 3889 00b8 303043E2 		sub	r3, r3, #48
 3890              	.LVL305:
 565:apps/rssi/main.c **** 		for (i = 0; i < cursor; i++)
 3891              		.loc 2 565 0
 3892 00bc 012082E2 		add	r2, r2, #1
 3893              	.LVL306:
 3894 00c0 F6FFFFEA 		b	.L360
 3895              	.L377:
 3896 00c4 AC509FE5 		ldr	r5, .L378+16
 3897 00c8 0010A0E3 		mov	r1, #0
 3898              	.LVL307:
 3899              	.L362:
 3900 00cc 01C085E0 		add	ip, r5, r1
 569:apps/rssi/main.c **** 		for (i = 0; bands[i].max; i++) {
 3901              		.loc 2 569 0
 3902 00d0 04209CE5 		ldr	r2, [ip, #4]
 3903 00d4 000052E3 		cmp	r2, #0
 3904 00d8 2000000A 		beq	.L354
 3905              	.LVL308:
 571:apps/rssi/main.c **** 			if (temp->min < temp->max) {
 3906              		.loc 2 571 0
 3907 00dc 050091E7 		ldr	r0, [r1, r5]
 3908 00e0 020050E1 		cmp	r0, r2
 3909 00e4 020000AA 		bge	.L363
 572:apps/rssi/main.c **** 				if (check >= temp->min && check <= temp->max)
 3910              		.loc 2 572 0
 3911 00e8 000053E1 		cmp	r3, r0
 3912 00ec 040000BA 		blt	.L364
 3913 00f0 010000EA 		b	.L375
 3914              	.L363:
 575:apps/rssi/main.c **** 				if (check >= temp->min || check <= temp->max)
 3915              		.loc 2 575 0
 3916 00f4 000053E1 		cmp	r3, r0
 3917 00f8 0F0000AA 		bge	.L365
 3918              	.L375:
 3919 00fc 020053E1 		cmp	r3, r2
 3920 0100 0D0000DA 		ble	.L365
 3921              	.L364:
 3922 0104 181081E2 		add	r1, r1, #24
 3923              	.LVL309:
 3924 0108 EFFFFFEA 		b	.L362
 3925              	.LVL310:
 3926              	.L358:
 3927              	.LBE663:
 3928              	.LBE662:
 590:apps/rssi/main.c **** 	if (cursor == 4)
 3929              		.loc 2 590 0
 3930 010c 002093E5 		ldr	r2, [r3]
 3931 0110 040052E3 		cmp	r2, #4
 3932 0114 1100000A 		beq	.L354
 593:apps/rssi/main.c **** 	input[cursor] = code - KEY_0 + '0';
 3933              		.loc 2 593 0
 3934 0118 54109FE5 		ldr	r1, .L378+12
 3935 011c 300080E2 		add	r0, r0, #48
 3936              	.LVL311:
 3937 0120 0200C1E7 		strb	r0, [r1, r2]
 594:apps/rssi/main.c **** 	cursor++;
 3938              		.loc 2 594 0
 3939 0124 012082E2 		add	r2, r2, #1
 3940 0128 002083E5 		str	r2, [r3]
 595:apps/rssi/main.c **** 	input[cursor] = '\0';
 3941              		.loc 2 595 0
 3942 012c 0030A0E3 		mov	r3, #0
 3943 0130 0230C1E7 		strb	r3, [r1, r2]
 3944              	.L376:
 597:apps/rssi/main.c **** }
 3945              		.loc 2 597 0
 3946 0134 3000BDE8 		ldmfd	sp!, {r4, r5}
 596:apps/rssi/main.c **** 	refresh_display();
 3947              		.loc 2 596 0
 3948 0138 FEFFFFEA 		b	refresh_display
 3949              	.LVL312:
 3950              	.L365:
 3951              	.LBB665:
 3952              	.LBB664:
 581:apps/rssi/main.c **** 		if (check > 1023)
 3953              		.loc 2 581 0
 3954 013c 010B53E3 		cmp	r3, #1024
 3955 0140 060000AA 		bge	.L354
 583:apps/rssi/main.c **** 		arfcn = check;
 3956              		.loc 2 583 0
 3957 0144 B631C4E1 		strh	r3, [r4, #22]	@ movhi
 584:apps/rssi/main.c **** 		band = temp;
 3958              		.loc 2 584 0
 3959 0148 2C309FE5 		ldr	r3, .L378+20
 3960              	.LVL313:
 3961 014c 00C083E5 		str	ip, [r3]
 585:apps/rssi/main.c **** 		mode = last_mode;
 3962              		.loc 2 585 0
 3963 0150 18309FE5 		ldr	r3, .L378+8
 3964 0154 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 3965 0158 0430C4E5 		strb	r3, [r4, #4]
 3966 015c F4FFFFEA 		b	.L376
 3967              	.LVL314:
 3968              	.L354:
 3969              	.LBE664:
 3970              	.LBE665:
 597:apps/rssi/main.c **** }
 3971              		.loc 2 597 0
 3972 0160 3000BDE8 		ldmfd	sp!, {r4, r5}
 3973 0164 1EFF2FE1 		bx	lr
 3974              	.L379:
 3975              		.align	2
 3976              	.L378:
 3977 0168 00000000 		.word	.LANCHOR0
 3978 016c 00000000 		.word	cursor
 3979 0170 00000000 		.word	last_mode
 3980 0174 00000000 		.word	input
 3981 0178 08000000 		.word	.LANCHOR1+8
 3982 017c 00000000 		.word	band
 3983              		.cfi_endproc
 3984              	.LFE112:
 3986              		.section	.text.gsm48_decode_lai,"ax",%progbits
 3987              		.align	2
 3988              		.global	gsm48_decode_lai
 3990              	gsm48_decode_lai:
 3991              	.LFB127:
1048:apps/rssi/main.c **** {
 3992              		.loc 2 1048 0
 3993              		.cfi_startproc
 3994              		@ Function supports interworking.
 3995              		@ args = 0, pretend = 0, frame = 0
 3996              		@ frame_needed = 0, uses_anonymous_args = 0
 3997              		@ link register save eliminated.
 3998              	.LVL315:
 3999 0000 30002DE9 		stmfd	sp!, {r4, r5}
 4000              	.LCFI16:
 4001              		.cfi_def_cfa_offset 8
 4002              		.cfi_offset 4, -8
 4003              		.cfi_offset 5, -4
1049:apps/rssi/main.c **** 	*_mcc = ((lai->digits[0] & 0x0f) << 8)
 4004              		.loc 2 1049 0
 4005 0004 00C0D0E5 		ldrb	ip, [r0]	@ zero_extendqisi2
 4006 0008 0150D0E5 		ldrb	r5, [r0, #1]	@ zero_extendqisi2
 4007 000c 0F400CE2 		and	r4, ip, #15
 4008 0010 0F5005E2 		and	r5, r5, #15
 4009 0014 0FC0CCE3 		bic	ip, ip, #15
 4010 0018 0CC085E1 		orr	ip, r5, ip
 4011 001c 04C48CE1 		orr	ip, ip, r4, asl #8
 4012 0020 B0C0C1E1 		strh	ip, [r1]	@ movhi
1052:apps/rssi/main.c **** 	*_mnc = ((lai->digits[2] & 0x0f) << 8)
 4013              		.loc 2 1052 0
 4014 0024 0210D0E5 		ldrb	r1, [r0, #2]	@ zero_extendqisi2
 4015              	.LVL316:
1054:apps/rssi/main.c **** 	 | ((lai->digits[1] & 0xf0) >> 4);
 4016              		.loc 2 1054 0
 4017 0028 0140D0E5 		ldrb	r4, [r0, #1]	@ zero_extendqisi2
1052:apps/rssi/main.c **** 	*_mnc = ((lai->digits[2] & 0x0f) << 8)
 4018              		.loc 2 1052 0
 4019 002c 0FC001E2 		and	ip, r1, #15
 4020 0030 0F10C1E3 		bic	r1, r1, #15
 4021 0034 241281E1 		orr	r1, r1, r4, lsr #4
 4022 0038 0C1481E1 		orr	r1, r1, ip, asl #8
 4023 003c B010C2E1 		strh	r1, [r2]	@ movhi
1055:apps/rssi/main.c **** 	*_lac = ntohs(lai->lac);
 4024              		.loc 2 1055 0
 4025 0040 0410D0E5 		ldrb	r1, [r0, #4]	@ zero_extendqisi2
 4026 0044 0320D0E5 		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 4027              	.LVL317:
 4028 0048 012482E1 		orr	r2, r2, r1, asl #8
 4029              	.LVL318:
 4030              	.LBB666:
 4031              	.LBB667:
 4032              		.loc 4 51 0
 4033 004c 2214A0E1 		mov	r1, r2, lsr #8
 4034 0050 022481E1 		orr	r2, r1, r2, asl #8
 4035              	.LVL319:
 4036              	.LBE667:
 4037              	.LBE666:
1058:apps/rssi/main.c **** }
 4038              		.loc 2 1058 0
 4039 0054 0000A0E3 		mov	r0, #0
 4040              	.LVL320:
1055:apps/rssi/main.c **** 	*_lac = ntohs(lai->lac);
 4041              		.loc 2 1055 0
 4042 0058 B020C3E1 		strh	r2, [r3]	@ movhi
 4043              	.LVL321:
1058:apps/rssi/main.c **** }
 4044              		.loc 2 1058 0
 4045 005c 3000BDE8 		ldmfd	sp!, {r4, r5}
 4046 0060 1EFF2FE1 		bx	lr
 4047              		.cfi_endproc
 4048              	.LFE127:
 4050              		.section	.text.startup.main,"ax",%progbits
 4051              		.align	2
 4052              		.global	main
 4054              	main:
 4055              	.LFB143:
1505:apps/rssi/main.c **** }
1506:apps/rssi/main.c **** 
1507:apps/rssi/main.c **** int main(void)
1508:apps/rssi/main.c **** {
 4056              		.loc 2 1508 0
 4057              		.cfi_startproc
 4058              		@ Function supports interworking.
 4059              		@ args = 0, pretend = 0, frame = 8
 4060              		@ frame_needed = 0, uses_anonymous_args = 0
 4061 0000 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4062              	.LCFI17:
 4063              		.cfi_def_cfa_offset 36
 4064              		.cfi_offset 4, -36
 4065              		.cfi_offset 5, -32
 4066              		.cfi_offset 6, -28
 4067              		.cfi_offset 7, -24
 4068              		.cfi_offset 8, -20
 4069              		.cfi_offset 9, -16
 4070              		.cfi_offset 10, -12
 4071              		.cfi_offset 11, -8
 4072              		.cfi_offset 14, -4
1509:apps/rssi/main.c **** 	board_init(1);
 4073              		.loc 2 1509 0
 4074 0004 0100A0E3 		mov	r0, #1
1508:apps/rssi/main.c **** {
 4075              		.loc 2 1508 0
 4076 0008 14D04DE2 		sub	sp, sp, #20
 4077              	.LCFI18:
 4078              		.cfi_def_cfa_offset 56
1510:apps/rssi/main.c **** 
1511:apps/rssi/main.c **** 	puts("\n\nVADIMBETMAN Monitor Tool (revision " GIT_REVISION ")\n");
1512:apps/rssi/main.c **** 	puts(hr);
 4079              		.loc 2 1512 0
 4080 000c 207C9FE5 		ldr	r7, .L521
1509:apps/rssi/main.c **** 	board_init(1);
 4081              		.loc 2 1509 0
 4082 0010 FEFFFFEB 		bl	board_init
 4083              	.LVL322:
1511:apps/rssi/main.c **** 	puts("\n\nVADIMBETMAN Monitor Tool (revision " GIT_REVISION ")\n");
 4084              		.loc 2 1511 0
 4085 0014 1C0C9FE5 		ldr	r0, .L521+4
 4086 0018 FEFFFFEB 		bl	puts
 4087              	.LVL323:
 4088              		.loc 2 1512 0
 4089 001c 6C0097E5 		ldr	r0, [r7, #108]
 4090 0020 FEFFFFEB 		bl	puts
 4091              	.LVL324:
1513:apps/rssi/main.c **** 
1514:apps/rssi/main.c **** 	/* Dump device identification */
1515:apps/rssi/main.c **** 	dump_dev_id();
 4092              		.loc 2 1515 0
 4093 0024 FEFFFFEB 		bl	dump_dev_id
 4094              	.LVL325:
1516:apps/rssi/main.c **** 	puts(hr);
 4095              		.loc 2 1516 0
 4096 0028 6C0097E5 		ldr	r0, [r7, #108]
 4097 002c FEFFFFEB 		bl	puts
 4098              	.LVL326:
1517:apps/rssi/main.c **** 
1518:apps/rssi/main.c **** 	/* Dump clock config before PLL set */
1519:apps/rssi/main.c **** 	calypso_clk_dump();
 4099              		.loc 2 1519 0
 4100 0030 FEFFFFEB 		bl	calypso_clk_dump
 4101              	.LVL327:
1520:apps/rssi/main.c **** 	puts(hr);
 4102              		.loc 2 1520 0
 4103 0034 6C0097E5 		ldr	r0, [r7, #108]
 4104 0038 FEFFFFEB 		bl	puts
 4105              	.LVL328:
1521:apps/rssi/main.c **** 
1522:apps/rssi/main.c **** 	keypad_set_handler(&key_handler);
 4106              		.loc 2 1522 0
 4107 003c F80B9FE5 		ldr	r0, .L521+8
 4108 0040 FEFFFFEB 		bl	keypad_set_handler
 4109              	.LVL329:
1523:apps/rssi/main.c **** 
1524:apps/rssi/main.c **** 	/* Dump clock config after PLL set */
1525:apps/rssi/main.c **** 	calypso_clk_dump();
 4110              		.loc 2 1525 0
 4111 0044 FEFFFFEB 		bl	calypso_clk_dump
 4112              	.LVL330:
1526:apps/rssi/main.c **** 	puts(hr);
 4113              		.loc 2 1526 0
 4114 0048 6C0097E5 		ldr	r0, [r7, #108]
 4115 004c FEFFFFEB 		bl	puts
 4116              	.LVL331:
1527:apps/rssi/main.c **** 
1528:apps/rssi/main.c **** 	sercomm_register_rx_cb(SC_DLCI_CONSOLE, console_rx_cb);
 4117              		.loc 2 1528 0
 4118 0050 E81B9FE5 		ldr	r1, .L521+12
 4119 0054 0A00A0E3 		mov	r0, #10
 4120 0058 FEFFFFEB 		bl	sercomm_register_rx_cb
 4121              	.LVL332:
1529:apps/rssi/main.c **** 	sercomm_register_rx_cb(SC_DLCI_L1A_L23, l1a_l23_rx_cb);
 4122              		.loc 2 1529 0
 4123 005c E01B9FE5 		ldr	r1, .L521+16
 4124 0060 0500A0E3 		mov	r0, #5
 4125 0064 FEFFFFEB 		bl	sercomm_register_rx_cb
 4126              	.LVL333:
1530:apps/rssi/main.c **** 
1531:apps/rssi/main.c **** 	layer1_init();
 4127              		.loc 2 1531 0
 4128 0068 FEFFFFEB 		bl	layer1_init
 4129              	.LVL334:
1532:apps/rssi/main.c **** 	l1a_l23_tx_cb = l1a_l23_tx;
 4130              		.loc 2 1532 0
 4131 006c D43B9FE5 		ldr	r3, .L521+20
 4132 0070 D42B9FE5 		ldr	r2, .L521+24
1533:apps/rssi/main.c **** 
1534:apps/rssi/main.c **** //	display_unset_attr(DISP_ATTR_INVERT);
1535:apps/rssi/main.c **** 
1536:apps/rssi/main.c **** 	tpu_frame_irq_en(1, 1);
 4133              		.loc 2 1536 0
 4134 0074 0100A0E3 		mov	r0, #1
 4135 0078 0010A0E1 		mov	r1, r0
1532:apps/rssi/main.c **** 	l1a_l23_tx_cb = l1a_l23_tx;
 4136              		.loc 2 1532 0
 4137 007c 002083E5 		str	r2, [r3]
 4138              		.loc 2 1536 0
 4139 0080 FEFFFFEB 		bl	tpu_frame_irq_en
 4140              	.LVL335:
1537:apps/rssi/main.c **** 
1538:apps/rssi/main.c **** 	buzzer_mode_pwt(1);
 4141              		.loc 2 1538 0
 4142 0084 0100A0E3 		mov	r0, #1
 4143 0088 FEFFFFEB 		bl	buzzer_mode_pwt
 4144              	.LVL336:
1539:apps/rssi/main.c **** 	buzzer_volume(0);
 4145              		.loc 2 1539 0
 4146 008c 0000A0E3 		mov	r0, #0
 4147 0090 FEFFFFEB 		bl	buzzer_volume
 4148              	.LVL337:
1540:apps/rssi/main.c **** 
1541:apps/rssi/main.c **** 	memset(pm_spectrum, 0, sizeof(pm_spectrum));
 4149              		.loc 2 1541 0
 4150 0094 0010A0E3 		mov	r1, #0
 4151 0098 012BA0E3 		mov	r2, #1024
 4152 009c AC0B9FE5 		ldr	r0, .L521+28
 4153 00a0 FEFFFFEB 		bl	memset
 4154              	.LVL338:
1542:apps/rssi/main.c **** 	memset(ul_max, 0, sizeof(ul_max));
 4155              		.loc 2 1542 0
 4156 00a4 0010A0E3 		mov	r1, #0
 4157 00a8 0820A0E3 		mov	r2, #8
 4158 00ac A00B9FE5 		ldr	r0, .L521+32
 4159 00b0 FEFFFFEB 		bl	memset
 4160              	.LVL339:
1543:apps/rssi/main.c **** 
1544:apps/rssi/main.c **** 	/* inc 0 to 1 and refresh */
1545:apps/rssi/main.c **** 	inc_dec_arfcn(1);
 4161              		.loc 2 1545 0
 4162 00b4 0100A0E3 		mov	r0, #1
 4163 00b8 FEFFFFEB 		bl	inc_dec_arfcn
 4164              	.LVL340:
 4165              	.LBB722:
 4166              	.LBB723:
 773:apps/rssi/main.c **** 	if (key_pressed) {
 4167              		.loc 2 773 0
 4168 00bc 944B9FE5 		ldr	r4, .L521+36
 4169              	.LBB724:
 774:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - key_pressed_when;
 4170              		.loc 2 774 0
 4171 00c0 948B9FE5 		ldr	r8, .L521+40
 4172 00c4 0450A0E1 		mov	r5, r4
 4173              	.L382:
 4174              	.LBE724:
 4175              	.LBE723:
 4176              	.LBE722:
1546:apps/rssi/main.c **** 
1547:apps/rssi/main.c **** 	while (1) {
1548:apps/rssi/main.c **** 		l1a_compl_execute();
 4177              		.loc 2 1548 0 discriminator 1
 4178 00c8 FEFFFFEB 		bl	l1a_compl_execute
 4179              	.LVL341:
1549:apps/rssi/main.c **** 		osmo_timers_update();
 4180              		.loc 2 1549 0 discriminator 1
 4181 00cc FEFFFFEB 		bl	osmo_timers_update
 4182              	.LVL342:
 4183              	.LBB757:
 4184              	.LBB756:
 773:apps/rssi/main.c **** 	if (key_pressed) {
 4185              		.loc 2 773 0 discriminator 1
 4186 00d0 2C3094E5 		ldr	r3, [r4, #44]
 4187 00d4 000053E3 		cmp	r3, #0
 4188 00d8 1100000A 		beq	.L384
 4189              	.LBB725:
 774:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - key_pressed_when;
 4190              		.loc 2 774 0
 4191 00dc 7C2B9FE5 		ldr	r2, .L521+44
 4192 00e0 000098E5 		ldr	r0, [r8]
 4193              	.LVL343:
 4194 00e4 003092E5 		ldr	r3, [r2]
 4195 00e8 000063E0 		rsb	r0, r3, r0
 4196              	.LVL344:
 775:apps/rssi/main.c **** 		if (elapsed > key_pressed_delay) {
 4197              		.loc 2 775 0
 4198 00ec 703B9FE5 		ldr	r3, .L521+48
 4199 00f0 001093E5 		ldr	r1, [r3]
 4200 00f4 010050E1 		cmp	r0, r1
 4201 00f8 0900009A 		bls	.L384
 776:apps/rssi/main.c **** 			key_pressed_when = jiffies;
 4202              		.loc 2 776 0
 4203 00fc 001098E5 		ldr	r1, [r8]
 4204 0100 001082E5 		str	r1, [r2]
 777:apps/rssi/main.c **** 			key_pressed_delay = HZ / 10;
 4205              		.loc 2 777 0
 4206 0104 0A20A0E3 		mov	r2, #10
 4207 0108 002083E5 		str	r2, [r3]
 780:apps/rssi/main.c **** 			 || key_pressed_code == KEY_RIGHT)
 4208              		.loc 2 780 0
 4209 010c 543B9FE5 		ldr	r3, .L521+52
 4210 0110 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 4211 0114 112043E2 		sub	r2, r3, #17
 779:apps/rssi/main.c **** 			if (key_pressed_code == KEY_LEFT
 4212              		.loc 2 779 0
 4213 0118 FF2002E2 		and	r2, r2, #255
 4214 011c 010052E3 		cmp	r2, #1
 781:apps/rssi/main.c **** 				key_code = key_pressed_code;
 4215              		.loc 2 781 0
 4216 0120 6830C795 		strlsb	r3, [r7, #104]
 4217              	.LVL345:
 4218              	.L384:
 4219              	.LBE725:
 785:apps/rssi/main.c **** 	if (key_code == KEY_INV)
 4220              		.loc 2 785 0
 4221 0124 6800D7E5 		ldrb	r0, [r7, #104]	@ zero_extendqisi2
 4222 0128 FF0050E3 		cmp	r0, #255
 4223 012c 7801000A 		beq	.L386
 789:apps/rssi/main.c **** 	if (tone_on)
 4224              		.loc 2 789 0
 4225 0130 303095E5 		ldr	r3, [r5, #48]
 4226 0134 000053E3 		cmp	r3, #0
 4227 0138 7501001A 		bne	.L386
 792:apps/rssi/main.c **** 	switch (key_code) {
 4228              		.loc 2 792 0
 4229 013c 140050E3 		cmp	r0, #20
 4230 0140 00F19F97 		ldrls	pc, [pc, r0, asl #2]
 4231 0144 700100EA 		b	.L387
 4232              	.L389:
 4233 0148 9C010000 		.word	.L388
 4234 014c 9C010000 		.word	.L388
 4235 0150 9C010000 		.word	.L388
 4236 0154 9C010000 		.word	.L388
 4237 0158 9C010000 		.word	.L388
 4238 015c 9C010000 		.word	.L388
 4239 0160 9C010000 		.word	.L388
 4240 0164 9C010000 		.word	.L388
 4241 0168 9C010000 		.word	.L388
 4242 016c 9C010000 		.word	.L388
 4243 0170 00070000 		.word	.L390
 4244 0174 0C070000 		.word	.L387
 4245 0178 A0060000 		.word	.L391
 4246 017c AC030000 		.word	.L392
 4247 0180 14040000 		.word	.L393
 4248 0184 AC010000 		.word	.L394
 4249 0188 20020000 		.word	.L395
 4250 018c 24030000 		.word	.L396
 4251 0190 B8020000 		.word	.L397
 4252 0194 50040000 		.word	.L398
 4253 0198 C4060000 		.word	.L399
 4254              	.L388:
 803:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM || mode == MODE_ARFCN)
 4255              		.loc 2 803 0
 4256 019c 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 4257 01a0 020053E3 		cmp	r3, #2
 4258 01a4 5801008A 		bhi	.L387
 4259 01a8 8A0000EA 		b	.L511
 4260              	.L394:
 807:apps/rssi/main.c **** 		if (mode == MODE_MAIN)
 4261              		.loc 2 807 0
 4262 01ac 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 4263 01b0 000053E3 		cmp	r3, #0
 4264 01b4 0500001A 		bne	.L400
 4265              	.LVL346:
 4266              	.LBB726:
 4267              	.LBB727:
 713:apps/rssi/main.c **** 		if (tone + 25 <= 255)
 4268              		.loc 2 713 0
 4269 01b8 183094E5 		ldr	r3, [r4, #24]
 4270 01bc E60053E3 		cmp	r3, #230
 4271 01c0 0A0000CA 		bgt	.L513
 714:apps/rssi/main.c **** 			tone += 25;
 4272              		.loc 2 714 0
 4273 01c4 193083E2 		add	r3, r3, #25
 4274              	.LVL347:
 4275              	.L510:
 4276 01c8 183084E5 		str	r3, [r4, #24]
 4277 01cc 070000EA 		b	.L513
 4278              	.L400:
 4279              	.LBE727:
 4280              	.LBE726:
 809:apps/rssi/main.c **** 		else if (mode == MODE_SYNC)
 4281              		.loc 2 809 0
 4282 01d0 030053E3 		cmp	r3, #3
 4283 01d4 0700001A 		bne	.L403
 4284              	.LVL348:
 4285              	.LBB728:
 4286              	.LBB729:
 737:apps/rssi/main.c **** 		if (cursor < 0)
 4287              		.loc 2 737 0
 4288 01d8 8C3A9FE5 		ldr	r3, .L521+56
 4289 01dc 002093E5 		ldr	r2, [r3]
 4290 01e0 000052E3 		cmp	r2, #0
 4291 01e4 480100BA 		blt	.L387
 739:apps/rssi/main.c **** 		cursor--;
 4292              		.loc 2 739 0
 4293 01e8 012042E2 		sub	r2, r2, #1
 4294 01ec 002083E5 		str	r2, [r3]
 4295              	.LVL349:
 4296              	.L513:
 742:apps/rssi/main.c **** 	refresh_display();
 4297              		.loc 2 742 0
 4298 01f0 FEFFFFEB 		bl	refresh_display
 4299              	.LVL350:
 4300 01f4 440100EA 		b	.L387
 4301              	.L403:
 4302              	.LBE729:
 4303              	.LBE728:
 811:apps/rssi/main.c **** 		else if (mode == MODE_SPECTRUM)
 4304              		.loc 2 811 0
 4305 01f8 010053E3 		cmp	r3, #1
 4306 01fc 4201001A 		bne	.L387
 4307              	.LVL351:
 4308              	.LBB730:
 4309              	.LBB731:
 750:apps/rssi/main.c **** 		pm_scale <<= 1;
 4310              		.loc 2 750 0
 4311 0200 043097E5 		ldr	r3, [r7, #4]
 4312 0204 8330A0E1 		mov	r3, r3, asl #1
 751:apps/rssi/main.c **** 		if (pm_scale > 8)
 4313              		.loc 2 751 0
 4314 0208 080053E3 		cmp	r3, #8
 750:apps/rssi/main.c **** 		pm_scale <<= 1;
 4315              		.loc 2 750 0
 4316 020c 043087E5 		str	r3, [r7, #4]
 751:apps/rssi/main.c **** 		if (pm_scale > 8)
 4317              		.loc 2 751 0
 752:apps/rssi/main.c **** 			pm_scale = 8;
 4318              		.loc 2 752 0
 4319 0210 1C3A9FC5 		ldrgt	r3, .L521
 4320 0214 0820A0C3 		movgt	r2, #8
 4321 0218 042083C5 		strgt	r2, [r3, #4]
 4322 021c F3FFFFEA 		b	.L513
 4323              	.LVL352:
 4324              	.L395:
 4325              	.LBE731:
 4326              	.LBE730:
 815:apps/rssi/main.c **** 		if (mode == MODE_MAIN)
 4327              		.loc 2 815 0
 4328 0220 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 4329 0224 000053E3 		cmp	r3, #0
 4330 0228 0400001A 		bne	.L405
 4331              	.LVL353:
 4332              	.LBB732:
 4333              	.LBB733:
 716:apps/rssi/main.c **** 		if (tone - 25 >= 0)
 4334              		.loc 2 716 0
 4335 022c 183094E5 		ldr	r3, [r4, #24]
 4336 0230 180053E3 		cmp	r3, #24
 717:apps/rssi/main.c **** 			tone -= 25;
 4337              		.loc 2 717 0
 4338 0234 193043C2 		subgt	r3, r3, #25
 716:apps/rssi/main.c **** 		if (tone - 25 >= 0)
 4339              		.loc 2 716 0
 4340 0238 E2FFFFCA 		bgt	.L510
 4341 023c EBFFFFEA 		b	.L513
 4342              	.LVL354:
 4343              	.L405:
 4344              	.LBE733:
 4345              	.LBE732:
 817:apps/rssi/main.c **** 		else if (mode == MODE_SYNC)
 4346              		.loc 2 817 0
 4347 0240 030053E3 		cmp	r3, #3
 4348 0244 1200001A 		bne	.L406
 4349              	.LVL355:
 4350              	.LBB734:
 4351              	.LBB735:
 733:apps/rssi/main.c **** 		if (cursor > 0 && cursor - 1 >= (nb_num - NEIGH_LINES))
 4352              		.loc 2 733 0
 4353 0248 1C1A9FE5 		ldr	r1, .L521+56
 4354 024c 003091E5 		ldr	r3, [r1]
 4355 0250 000053E3 		cmp	r3, #0
 4356 0254 0B0000DA 		ble	.L407
 4357 0258 102A9FE5 		ldr	r2, .L521+60
 4358 025c 002092E5 		ldr	r2, [r2]
 4359 0260 B222D2E1 		ldrh	r2, [r2, #34]
 4360 0264 192042E2 		sub	r2, r2, #25
 4361 0268 070082E2 		add	r0, r2, #7
 4362 026c 000052E3 		cmp	r2, #0
 4363 0270 0020A0B1 		movlt	r2, r0
 4364 0274 F8099FE5 		ldr	r0, .L521+64
 4365 0278 000090E5 		ldr	r0, [r0]
 4366 027c C22140E0 		sub	r2, r0, r2, asr #3
 4367 0280 020053E1 		cmp	r3, r2
 4368 0284 200100CA 		bgt	.L387
 4369              	.L407:
 735:apps/rssi/main.c **** 		cursor++;
 4370              		.loc 2 735 0
 4371 0288 013083E2 		add	r3, r3, #1
 4372 028c 003081E5 		str	r3, [r1]
 4373 0290 D6FFFFEA 		b	.L513
 4374              	.LVL356:
 4375              	.L406:
 4376              	.LBE735:
 4377              	.LBE734:
 819:apps/rssi/main.c **** 		else if (mode == MODE_SPECTRUM)
 4378              		.loc 2 819 0
 4379 0294 010053E3 		cmp	r3, #1
 4380 0298 1B01001A 		bne	.L387
 4381              	.LVL357:
 4382              	.LBB736:
 4383              	.LBB737:
 754:apps/rssi/main.c **** 		pm_scale >>= 1;
 4384              		.loc 2 754 0
 4385 029c 042097E5 		ldr	r2, [r7, #4]
 4386 02a0 C220A0E1 		mov	r2, r2, asr #1
 755:apps/rssi/main.c **** 		if (pm_scale < 1)
 4387              		.loc 2 755 0
 4388 02a4 000052E3 		cmp	r2, #0
 754:apps/rssi/main.c **** 		pm_scale >>= 1;
 4389              		.loc 2 754 0
 4390 02a8 042087E5 		str	r2, [r7, #4]
 756:apps/rssi/main.c **** 			pm_scale = 1;
 4391              		.loc 2 756 0
 4392 02ac 80299FD5 		ldrle	r2, .L521
 4393 02b0 043082D5 		strle	r3, [r2, #4]
 4394 02b4 CDFFFFEA 		b	.L513
 4395              	.LVL358:
 4396              	.L397:
 4397              	.LBE737:
 4398              	.LBE736:
 823:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 4399              		.loc 2 823 0
 4400 02b8 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 4401 02bc 010053E3 		cmp	r3, #1
 824:apps/rssi/main.c **** 			inc_dec_arfcn(1);
 4402              		.loc 2 824 0
 4403 02c0 0100A093 		movls	r0, #1
 823:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 4404              		.loc 2 823 0
 4405 02c4 1A00009A 		bls	.L514
 825:apps/rssi/main.c **** 		else if (mode == MODE_SYNC && cursor < 0)
 4406              		.loc 2 825 0
 4407 02c8 030053E3 		cmp	r3, #3
 4408 02cc 0E01001A 		bne	.L387
 4409 02d0 94399FE5 		ldr	r3, .L521+56
 4410 02d4 003093E5 		ldr	r3, [r3]
 4411 02d8 000053E3 		cmp	r3, #0
 4412 02dc 0A0100AA 		bge	.L387
 4413              	.LVL359:
 4414              	.LBB738:
 4415              	.LBB739:
 659:apps/rssi/main.c **** 		for (a = (ul_arfcn + 1) & 1023; a != (arfcn & 1023);
 4416              		.loc 2 659 0
 4417 02e0 B461D4E1 		ldrh	r6, [r4, #20]
 4418 02e4 B631D4E1 		ldrh	r3, [r4, #22]
 4419 02e8 016086E2 		add	r6, r6, #1
 4420 02ec 066BA0E1 		mov	r6, r6, asl #22
 4421 02f0 033BA0E1 		mov	r3, r3, asl #22
 661:apps/rssi/main.c **** 			if ((freq[a].mask & FREQ_TYPE_SERV))
 4422              		.loc 2 661 0
 4423 02f4 7C299FE5 		ldr	r2, .L521+68
 659:apps/rssi/main.c **** 		for (a = (ul_arfcn + 1) & 1023; a != (arfcn & 1023);
 4424              		.loc 2 659 0
 4425 02f8 266BA0E1 		mov	r6, r6, lsr #22
 4426              	.LVL360:
 4427 02fc 233BA0E1 		mov	r3, r3, lsr #22
 4428              	.LVL361:
 4429              	.L409:
 4430 0300 030056E1 		cmp	r6, r3
 4431 0304 2300000A 		beq	.L417
 661:apps/rssi/main.c **** 			if ((freq[a].mask & FREQ_TYPE_SERV))
 4432              		.loc 2 661 0
 4433 0308 0610D2E7 		ldrb	r1, [r2, r6]	@ zero_extendqisi2
 4434 030c 010011E3 		tst	r1, #1
 4435 0310 2000001A 		bne	.L417
 660:apps/rssi/main.c **** 					a = (a + 1) & 1023) {
 4436              		.loc 2 660 0
 4437 0314 016086E2 		add	r6, r6, #1
 4438              	.LVL362:
 4439 0318 066BA0E1 		mov	r6, r6, asl #22
 4440              	.LVL363:
 4441 031c 266BA0E1 		mov	r6, r6, lsr #22
 4442              	.LVL364:
 4443 0320 F6FFFFEA 		b	.L409
 4444              	.LVL365:
 4445              	.L396:
 4446              	.LBE739:
 4447              	.LBE738:
 829:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 4448              		.loc 2 829 0
 4449 0324 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 4450 0328 010053E3 		cmp	r3, #1
 4451 032c 0200008A 		bhi	.L413
 830:apps/rssi/main.c **** 			inc_dec_arfcn(0);
 4452              		.loc 2 830 0
 4453 0330 0000A0E3 		mov	r0, #0
 4454              	.L514:
 4455 0334 FEFFFFEB 		bl	inc_dec_arfcn
 4456              	.LVL366:
 4457 0338 F30000EA 		b	.L387
 4458              	.L413:
 831:apps/rssi/main.c **** 		else if (mode == MODE_SYNC && cursor < 0)
 4459              		.loc 2 831 0
 4460 033c 030053E3 		cmp	r3, #3
 4461 0340 F100001A 		bne	.L387
 4462 0344 20399FE5 		ldr	r3, .L521+56
 4463 0348 003093E5 		ldr	r3, [r3]
 4464 034c 000053E3 		cmp	r3, #0
 4465 0350 ED0000AA 		bge	.L387
 4466              	.LVL367:
 4467              	.LBB740:
 4468              	.LBB741:
 665:apps/rssi/main.c **** 		for (a = (ul_arfcn - 1) & 1023; a != (arfcn & 1023);
 4469              		.loc 2 665 0
 4470 0354 B461D4E1 		ldrh	r6, [r4, #20]
 4471 0358 B631D4E1 		ldrh	r3, [r4, #22]
 4472 035c 016046E2 		sub	r6, r6, #1
 4473 0360 066BA0E1 		mov	r6, r6, asl #22
 4474 0364 033BA0E1 		mov	r3, r3, asl #22
 4475 0368 266BA0E1 		mov	r6, r6, lsr #22
 4476              	.LVL368:
 4477 036c 233BA0E1 		mov	r3, r3, lsr #22
 667:apps/rssi/main.c **** 			if ((freq[a].mask & FREQ_TYPE_SERV))
 4478              		.loc 2 667 0
 4479 0370 00299FE5 		ldr	r2, .L521+68
 4480 0374 050000EA 		b	.L414
 4481              	.L416:
 4482 0378 0610D2E7 		ldrb	r1, [r2, r6]	@ zero_extendqisi2
 4483 037c 010011E3 		tst	r1, #1
 4484 0380 0400001A 		bne	.L417
 666:apps/rssi/main.c **** 					a = (a - 1) & 1023) {
 4485              		.loc 2 666 0
 4486 0384 016046E2 		sub	r6, r6, #1
 4487              	.LVL369:
 4488 0388 066BA0E1 		mov	r6, r6, asl #22
 4489              	.LVL370:
 4490 038c 266BA0E1 		mov	r6, r6, lsr #22
 4491              	.LVL371:
 4492              	.L414:
 665:apps/rssi/main.c **** 		for (a = (ul_arfcn - 1) & 1023; a != (arfcn & 1023);
 4493              		.loc 2 665 0
 4494 0390 030056E1 		cmp	r6, r3
 4495 0394 F7FFFF1A 		bne	.L416
 4496              	.LVL372:
 4497              	.L417:
 671:apps/rssi/main.c **** 	ul_arfcn = a;
 4498              		.loc 2 671 0
 4499 0398 B461C5E1 		strh	r6, [r5, #20]	@ movhi
 673:apps/rssi/main.c **** 	refresh_display();
 4500              		.loc 2 673 0
 4501 039c FEFFFFEB 		bl	refresh_display
 4502              	.LVL373:
 675:apps/rssi/main.c **** 	request_ul_levels(a);
 4503              		.loc 2 675 0
 4504 03a0 0600A0E1 		mov	r0, r6
 4505 03a4 FEFFFFEB 		bl	request_ul_levels
 4506              	.LVL374:
 4507 03a8 D70000EA 		b	.L387
 4508              	.LVL375:
 4509              	.L392:
 4510              	.LBE741:
 4511              	.LBE740:
 835:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 4512              		.loc 2 835 0
 4513 03ac 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 4514 03b0 010053E3 		cmp	r3, #1
 4515 03b4 0400008A 		bhi	.L418
 4516              	.LBB742:
 4517              	.LBB743:
 682:apps/rssi/main.c **** 	pcs = !pcs;
 4518              		.loc 2 682 0
 4519 03b8 103094E5 		ldr	r3, [r4, #16]
 4520 03bc 013073E2 		rsbs	r3, r3, #1
 4521 03c0 0030A033 		movcc	r3, #0
 4522 03c4 103084E5 		str	r3, [r4, #16]
 4523 03c8 88FFFFEA 		b	.L513
 4524              	.L418:
 4525              	.LBE743:
 4526              	.LBE742:
 837:apps/rssi/main.c **** 		else if (mode == MODE_ARFCN)
 4527              		.loc 2 837 0
 4528 03cc 020053E3 		cmp	r3, #2
 4529 03d0 0200001A 		bne	.L419
 838:apps/rssi/main.c **** 			enter_arfcn(key_code);
 4530              		.loc 2 838 0
 4531 03d4 0D00A0E3 		mov	r0, #13
 4532              	.L511:
 4533 03d8 FEFFFFEB 		bl	enter_arfcn
 4534              	.LVL376:
 4535 03dc CA0000EA 		b	.L387
 4536              	.L419:
 839:apps/rssi/main.c **** 		else if (mode == MODE_SYNC)
 4537              		.loc 2 839 0
 4538 03e0 030053E3 		cmp	r3, #3
 4539 03e4 0600001A 		bne	.L420
 4540              	.L427:
 4541              	.LBB744:
 4542              	.LBB745:
1039:apps/rssi/main.c **** 	l1s_reset();
 4543              		.loc 2 1039 0
 4544 03e8 FEFFFFEB 		bl	l1s_reset
 4545              	.LVL377:
1040:apps/rssi/main.c **** 	l1s_reset_hw();
 4546              		.loc 2 1040 0
 4547 03ec FEFFFFEB 		bl	l1s_reset_hw
 4548              	.LVL378:
1041:apps/rssi/main.c **** 	pm_count = 0;
 4549              		.loc 2 1041 0
 4550 03f0 0030A0E3 		mov	r3, #0
 4551 03f4 203085E5 		str	r3, [r5, #32]
1042:apps/rssi/main.c **** 	pm_mode = PM_IDLE;
 4552              		.loc 2 1042 0
 4553 03f8 1C30C5E5 		strb	r3, [r5, #28]
1043:apps/rssi/main.c **** 	mode = MODE_MAIN;
 4554              		.loc 2 1043 0
 4555 03fc 0430C5E5 		strb	r3, [r5, #4]
 4556 0400 C10000EA 		b	.L387
 4557              	.L420:
 4558              	.LBE745:
 4559              	.LBE744:
 841:apps/rssi/main.c **** 		else if (mode == MODE_RACH)
 4560              		.loc 2 841 0
 4561 0404 040053E3 		cmp	r3, #4
 4562 0408 BF00001A 		bne	.L387
 4563              	.L428:
 842:apps/rssi/main.c **** 			exit_rach();
 4564              		.loc 2 842 0
 4565 040c FEFFFFEB 		bl	exit_rach
 4566              	.LVL379:
 4567 0410 BD0000EA 		b	.L387
 4568              	.L393:
 845:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 4569              		.loc 2 845 0
 4570 0414 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 4571 0418 010053E3 		cmp	r3, #1
 4572 041c 0100008A 		bhi	.L421
 4573              	.L423:
 846:apps/rssi/main.c **** 			toggle_up_down();
 4574              		.loc 2 846 0
 4575 0420 FEFFFFEB 		bl	toggle_up_down
 4576              	.LVL380:
 4577 0424 B80000EA 		b	.L387
 4578              	.L421:
 847:apps/rssi/main.c **** 		else if (mode == MODE_ARFCN)
 4579              		.loc 2 847 0
 4580 0428 020053E3 		cmp	r3, #2
 848:apps/rssi/main.c **** 			enter_arfcn(key_code);
 4581              		.loc 2 848 0
 4582 042c 0E00A003 		moveq	r0, #14
 847:apps/rssi/main.c **** 		else if (mode == MODE_ARFCN)
 4583              		.loc 2 847 0
 4584 0430 E8FFFF0A 		beq	.L511
 849:apps/rssi/main.c **** 		else if (mode == MODE_SYNC && cursor < 0)
 4585              		.loc 2 849 0
 4586 0434 030053E3 		cmp	r3, #3
 4587 0438 B300001A 		bne	.L387
 4588 043c 28389FE5 		ldr	r3, .L521+56
 4589 0440 003093E5 		ldr	r3, [r3]
 4590 0444 000053E3 		cmp	r3, #0
 4591 0448 AF0000AA 		bge	.L387
 4592 044c F3FFFFEA 		b	.L423
 4593              	.L398:
 853:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 4594              		.loc 2 853 0
 4595 0450 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 4596 0454 010053E3 		cmp	r3, #1
 4597 0458 5700008A 		bhi	.L424
 4598              	.LBB746:
 4599              	.LBB747:
 992:apps/rssi/main.c **** 	struct msgb *msg = l1ctl_msgb_alloc(L1CTL_FBSB_REQ);
 4600              		.loc 2 992 0
 4601 045c 0100A0E3 		mov	r0, #1
 4602 0460 FEFFFFEB 		bl	l1ctl_msgb_alloc
 4603              	.LVL381:
 4604 0464 0090A0E1 		mov	r9, r0
 4605              	.LVL382:
 994:apps/rssi/main.c **** 	uint16_t a = arfcn;
 4606              		.loc 2 994 0
 4607 0468 B661D4E1 		ldrh	r6, [r4, #22]
 4608              	.LVL383:
 996:apps/rssi/main.c **** 	l1s_reset();
 4609              		.loc 2 996 0
 4610 046c FEFFFFEB 		bl	l1s_reset
 4611              	.LVL384:
 997:apps/rssi/main.c **** 	l1s_reset_hw();
 4612              		.loc 2 997 0
 4613 0470 FEFFFFEB 		bl	l1s_reset_hw
 4614              	.LVL385:
 998:apps/rssi/main.c **** 	pm_count = 0;
 4615              		.loc 2 998 0
 4616 0474 0030A0E3 		mov	r3, #0
1001:apps/rssi/main.c **** 	req = (struct l1ctl_fbsb_req *) msgb_put(msg, sizeof(*req));
 4617              		.loc 2 1001 0
 4618 0478 0900A0E1 		mov	r0, r9
 4619 047c 0D10A0E3 		mov	r1, #13
 998:apps/rssi/main.c **** 	pm_count = 0;
 4620              		.loc 2 998 0
 4621 0480 203084E5 		str	r3, [r4, #32]
 999:apps/rssi/main.c **** 	pm_mode = PM_IDLE;
 4622              		.loc 2 999 0
 4623 0484 1C30C4E5 		strb	r3, [r4, #28]
1001:apps/rssi/main.c **** 	req = (struct l1ctl_fbsb_req *) msgb_put(msg, sizeof(*req));
 4624              		.loc 2 1001 0
 4625 0488 FEFFFFEB 		bl	msgb_put
 4626              	.LVL386:
1002:apps/rssi/main.c **** 	if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 4627              		.loc 2 1002 0
 4628 048c 102094E5 		ldr	r2, [r4, #16]
 4629 0490 000052E3 		cmp	r2, #0
 4630 0494 0500000A 		beq	.L425
 4631 0498 B611D4E1 		ldrh	r1, [r4, #22]
 4632 049c D8279FE5 		ldr	r2, .L521+72
 4633 04a0 021C41E2 		sub	r1, r1, #512
 4634 04a4 0118A0E1 		mov	r1, r1, asl #16
 4635 04a8 210852E1 		cmp	r2, r1, lsr #16
1003:apps/rssi/main.c **** 		a |= ARFCN_PCS;
 4636              		.loc 2 1003 0
 4637 04ac 02698623 		orrcs	r6, r6, #32768
 4638              	.LVL387:
 4639              	.L425:
 4640              	.LBB748:
 4641              	.LBB749:
 4642              		.loc 4 51 0
 4643 04b0 2624A0E1 		mov	r2, r6, lsr #8
 4644 04b4 062482E1 		orr	r2, r2, r6, asl #8
 4645              	.LBE749:
 4646              	.LBE748:
1004:apps/rssi/main.c **** 	req->band_arfcn = htons(a);
 4647              		.loc 2 1004 0
 4648 04b8 0020C0E5 		strb	r2, [r0]
 4649 04bc 2224A0E1 		mov	r2, r2, lsr #8
 4650 04c0 0120C0E5 		strb	r2, [r0, #1]
1005:apps/rssi/main.c **** 	req->timeout = htons(100);
 4651              		.loc 2 1005 0
 4652 04c4 6420A0E3 		mov	r2, #100
 4653 04c8 0320C0E5 		strb	r2, [r0, #3]
1007:apps/rssi/main.c **** 	req->freq_err_thresh1 = htons(11000 - 1000);
 4654              		.loc 2 1007 0
 4655 04cc 2720A0E3 		mov	r2, #39
 4656 04d0 0420C0E5 		strb	r2, [r0, #4]
 4657 04d4 1020A0E3 		mov	r2, #16
 4658 04d8 0520C0E5 		strb	r2, [r0, #5]
1009:apps/rssi/main.c **** 	req->freq_err_thresh2 = htons(1000 - 200);
 4659              		.loc 2 1009 0
 4660 04dc 2020A0E3 		mov	r2, #32
1004:apps/rssi/main.c **** 	req->band_arfcn = htons(a);
 4661              		.loc 2 1004 0
 4662 04e0 0060A0E3 		mov	r6, #0
 4663              	.LVL388:
1009:apps/rssi/main.c **** 	req->freq_err_thresh2 = htons(1000 - 200);
 4664              		.loc 2 1009 0
 4665 04e4 03A0A0E3 		mov	r10, #3
 4666 04e8 0720C0E5 		strb	r2, [r0, #7]
1012:apps/rssi/main.c **** 	req->flags = L1CTL_FBSB_F_FB01SB;
 4667              		.loc 2 1012 0
 4668 04ec 0720A0E3 		mov	r2, #7
 4669 04f0 0920C0E5 		strb	r2, [r0, #9]
1005:apps/rssi/main.c **** 	req->timeout = htons(100);
 4670              		.loc 2 1005 0
 4671 04f4 0260C0E5 		strb	r6, [r0, #2]
1009:apps/rssi/main.c **** 	req->freq_err_thresh2 = htons(1000 - 200);
 4672              		.loc 2 1009 0
 4673 04f8 06A0C0E5 		strb	r10, [r0, #6]
1011:apps/rssi/main.c **** 	req->num_freqerr_avg = 3;
 4674              		.loc 2 1011 0
 4675 04fc 08A0C0E5 		strb	r10, [r0, #8]
1013:apps/rssi/main.c **** 	req->sync_info_idx = 0;
 4676              		.loc 2 1013 0
 4677 0500 0A60C0E5 		strb	r6, [r0, #10]
1014:apps/rssi/main.c **** 	req->ccch_mode = CCCH_MODE_NONE;
 4678              		.loc 2 1014 0
 4679 0504 0B60C0E5 		strb	r6, [r0, #11]
1015:apps/rssi/main.c **** 	l1a_l23_rx(SC_DLCI_L1A_L23, msg);
 4680              		.loc 2 1015 0
 4681 0508 0910A0E1 		mov	r1, r9
 4682 050c 0500A0E3 		mov	r0, #5
 4683              	.LVL389:
 4684 0510 FEFFFFEB 		bl	l1a_l23_rx
 4685              	.LVL390:
1018:apps/rssi/main.c **** 	memset(ul_levels, 0, sizeof(ul_levels));
 4686              		.loc 2 1018 0
 4687 0514 0610A0E1 		mov	r1, r6
 4688 0518 0820A0E3 		mov	r2, #8
 4689 051c 5C079FE5 		ldr	r0, .L521+76
1017:apps/rssi/main.c **** 	mode = MODE_SYNC;
 4690              		.loc 2 1017 0
 4691 0520 04A0C5E5 		strb	r10, [r5, #4]
1018:apps/rssi/main.c **** 	memset(ul_levels, 0, sizeof(ul_levels));
 4692              		.loc 2 1018 0
 4693 0524 FEFFFFEB 		bl	memset
 4694              	.LVL391:
1020:apps/rssi/main.c **** 	ul_new = 0;
 4695              		.loc 2 1020 0
 4696 0528 54379FE5 		ldr	r3, .L521+80
 4697 052c B060C3E1 		strh	r6, [r3]	@ movhi
1021:apps/rssi/main.c **** 	ul_arfcn = arfcn;
 4698              		.loc 2 1021 0
 4699 0530 B631D5E1 		ldrh	r3, [r5, #22]
 4700 0534 B431C5E1 		strh	r3, [r5, #20]	@ movhi
1022:apps/rssi/main.c **** 	si_1[2] = 0;
 4701              		.loc 2 1022 0
 4702 0538 48379FE5 		ldr	r3, .L521+84
 4703 053c 0260C3E5 		strb	r6, [r3, #2]
1023:apps/rssi/main.c **** 	si_2[2] = 0;
 4704              		.loc 2 1023 0
 4705 0540 44379FE5 		ldr	r3, .L521+88
 4706 0544 0260C3E5 		strb	r6, [r3, #2]
1024:apps/rssi/main.c **** 	si_2bis[2] = 0;
 4707              		.loc 2 1024 0
 4708 0548 40379FE5 		ldr	r3, .L521+92
 4709 054c 0260C3E5 		strb	r6, [r3, #2]
1025:apps/rssi/main.c **** 	si_2ter[2] = 0;
 4710              		.loc 2 1025 0
 4711 0550 3C379FE5 		ldr	r3, .L521+96
 4712 0554 0260C3E5 		strb	r6, [r3, #2]
1026:apps/rssi/main.c **** 	si_3[2] = 0;
 4713              		.loc 2 1026 0
 4714 0558 38379FE5 		ldr	r3, .L521+100
 4715 055c 0260C3E5 		strb	r6, [r3, #2]
1027:apps/rssi/main.c **** 	si_4[2] = 0;
 4716              		.loc 2 1027 0
 4717 0560 34379FE5 		ldr	r3, .L521+104
 4718 0564 0260C3E5 		strb	r6, [r3, #2]
1028:apps/rssi/main.c **** 	mcc = mnc = lac = 0;
 4719              		.loc 2 1028 0
 4720 0568 30379FE5 		ldr	r3, .L521+108
 4721 056c B060C3E1 		strh	r6, [r3]	@ movhi
 4722 0570 2C379FE5 		ldr	r3, .L521+112
 4723 0574 B060C3E1 		strh	r6, [r3]	@ movhi
 4724 0578 28379FE5 		ldr	r3, .L521+116
 4725 057c B060C3E1 		strh	r6, [r3]	@ movhi
1029:apps/rssi/main.c **** 	ccch_conf = -1;
 4726              		.loc 2 1029 0
 4727 0580 24379FE5 		ldr	r3, .L521+120
 4728 0584 0020E0E3 		mvn	r2, #0
 4729 0588 002083E5 		str	r2, [r3]
1030:apps/rssi/main.c **** 	memset(freq, 0, sizeof(freq));
 4730              		.loc 2 1030 0
 4731 058c E4069FE5 		ldr	r0, .L521+68
 4732 0590 0610A0E1 		mov	r1, r6
 4733 0594 012BA0E3 		mov	r2, #1024
1019:apps/rssi/main.c **** 	si_new = 0;
 4734              		.loc 2 1019 0
 4735 0598 B862C5E1 		strh	r6, [r5, #40]	@ movhi
1030:apps/rssi/main.c **** 	memset(freq, 0, sizeof(freq));
 4736              		.loc 2 1030 0
 4737 059c FEFFFFEB 		bl	memset
 4738              	.LVL392:
1031:apps/rssi/main.c **** 	cursor = 0;
 4739              		.loc 2 1031 0
 4740 05a0 C4369FE5 		ldr	r3, .L521+56
 4741 05a4 006083E5 		str	r6, [r3]
1032:apps/rssi/main.c **** 	nb_num = 0;
 4742              		.loc 2 1032 0
 4743 05a8 C4369FE5 		ldr	r3, .L521+64
 4744 05ac 006083E5 		str	r6, [r3]
1033:apps/rssi/main.c **** 	sync_msg = "trying";
 4745              		.loc 2 1033 0
 4746 05b0 F8369FE5 		ldr	r3, .L521+124
 4747 05b4 003087E5 		str	r3, [r7]
 4748 05b8 0CFFFFEA 		b	.L513
 4749              	.LVL393:
 4750              	.L424:
 4751              	.LBE747:
 4752              	.LBE746:
 855:apps/rssi/main.c **** 		else if (mode == MODE_SYNC || mode == MODE_RACH)
 4753              		.loc 2 855 0
 4754 05bc 033043E2 		sub	r3, r3, #3
 4755 05c0 FF3003E2 		and	r3, r3, #255
 4756 05c4 010053E3 		cmp	r3, #1
 4757 05c8 4F00008A 		bhi	.L387
 4758              	.LBB750:
 4759              	.LBB751:
1190:apps/rssi/main.c **** 	if (ccch_conf < 0)
 4760              		.loc 2 1190 0
 4761 05cc D8B69FE5 		ldr	fp, .L521+120
 4762 05d0 00309BE5 		ldr	r3, [fp]
 4763 05d4 000053E3 		cmp	r3, #0
 4764 05d8 4B0000BA 		blt	.L387
1193:apps/rssi/main.c **** 	if (rach)
 4765              		.loc 2 1193 0
 4766 05dc 006094E5 		ldr	r6, [r4]
 4767 05e0 000056E3 		cmp	r6, #0
 4768 05e4 4800001A 		bne	.L387
1201:apps/rssi/main.c **** 	struct msgb *msg1 = l1ctl_msgb_alloc(L1CTL_NEIGH_PM_REQ);
 4769              		.loc 2 1201 0
 4770 05e8 1A00A0E3 		mov	r0, #26
 4771 05ec FEFFFFEB 		bl	l1ctl_msgb_alloc
 4772              	.LVL394:
 4773 05f0 00A0A0E1 		mov	r10, r0
 4774              	.LVL395:
1202:apps/rssi/main.c **** 	struct msgb *msg2 = l1ctl_msgb_alloc(L1CTL_RACH_REQ);
 4775              		.loc 2 1202 0
 4776 05f4 0400A0E3 		mov	r0, #4
 4777              	.LVL396:
 4778 05f8 FEFFFFEB 		bl	l1ctl_msgb_alloc
 4779              	.LVL397:
1203:apps/rssi/main.c **** 	struct l1ctl_neigh_pm_req *pm_req = (struct l1ctl_neigh_pm_req *)
 4780              		.loc 2 1203 0
 4781 05fc C210A0E3 		mov	r1, #194
1202:apps/rssi/main.c **** 	struct msgb *msg2 = l1ctl_msgb_alloc(L1CTL_RACH_REQ);
 4782              		.loc 2 1202 0
 4783 0600 0090A0E1 		mov	r9, r0
 4784              	.LVL398:
1203:apps/rssi/main.c **** 	struct l1ctl_neigh_pm_req *pm_req = (struct l1ctl_neigh_pm_req *)
 4785              		.loc 2 1203 0
 4786 0604 0A00A0E1 		mov	r0, r10
 4787              	.LVL399:
 4788 0608 FEFFFFEB 		bl	msgb_put
 4789              	.LVL400:
1205:apps/rssi/main.c **** 	struct l1ctl_info_ul *ul = (struct l1ctl_info_ul *)
 4790              		.loc 2 1205 0
 4791 060c 0410A0E3 		mov	r1, #4
1203:apps/rssi/main.c **** 	struct l1ctl_neigh_pm_req *pm_req = (struct l1ctl_neigh_pm_req *)
 4792              		.loc 2 1203 0
 4793 0610 0020A0E1 		mov	r2, r0
 4794              	.LVL401:
1205:apps/rssi/main.c **** 	struct l1ctl_info_ul *ul = (struct l1ctl_info_ul *)
 4795              		.loc 2 1205 0
 4796 0614 0900A0E1 		mov	r0, r9
 4797              	.LVL402:
 4798 0618 0C208DE5 		str	r2, [sp, #12]
 4799 061c FEFFFFEB 		bl	msgb_put
 4800              	.LVL403:
1207:apps/rssi/main.c **** 	struct l1ctl_rach_req *rach_req = (struct l1ctl_rach_req *)
 4801              		.loc 2 1207 0
 4802 0620 0410A0E3 		mov	r1, #4
 4803 0624 0900A0E1 		mov	r0, r9
 4804 0628 FEFFFFEB 		bl	msgb_put
 4805              	.LVL404:
1210:apps/rssi/main.c **** 	l1s.tx_power = 0;
 4806              		.loc 2 1210 0
 4807 062c 80169FE5 		ldr	r1, .L521+128
 4808 0630 496AC1E5 		strb	r6, [r1, #2633]
1212:apps/rssi/main.c **** 	pm_req->n = 0; /* disable */
 4809              		.loc 2 1212 0
 4810 0634 0C209DE5 		ldr	r2, [sp, #12]
 4811 0638 0060C2E5 		strb	r6, [r2]
1214:apps/rssi/main.c **** 	rach_ra = 0x00;
 4812              		.loc 2 1214 0
 4813 063c 74269FE5 		ldr	r2, .L521+132
 4814 0640 0060C2E5 		strb	r6, [r2]
1215:apps/rssi/main.c **** 	rach_req->ra = rach_ra;
 4815              		.loc 2 1215 0
 4816 0644 0060C0E5 		strb	r6, [r0]
1217:apps/rssi/main.c **** 	rach_req->combined = (ccch_conf == 1);
 4817              		.loc 2 1217 0
 4818 0648 00209BE5 		ldr	r2, [fp]
 4819 064c 011052E2 		subs	r1, r2, #1
 4820 0650 002071E2 		rsbs	r2, r1, #0
 4821 0654 0120B2E0 		adcs	r2, r2, r1
 4822 0658 0120C0E5 		strb	r2, [r0, #1]
1216:apps/rssi/main.c **** 	rach_req->offset = 0;
 4823              		.loc 2 1216 0
 4824 065c 0260C0E5 		strb	r6, [r0, #2]
 4825 0660 0360C0E5 		strb	r6, [r0, #3]
1219:apps/rssi/main.c **** 	l1a_l23_rx(SC_DLCI_L1A_L23, msg1);
 4826              		.loc 2 1219 0
 4827 0664 0A10A0E1 		mov	r1, r10
 4828 0668 0500A0E3 		mov	r0, #5
 4829              	.LVL405:
 4830 066c FEFFFFEB 		bl	l1a_l23_rx
 4831              	.LVL406:
1220:apps/rssi/main.c **** 	l1a_l23_rx(SC_DLCI_L1A_L23, msg2);
 4832              		.loc 2 1220 0
 4833 0670 0500A0E3 		mov	r0, #5
 4834 0674 0910A0E1 		mov	r1, r9
 4835 0678 FEFFFFEB 		bl	l1a_l23_rx
 4836              	.LVL407:
1221:apps/rssi/main.c **** 	rach = 1;
 4837              		.loc 2 1221 0
 4838 067c 0130A0E3 		mov	r3, #1
 4839 0680 003084E5 		str	r3, [r4]
1222:apps/rssi/main.c **** 	rach_when = jiffies;
 4840              		.loc 2 1222 0
 4841 0684 002098E5 		ldr	r2, [r8]
 4842 0688 2C369FE5 		ldr	r3, .L521+136
 4843 068c 002083E5 		str	r2, [r3]
1223:apps/rssi/main.c **** 	assign = ASSIGN_NONE;
 4844              		.loc 2 1223 0
 4845 0690 28369FE5 		ldr	r3, .L521+140
 4846 0694 0060C3E5 		strb	r6, [r3]
1224:apps/rssi/main.c **** 	mode = MODE_RACH;
 4847              		.loc 2 1224 0
 4848 0698 0430A0E3 		mov	r3, #4
 4849 069c 0D0000EA 		b	.L518
 4850              	.LVL408:
 4851              	.L391:
 4852              	.LBE751:
 4853              	.LBE750:
 4854              	.LBB752:
 4855              	.LBB753:
 725:apps/rssi/main.c **** 	max = !max;
 4856              		.loc 2 725 0
 4857 06a0 0C3095E5 		ldr	r3, [r5, #12]
 4858 06a4 013073E2 		rsbs	r3, r3, #1
 4859 06a8 0030A033 		movcc	r3, #0
 4860 06ac 0C3085E5 		str	r3, [r5, #12]
 726:apps/rssi/main.c **** 	max_power = power;
 4861              		.loc 2 726 0
 4862 06b0 0C369FE5 		ldr	r3, .L521+144
 4863 06b4 0020D3E5 		ldrb	r2, [r3]	@ zero_extendqisi2
 4864 06b8 08369FE5 		ldr	r3, .L521+148
 4865 06bc 0020C3E5 		strb	r2, [r3]
 4866 06c0 CAFEFFEA 		b	.L513
 4867              	.L399:
 4868              	.LBE753:
 4869              	.LBE752:
 862:apps/rssi/main.c **** 		if (mode == MODE_ARFCN)
 4870              		.loc 2 862 0
 4871 06c4 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 4872 06c8 020053E3 		cmp	r3, #2
 4873 06cc 0300001A 		bne	.L426
 4874              	.LBB754:
 4875              	.LBB755:
 526:apps/rssi/main.c **** 	mode = last_mode;
 4876              		.loc 2 526 0
 4877 06d0 F4359FE5 		ldr	r3, .L521+152
 4878 06d4 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 4879              	.L518:
 4880 06d8 0430C4E5 		strb	r3, [r4, #4]
 4881 06dc C3FEFFEA 		b	.L513
 4882              	.L426:
 4883              	.LBE755:
 4884              	.LBE754:
 864:apps/rssi/main.c **** 		else if (mode == MODE_SYNC)
 4885              		.loc 2 864 0
 4886 06e0 030053E3 		cmp	r3, #3
 4887 06e4 3FFFFF0A 		beq	.L427
 866:apps/rssi/main.c **** 		else if (mode == MODE_RACH)
 4888              		.loc 2 866 0
 4889 06e8 040053E3 		cmp	r3, #4
 4890 06ec 46FFFF0A 		beq	.L428
 868:apps/rssi/main.c **** 		else if (mode == MODE_SPECTRUM)
 4891              		.loc 2 868 0
 4892 06f0 010053E3 		cmp	r3, #1
 4893 06f4 0400001A 		bne	.L387
 4894              	.L429:
 869:apps/rssi/main.c **** 			toggle_spectrum();
 4895              		.loc 2 869 0
 4896 06f8 FEFFFFEB 		bl	toggle_spectrum
 4897              	.LVL409:
 4898 06fc 020000EA 		b	.L387
 4899              	.L390:
 872:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 4900              		.loc 2 872 0
 4901 0700 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 4902 0704 010053E3 		cmp	r3, #1
 4903 0708 FAFFFF9A 		bls	.L429
 4904              	.L387:
 879:apps/rssi/main.c **** 	key_code = KEY_INV;
 4905              		.loc 2 879 0
 4906 070c 0030E0E3 		mvn	r3, #0
 4907 0710 6830C7E5 		strb	r3, [r7, #104]
 4908              	.L386:
 4909              	.LBE756:
 4910              	.LBE757:
1550:apps/rssi/main.c **** 		handle_key_code();
1551:apps/rssi/main.c **** 		l1a_l23_handler();
 4911              		.loc 2 1551 0 discriminator 1
 4912 0714 FEFFFFEB 		bl	l1a_l23_handler
 4913              	.LVL410:
 4914              	.LBB758:
 4915              	.LBB759:
 911:apps/rssi/main.c **** 	if (pm_mode == PM_IDLE && (mode == MODE_MAIN || mode == MODE_SPECTRUM)) {
 4916              		.loc 2 911 0 discriminator 1
 4917 0718 1C30D5E5 		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 4918 071c 000053E3 		cmp	r3, #0
 4919 0720 4600001A 		bne	.L430
 911:apps/rssi/main.c **** 	if (pm_mode == PM_IDLE && (mode == MODE_MAIN || mode == MODE_SPECTRUM)) {
 4920              		.loc 2 911 0 is_stmt 0
 4921 0724 0430D4E5 		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 4922 0728 010053E3 		cmp	r3, #1
 4923 072c 8400008A 		bhi	.L432
 4924              	.LBB760:
 912:apps/rssi/main.c **** 		struct msgb *msg = l1ctl_msgb_alloc(L1CTL_PM_REQ);
 4925              		.loc 2 912 0 is_stmt 1
 4926 0730 0800A0E3 		mov	r0, #8
 4927 0734 FEFFFFEB 		bl	l1ctl_msgb_alloc
 4928              	.LVL411:
 916:apps/rssi/main.c **** 		pm = (struct l1ctl_pm_req *) msgb_put(msg, sizeof(*pm));
 4929              		.loc 2 916 0
 4930 0738 0810A0E3 		mov	r1, #8
 912:apps/rssi/main.c **** 		struct msgb *msg = l1ctl_msgb_alloc(L1CTL_PM_REQ);
 4931              		.loc 2 912 0
 4932 073c 0060A0E1 		mov	r6, r0
 4933              	.LVL412:
 916:apps/rssi/main.c **** 		pm = (struct l1ctl_pm_req *) msgb_put(msg, sizeof(*pm));
 4934              		.loc 2 916 0
 4935 0740 FEFFFFEB 		bl	msgb_put
 4936              	.LVL413:
 917:apps/rssi/main.c **** 		pm->type = 1;
 4937              		.loc 2 917 0
 4938 0744 0130A0E3 		mov	r3, #1
 4939 0748 0030C0E5 		strb	r3, [r0]
 918:apps/rssi/main.c **** 		if (mode == MODE_MAIN) {
 4940              		.loc 2 918 0
 4941 074c 0430D4E5 		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 4942 0750 000053E3 		cmp	r3, #0
 4943 0754 0F00001A 		bne	.L433
 920:apps/rssi/main.c **** 			if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 4944              		.loc 2 920 0
 4945 0758 102094E5 		ldr	r2, [r4, #16]
 4946 075c 000052E3 		cmp	r2, #0
 919:apps/rssi/main.c **** 			a = arfcn;
 4947              		.loc 2 919 0
 4948 0760 B631D4E1 		ldrh	r3, [r4, #22]
 4949              	.LVL414:
 920:apps/rssi/main.c **** 			if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 4950              		.loc 2 920 0
 4951 0764 0400000A 		beq	.L434
 4952 0768 021C43E2 		sub	r1, r3, #512
 4953 076c 08259FE5 		ldr	r2, .L521+72
 4954 0770 0118A0E1 		mov	r1, r1, asl #16
 4955 0774 210852E1 		cmp	r2, r1, lsr #16
 921:apps/rssi/main.c **** 				a |= ARFCN_PCS;
 4956              		.loc 2 921 0
 4957 0778 02398323 		orrcs	r3, r3, #32768
 4958              	.LVL415:
 4959              	.L434:
 922:apps/rssi/main.c **** 			if (uplink)
 4960              		.loc 2 922 0
 4961 077c 082095E5 		ldr	r2, [r5, #8]
 4962 0780 000052E3 		cmp	r2, #0
 923:apps/rssi/main.c **** 				a |= ARFCN_UPLINK;
 4963              		.loc 2 923 0
 4964 0784 01398313 		orrne	r3, r3, #16384
 4965              	.LVL416:
 925:apps/rssi/main.c **** 			pm_mode = PM_SENT;
 4966              		.loc 2 925 0
 4967 0788 0120A0E3 		mov	r2, #1
 4968 078c 1C20C5E5 		strb	r2, [r5, #28]
 924:apps/rssi/main.c **** 			e = a;
 4969              		.loc 2 924 0
 4970 0790 0320A0E1 		mov	r2, r3
 4971 0794 150000EA 		b	.L436
 4972              	.LVL417:
 4973              	.L433:
 927:apps/rssi/main.c **** 		if (mode == MODE_SPECTRUM) {
 4974              		.loc 2 927 0
 4975 0798 010053E3 		cmp	r3, #1
 4976 079c 0020A013 		movne	r2, #0
 4977 07a0 0230A011 		movne	r3, r2
 4978 07a4 1100001A 		bne	.L436
 928:apps/rssi/main.c **** 			if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX) {
 4979              		.loc 2 928 0
 4980 07a8 103094E5 		ldr	r3, [r4, #16]
 4981 07ac 000053E3 		cmp	r3, #0
 4982 07b0 0500000A 		beq	.L437
 4983 07b4 B621D4E1 		ldrh	r2, [r4, #22]
 4984 07b8 BC349FE5 		ldr	r3, .L521+72
 4985 07bc 022C42E2 		sub	r2, r2, #512
 4986 07c0 0228A0E1 		mov	r2, r2, asl #16
 4987 07c4 220853E1 		cmp	r3, r2, lsr #16
 4988 07c8 0400002A 		bcs	.L473
 4989              	.L437:
 932:apps/rssi/main.c **** 				a = band->min;
 4990              		.loc 2 932 0
 4991 07cc FC349FE5 		ldr	r3, .L521+156
 4992 07d0 002093E5 		ldr	r2, [r3]
 4993 07d4 B030D2E1 		ldrh	r3, [r2]
 4994              	.LVL418:
 933:apps/rssi/main.c **** 				e = band->max;
 4995              		.loc 2 933 0
 4996 07d8 B420D2E1 		ldrh	r2, [r2, #4]
 4997              	.LVL419:
 4998 07dc 010000EA 		b	.L438
 4999              	.LVL420:
 5000              	.L473:
 930:apps/rssi/main.c **** 				e = PCS_MAX | ARFCN_PCS;
 5001              		.loc 2 930 0
 5002 07e0 EC249FE5 		ldr	r2, .L521+160
 929:apps/rssi/main.c **** 				a = PCS_MIN | ARFCN_PCS;
 5003              		.loc 2 929 0
 5004 07e4 823CA0E3 		mov	r3, #33280
 5005              	.L438:
 5006              	.LVL421:
 935:apps/rssi/main.c **** 			pm_mode = PM_RANGE_SENT;
 5007              		.loc 2 935 0
 5008 07e8 0210A0E3 		mov	r1, #2
 5009 07ec 1C10C5E5 		strb	r1, [r5, #28]
 5010              	.LVL422:
 5011              	.L436:
 937:apps/rssi/main.c **** 		if (uplink) {
 5012              		.loc 2 937 0
 5013 07f0 081095E5 		ldr	r1, [r5, #8]
 5014 07f4 000051E3 		cmp	r1, #0
 938:apps/rssi/main.c **** 			a |= ARFCN_UPLINK;
 5015              		.loc 2 938 0
 5016 07f8 01398313 		orrne	r3, r3, #16384
 5017              	.LVL423:
 939:apps/rssi/main.c **** 			e |= ARFCN_UPLINK;
 5018              		.loc 2 939 0
 5019 07fc 01298213 		orrne	r2, r2, #16384
 5020              	.LVL424:
 5021              	.LBB761:
 5022              	.LBB762:
 5023              		.loc 4 51 0
 5024 0800 2314A0E1 		mov	r1, r3, lsr #8
 5025              	.LBE762:
 5026              	.LBE761:
 939:apps/rssi/main.c **** 			e |= ARFCN_UPLINK;
 5027              		.loc 2 939 0
 5028 0804 0228A011 		movne	r2, r2, asl #16
 5029              	.LBB764:
 5030              	.LBB763:
 5031              		.loc 4 51 0
 5032 0808 033481E1 		orr	r3, r1, r3, asl #8
 5033              	.LVL425:
 5034              	.LBE763:
 5035              	.LBE764:
 939:apps/rssi/main.c **** 			e |= ARFCN_UPLINK;
 5036              		.loc 2 939 0
 5037 080c 2228A011 		movne	r2, r2, lsr #16
 5038              	.LVL426:
 941:apps/rssi/main.c **** 		pm->range.band_arfcn_from = htons(a);
 5039              		.loc 2 941 0
 5040 0810 0430C0E5 		strb	r3, [r0, #4]
 5041 0814 2334A0E1 		mov	r3, r3, lsr #8
 5042 0818 0530C0E5 		strb	r3, [r0, #5]
 5043              	.LVL427:
 5044              	.LBB765:
 5045              	.LBB766:
 5046              		.loc 4 51 0
 5047 081c 2234A0E1 		mov	r3, r2, lsr #8
 5048 0820 022483E1 		orr	r2, r3, r2, asl #8
 5049              	.LVL428:
 5050              	.LBE766:
 5051              	.LBE765:
 942:apps/rssi/main.c **** 		pm->range.band_arfcn_to = htons(e);
 5052              		.loc 2 942 0
 5053 0824 0620C0E5 		strb	r2, [r0, #6]
 5054 0828 2224A0E1 		mov	r2, r2, lsr #8
 5055 082c 0720C0E5 		strb	r2, [r0, #7]
 944:apps/rssi/main.c **** 		l1a_l23_rx(SC_DLCI_L1A_L23, msg);
 5056              		.loc 2 944 0
 5057 0830 0610A0E1 		mov	r1, r6
 5058 0834 0500A0E3 		mov	r0, #5
 5059              	.LVL429:
 5060 0838 FEFFFFEB 		bl	l1a_l23_rx
 5061              	.LVL430:
 5062 083c 400000EA 		b	.L432
 5063              	.LVL431:
 5064              	.L430:
 5065              	.LBE760:
 949:apps/rssi/main.c **** 	if (pm_mode == PM_RESULT) {
 5066              		.loc 2 949 0
 5067 0840 040053E3 		cmp	r3, #4
 5068 0844 3000001A 		bne	.L440
 951:apps/rssi/main.c **** 		if (pm_count == pm_max) {
 5069              		.loc 2 951 0
 5070 0848 201094E5 		ldr	r1, [r4, #32]
 5071 084c 702097E5 		ldr	r2, [r7, #112]
 950:apps/rssi/main.c **** 		pm_mode = PM_IDLE;
 5072              		.loc 2 950 0
 5073 0850 0030A0E3 		mov	r3, #0
 951:apps/rssi/main.c **** 		if (pm_count == pm_max) {
 5074              		.loc 2 951 0
 5075 0854 020051E1 		cmp	r1, r2
 950:apps/rssi/main.c **** 		pm_mode = PM_IDLE;
 5076              		.loc 2 950 0
 5077 0858 1C30C4E5 		strb	r3, [r4, #28]
 951:apps/rssi/main.c **** 		if (pm_count == pm_max) {
 5078              		.loc 2 951 0
 5079 085c 3800001A 		bne	.L432
 5080              	.LVL432:
 5081              	.LBB767:
 955:apps/rssi/main.c **** 			if (uplink) {
 5082              		.loc 2 955 0
 5083 0860 086094E5 		ldr	r6, [r4, #8]
 5084 0864 030056E1 		cmp	r6, r3
 5085 0868 0600A001 		moveq	r0, r6
 5086 086c 0630A001 		moveq	r3, r6
 964:apps/rssi/main.c **** 					sum += pm_meas[i];
 5087              		.loc 2 964 0
 5088 0870 60249F05 		ldreq	r2, .L521+164
 5089 0874 0B00000A 		beq	.L443
 5090              	.L442:
 958:apps/rssi/main.c **** 					if (pm_meas[i] > sum)
 5091              		.loc 2 958 0
 5092 0878 58049FE5 		ldr	r0, .L521+164
 955:apps/rssi/main.c **** 			if (uplink) {
 5093              		.loc 2 955 0
 5094 087c 0320A0E1 		mov	r2, r3
 5095              	.LVL433:
 5096              	.L444:
 957:apps/rssi/main.c **** 				for (i = 0; i < pm_count; i++) {
 5097              		.loc 2 957 0
 5098 0880 010052E1 		cmp	r2, r1
 5099 0884 040000AA 		bge	.L519
 958:apps/rssi/main.c **** 					if (pm_meas[i] > sum)
 5100              		.loc 2 958 0
 5101 0888 02C190E7 		ldr	ip, [r0, r2, asl #2]
 957:apps/rssi/main.c **** 				for (i = 0; i < pm_count; i++) {
 5102              		.loc 2 957 0
 5103 088c 012082E2 		add	r2, r2, #1
 5104              	.LVL434:
 5105 0890 0C0053E1 		cmp	r3, ip
 5106 0894 0C30A0B1 		movlt	r3, ip
 5107              	.LVL435:
 5108 0898 F8FFFFEA 		b	.L444
 5109              	.L519:
 961:apps/rssi/main.c **** 				power = sum;
 5110              		.loc 2 961 0
 5111 089c 20249FE5 		ldr	r2, .L521+144
 5112              	.LVL436:
 5113 08a0 0030C2E5 		strb	r3, [r2]
 5114 08a4 070000EA 		b	.L446
 5115              	.LVL437:
 5116              	.L443:
 963:apps/rssi/main.c **** 				for (i = 0; i < pm_count; i++)
 5117              		.loc 2 963 0
 5118 08a8 010053E1 		cmp	r3, r1
 964:apps/rssi/main.c **** 					sum += pm_meas[i];
 5119              		.loc 2 964 0
 5120 08ac 03C192B7 		ldrlt	ip, [r2, r3, asl #2]
 963:apps/rssi/main.c **** 				for (i = 0; i < pm_count; i++)
 5121              		.loc 2 963 0
 5122 08b0 013083B2 		addlt	r3, r3, #1
 5123              	.LVL438:
 964:apps/rssi/main.c **** 					sum += pm_meas[i];
 5124              		.loc 2 964 0
 5125 08b4 0C0080B0 		addlt	r0, r0, ip
 5126              	.LVL439:
 5127 08b8 FAFFFFBA 		blt	.L443
 5128              	.L520:
 965:apps/rssi/main.c **** 				power = sum / pm_count;
 5129              		.loc 2 965 0
 5130 08bc FEFFFFEB 		bl	__aeabi_idiv
 5131              	.LVL440:
 5132 08c0 FC339FE5 		ldr	r3, .L521+144
 5133 08c4 0000C3E5 		strb	r0, [r3]
 5134              	.L446:
 967:apps/rssi/main.c **** 			if (power > max_power)
 5135              		.loc 2 967 0
 5136 08c8 F4339FE5 		ldr	r3, .L521+144
 5137 08cc 0020D3E5 		ldrb	r2, [r3]	@ zero_extendqisi2
 5138 08d0 F0339FE5 		ldr	r3, .L521+148
 5139 08d4 0010D3E5 		ldrb	r1, [r3]	@ zero_extendqisi2
 5140 08d8 020051E1 		cmp	r1, r2
 968:apps/rssi/main.c **** 				max_power = power;
 5141              		.loc 2 968 0
 5142 08dc 0020C335 		strccb	r2, [r3]
 969:apps/rssi/main.c **** 			pm_count = 0;
 5143              		.loc 2 969 0
 5144 08e0 0030A0E3 		mov	r3, #0
 970:apps/rssi/main.c **** 			pm_max = (uplink) ? NUM_PM_UL : NUM_PM_DL;
 5145              		.loc 2 970 0
 5146 08e4 030056E1 		cmp	r6, r3
 969:apps/rssi/main.c **** 			pm_count = 0;
 5147              		.loc 2 969 0
 5148 08e8 203085E5 		str	r3, [r5, #32]
 971:apps/rssi/main.c **** 			if (!tone_on)
 5149              		.loc 2 971 0
 5150 08ec 303095E5 		ldr	r3, [r5, #48]
 970:apps/rssi/main.c **** 			pm_max = (uplink) ? NUM_PM_UL : NUM_PM_DL;
 5151              		.loc 2 970 0
 5152 08f0 0260A003 		moveq	r6, #2
 5153 08f4 0A60A013 		movne	r6, #10
 971:apps/rssi/main.c **** 			if (!tone_on)
 5154              		.loc 2 971 0
 5155 08f8 000053E3 		cmp	r3, #0
 970:apps/rssi/main.c **** 			pm_max = (uplink) ? NUM_PM_UL : NUM_PM_DL;
 5156              		.loc 2 970 0
 5157 08fc 706087E5 		str	r6, [r7, #112]
 971:apps/rssi/main.c **** 			if (!tone_on)
 5158              		.loc 2 971 0
 5159 0900 0F00001A 		bne	.L432
 972:apps/rssi/main.c **** 				refresh_display();
 5160              		.loc 2 972 0
 5161 0904 FEFFFFEB 		bl	refresh_display
 5162              	.LVL441:
 5163 0908 0D0000EA 		b	.L432
 5164              	.L440:
 5165              	.LBE767:
 977:apps/rssi/main.c **** 	if (pm_mode == PM_RANGE_RESULT) {
 5166              		.loc 2 977 0
 5167 090c 030053E3 		cmp	r3, #3
 5168 0910 0B00001A 		bne	.L432
 978:apps/rssi/main.c **** 		pm_mode = PM_IDLE;
 5169              		.loc 2 978 0
 5170 0914 0030A0E3 		mov	r3, #0
 5171 0918 1C30C4E5 		strb	r3, [r4, #28]
 979:apps/rssi/main.c **** 		refresh_display();
 5172              		.loc 2 979 0
 5173 091c FEFFFFEB 		bl	refresh_display
 5174              	.LVL442:
 980:apps/rssi/main.c **** 		buzzer_volume(tone);
 5175              		.loc 2 980 0
 5176 0920 1800D4E5 		ldrb	r0, [r4, #24]	@ zero_extendqisi2
 5177 0924 FEFFFFEB 		bl	buzzer_volume
 5178              	.LVL443:
 981:apps/rssi/main.c **** 		buzzer_note(NOTE(NOTE_C, OCTAVE_5));
 5179              		.loc 2 981 0
 5180 0928 1000A0E3 		mov	r0, #16
 5181 092c FEFFFFEB 		bl	buzzer_note
 5182              	.LVL444:
 982:apps/rssi/main.c **** 		tone_time = jiffies;
 5183              		.loc 2 982 0
 5184 0930 A4339FE5 		ldr	r3, .L521+168
 5185 0934 002098E5 		ldr	r2, [r8]
 5186 0938 002083E5 		str	r2, [r3]
 983:apps/rssi/main.c **** 		tone_on = 1;
 5187              		.loc 2 983 0
 5188 093c 0130A0E3 		mov	r3, #1
 5189 0940 303084E5 		str	r3, [r4, #48]
 5190              	.L432:
 5191              	.LBE759:
 5192              	.LBE758:
 5193              	.LBB768:
 5194              	.LBB769:
1088:apps/rssi/main.c **** 	if (mode != MODE_SYNC)
 5195              		.loc 2 1088 0
 5196 0944 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 5197 0948 030053E3 		cmp	r3, #3
 5198 094c 88939FE5 		ldr	r9, .L521+168
 5199 0950 7E00001A 		bne	.L451
1092:apps/rssi/main.c **** 	if (sync_result) {
 5200              		.loc 2 1092 0
 5201 0954 243094E5 		ldr	r3, [r4, #36]
 5202 0958 000053E3 		cmp	r3, #0
 5203 095c 0B00000A 		beq	.L452
 5204              	.LBB770:
1095:apps/rssi/main.c **** 		sync_msg = sync_result;
 5205              		.loc 2 1095 0
 5206 0960 003087E5 		str	r3, [r7]
1096:apps/rssi/main.c **** 		sync_result = NULL;
 5207              		.loc 2 1096 0
 5208 0964 0030A0E3 		mov	r3, #0
 5209 0968 243084E5 		str	r3, [r4, #36]
1093:apps/rssi/main.c **** 		uint16_t a = ul_arfcn;
 5210              		.loc 2 1093 0
 5211 096c B461D4E1 		ldrh	r6, [r4, #20]
 5212              	.LVL445:
1097:apps/rssi/main.c **** 		refresh_display();
 5213              		.loc 2 1097 0
 5214 0970 FEFFFFEB 		bl	refresh_display
 5215              	.LVL446:
1099:apps/rssi/main.c **** 		if (sync_msg[0] != 'o')
 5216              		.loc 2 1099 0
 5217 0974 003097E5 		ldr	r3, [r7]
 5218 0978 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 5219 097c 6F0053E3 		cmp	r3, #111
 5220 0980 7200001A 		bne	.L451
1102:apps/rssi/main.c **** 		request_ul_levels(a);
 5221              		.loc 2 1102 0
 5222 0984 0600A0E1 		mov	r0, r6
 5223 0988 FEFFFFEB 		bl	request_ul_levels
 5224              	.LVL447:
 5225 098c 6F0000EA 		b	.L451
 5226              	.LVL448:
 5227              	.L452:
 5228              	.LBE770:
1107:apps/rssi/main.c **** 	if (tone_on)
 5229              		.loc 2 1107 0
 5230 0990 302094E5 		ldr	r2, [r4, #48]
 5231 0994 000052E3 		cmp	r2, #0
 5232 0998 6C00001A 		bne	.L451
1111:apps/rssi/main.c **** 	if (!ul_new && !(si_new & 0x100))
 5233              		.loc 2 1111 0
 5234 099c E0329FE5 		ldr	r3, .L521+80
 5235 09a0 B010D3E1 		ldrh	r1, [r3]
 5236 09a4 000051E3 		cmp	r1, #0
 5237 09a8 0300001A 		bne	.L454
 5238 09ac B832D4E1 		ldrh	r3, [r4, #40]
 5239 09b0 010C13E3 		tst	r3, #256
 5240 09b4 0700001A 		bne	.L509
 5241 09b8 640000EA 		b	.L451
 5242              	.L454:
1116:apps/rssi/main.c **** 		ul_new = 0;
 5243              		.loc 2 1116 0
 5244 09bc B020C3E1 		strh	r2, [r3]	@ movhi
1117:apps/rssi/main.c **** 		if (cursor < 0)
 5245              		.loc 2 1117 0
 5246 09c0 A4329FE5 		ldr	r3, .L521+56
 5247 09c4 003093E5 		ldr	r3, [r3]
 5248 09c8 000053E3 		cmp	r3, #0
 5249 09cc 5F0000AA 		bge	.L451
1118:apps/rssi/main.c **** 			refresh_display();
 5250              		.loc 2 1118 0
 5251 09d0 FEFFFFEB 		bl	refresh_display
 5252              	.LVL449:
 5253 09d4 5D0000EA 		b	.L451
 5254              	.L509:
1123:apps/rssi/main.c **** 	switch (si_new & 0xff) {
 5255              		.loc 2 1123 0
 5256 09d8 FF3003E2 		and	r3, r3, #255
 5257 09dc 190053E3 		cmp	r3, #25
 5258 09e0 1500000A 		beq	.L457
 5259 09e4 0900008A 		bhi	.L458
 5260 09e8 020053E3 		cmp	r3, #2
 5261 09ec 1F00000A 		beq	.L459
 5262 09f0 030053E3 		cmp	r3, #3
 5263 09f4 4400001A 		bne	.L456
 5264              	.LVL450:
1144:apps/rssi/main.c **** 		gsm48_decode_freq_list(freq, si2ter->ext_bcch_frequency_list,
 5265              		.loc 2 1144 0
 5266 09f8 1020A0E3 		mov	r2, #16
 5267 09fc 00208DE5 		str	r2, [sp]
 5268 0a00 70029FE5 		ldr	r0, .L521+68
 5269 0a04 D4129FE5 		ldr	r1, .L521+172
 5270 0a08 8E30A0E3 		mov	r3, #142
 5271 0a0c 150000EA 		b	.L516
 5272              	.LVL451:
 5273              	.L458:
1123:apps/rssi/main.c **** 	switch (si_new & 0xff) {
 5274              		.loc 2 1123 0
 5275 0a10 1B0053E3 		cmp	r3, #27
 5276 0a14 1A00000A 		beq	.L461
 5277 0a18 0C00003A 		bcc	.L462
 5278 0a1c 1C0053E3 		cmp	r3, #28
 5279 0a20 3900001A 		bne	.L456
 5280              	.LVL452:
1170:apps/rssi/main.c **** 		gsm48_decode_lai(&si4->lai, &mcc, &mnc, &lac);
 5281              		.loc 2 1170 0
 5282 0a24 7C129FE5 		ldr	r1, .L521+116
 5283 0a28 74229FE5 		ldr	r2, .L521+112
 5284 0a2c 6C329FE5 		ldr	r3, .L521+108
 5285 0a30 AC029FE5 		ldr	r0, .L521+176
 5286 0a34 FEFFFFEB 		bl	gsm48_decode_lai
 5287              	.LVL453:
 5288 0a38 330000EA 		b	.L456
 5289              	.LVL454:
 5290              	.L457:
1126:apps/rssi/main.c **** 		gsm48_decode_freq_list(freq, si1->cell_channel_description,
 5291              		.loc 2 1126 0
 5292 0a3c 0130A0E3 		mov	r3, #1
 5293 0a40 00308DE5 		str	r3, [sp]
 5294 0a44 2C029FE5 		ldr	r0, .L521+68
 5295 0a48 98129FE5 		ldr	r1, .L521+180
 5296 0a4c 030000EA 		b	.L515
 5297              	.LVL455:
 5298              	.L462:
1132:apps/rssi/main.c **** 		gsm48_decode_freq_list(freq, si2->bcch_frequency_list,
 5299              		.loc 2 1132 0
 5300 0a50 0430A0E3 		mov	r3, #4
 5301 0a54 00308DE5 		str	r3, [sp]
 5302 0a58 18029FE5 		ldr	r0, .L521+68
 5303 0a5c 88129FE5 		ldr	r1, .L521+184
 5304              	.LVL456:
 5305              	.L515:
 5306 0a60 1020A0E3 		mov	r2, #16
 5307 0a64 CE30A0E3 		mov	r3, #206
 5308              	.L516:
 5309 0a68 FEFFFFEB 		bl	gsm48_decode_freq_list
 5310              	.LVL457:
 5311 0a6c 260000EA 		b	.L456
 5312              	.L459:
 5313              	.LVL458:
1138:apps/rssi/main.c **** 		gsm48_decode_freq_list(freq, si2bis->bcch_frequency_list,
 5314              		.loc 2 1138 0
 5315 0a70 0830A0E3 		mov	r3, #8
 5316 0a74 00308DE5 		str	r3, [sp]
 5317 0a78 F8019FE5 		ldr	r0, .L521+68
 5318 0a7c 6C129FE5 		ldr	r1, .L521+188
 5319 0a80 F6FFFFEA 		b	.L515
 5320              	.LVL459:
 5321              	.L461:
1151:apps/rssi/main.c **** 		cell_id = ntohs(si3->cell_identity);
 5322              		.loc 2 1151 0
 5323 0a84 0C629FE5 		ldr	r6, .L521+100
1150:apps/rssi/main.c **** 		gsm48_decode_lai(&si3->lai, &mcc, &mnc, &lac);
 5324              		.loc 2 1150 0
 5325 0a88 14229FE5 		ldr	r2, .L521+112
 5326 0a8c 0C329FE5 		ldr	r3, .L521+108
 5327 0a90 5C029FE5 		ldr	r0, .L521+192
 5328 0a94 0C129FE5 		ldr	r1, .L521+116
 5329 0a98 FEFFFFEB 		bl	gsm48_decode_lai
 5330              	.LVL460:
1151:apps/rssi/main.c **** 		cell_id = ntohs(si3->cell_identity);
 5331              		.loc 2 1151 0
 5332 0a9c 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 5333 0aa0 0330D6E5 		ldrb	r3, [r6, #3]	@ zero_extendqisi2
 5334 0aa4 023483E1 		orr	r3, r3, r2, asl #8
 5335              	.LVL461:
 5336              	.LBB771:
 5337              	.LBB772:
 5338              		.loc 4 51 0
 5339 0aa8 2324A0E1 		mov	r2, r3, lsr #8
 5340 0aac 033482E1 		orr	r3, r2, r3, asl #8
 5341              	.LVL462:
 5342              	.LBE772:
 5343              	.LBE771:
1152:apps/rssi/main.c **** 		if (ccch_conf < 0) {
 5344              		.loc 2 1152 0
 5345 0ab0 F4A19FE5 		ldr	r10, .L521+120
1151:apps/rssi/main.c **** 		cell_id = ntohs(si3->cell_identity);
 5346              		.loc 2 1151 0
 5347 0ab4 3C229FE5 		ldr	r2, .L521+196
 5348 0ab8 B030C2E1 		strh	r3, [r2]	@ movhi
1152:apps/rssi/main.c **** 		if (ccch_conf < 0) {
 5349              		.loc 2 1152 0
 5350 0abc 00309AE5 		ldr	r3, [r10]
 5351 0ac0 000053E3 		cmp	r3, #0
 5352 0ac4 100000AA 		bge	.L456
 5353              	.LBB773:
1153:apps/rssi/main.c **** 			struct msgb *msg =
 5354              		.loc 2 1153 0
 5355 0ac8 1000A0E3 		mov	r0, #16
 5356 0acc FEFFFFEB 		bl	l1ctl_msgb_alloc
 5357              	.LVL463:
1155:apps/rssi/main.c **** 			struct l1ctl_ccch_mode_req *req =
 5358              		.loc 2 1155 0
 5359 0ad0 0410A0E3 		mov	r1, #4
1153:apps/rssi/main.c **** 			struct msgb *msg =
 5360              		.loc 2 1153 0
 5361 0ad4 00B0A0E1 		mov	fp, r0
 5362              	.LVL464:
1155:apps/rssi/main.c **** 			struct l1ctl_ccch_mode_req *req =
 5363              		.loc 2 1155 0
 5364 0ad8 FEFFFFEB 		bl	msgb_put
 5365              	.LVL465:
1159:apps/rssi/main.c **** 			ccch_conf = si3->control_channel_desc.ccch_conf;
 5366              		.loc 2 1159 0
 5367 0adc 0A10D6E5 		ldrb	r1, [r6, #10]	@ zero_extendqisi2
 5368 0ae0 071001E2 		and	r1, r1, #7
1160:apps/rssi/main.c **** 			req->ccch_mode = (ccch_conf == 1)
 5369              		.loc 2 1160 0
 5370 0ae4 010051E3 		cmp	r1, #1
 5371 0ae8 0130A013 		movne	r3, #1
 5372 0aec 0230A003 		moveq	r3, #2
1159:apps/rssi/main.c **** 			ccch_conf = si3->control_channel_desc.ccch_conf;
 5373              		.loc 2 1159 0
 5374 0af0 00108AE5 		str	r1, [r10]
1160:apps/rssi/main.c **** 			req->ccch_mode = (ccch_conf == 1)
 5375              		.loc 2 1160 0
 5376 0af4 0030C0E5 		strb	r3, [r0]
1163:apps/rssi/main.c **** 			printf("ccch_mode=%d\n", ccch_conf);
 5377              		.loc 2 1163 0
 5378 0af8 FC019FE5 		ldr	r0, .L521+200
 5379              	.LVL466:
 5380 0afc FEFFFFEB 		bl	printf
 5381              	.LVL467:
1165:apps/rssi/main.c **** 			l1a_l23_rx(SC_DLCI_L1A_L23, msg);
 5382              		.loc 2 1165 0
 5383 0b00 0500A0E3 		mov	r0, #5
 5384 0b04 0B10A0E1 		mov	r1, fp
 5385 0b08 FEFFFFEB 		bl	l1a_l23_rx
 5386              	.LVL468:
 5387              	.L456:
 5388              	.LBE773:
1174:apps/rssi/main.c **** 	if (cursor >= 0)
 5389              		.loc 2 1174 0
 5390 0b0c 58319FE5 		ldr	r3, .L521+56
 5391 0b10 003093E5 		ldr	r3, [r3]
 5392 0b14 000053E3 		cmp	r3, #0
1175:apps/rssi/main.c **** 		refresh_display();
 5393              		.loc 2 1175 0
 5394 0b18 FEFFFFAB 		blge	refresh_display
 5395              	.LVL469:
 5396              	.L465:
1178:apps/rssi/main.c **** 	buzzer_volume(tone);
 5397              		.loc 2 1178 0
 5398 0b1c 1800D5E5 		ldrb	r0, [r5, #24]	@ zero_extendqisi2
 5399 0b20 FEFFFFEB 		bl	buzzer_volume
 5400              	.LVL470:
1179:apps/rssi/main.c **** 	tone_time = jiffies;
 5401              		.loc 2 1179 0
 5402 0b24 003098E5 		ldr	r3, [r8]
 5403 0b28 003089E5 		str	r3, [r9]
1180:apps/rssi/main.c **** 	tone_on = 1;
 5404              		.loc 2 1180 0
 5405 0b2c 0130A0E3 		mov	r3, #1
 5406 0b30 303085E5 		str	r3, [r5, #48]
1181:apps/rssi/main.c **** 	if ((si_new & 0xff) == 0xff)
 5407              		.loc 2 1181 0
 5408 0b34 2830D5E5 		ldrb	r3, [r5, #40]	@ zero_extendqisi2
 5409 0b38 FF0053E3 		cmp	r3, #255
1182:apps/rssi/main.c **** 		buzzer_note(NOTE(NOTE_C, OCTAVE_2));
 5410              		.loc 2 1182 0
 5411 0b3c 1300A003 		moveq	r0, #19
1184:apps/rssi/main.c **** 		buzzer_note(NOTE(NOTE_C, OCTAVE_5));
 5412              		.loc 2 1184 0
 5413 0b40 1000A013 		movne	r0, #16
 5414 0b44 FEFFFFEB 		bl	buzzer_note
 5415              	.LVL471:
1185:apps/rssi/main.c **** 	si_new = 0;
 5416              		.loc 2 1185 0
 5417 0b48 0030A0E3 		mov	r3, #0
 5418 0b4c B832C5E1 		strh	r3, [r5, #40]	@ movhi
 5419              	.L451:
 5420              	.LBE769:
 5421              	.LBE768:
 5422              	.LBB774:
 5423              	.LBB775:
1242:apps/rssi/main.c **** 	if (mode != MODE_RACH)
 5424              		.loc 2 1242 0
 5425 0b50 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 5426 0b54 040052E3 		cmp	r2, #4
 5427 0b58 1100001A 		bne	.L468
1245:apps/rssi/main.c **** 	if (assign == ASSIGN_NONE) {
 5428              		.loc 2 1245 0
 5429 0b5c 5C619FE5 		ldr	r6, .L521+140
 5430 0b60 0030D6E5 		ldrb	r3, [r6]	@ zero_extendqisi2
 5431 0b64 000053E3 		cmp	r3, #0
 5432 0b68 0A00001A 		bne	.L469
 5433              	.LBB776:
1248:apps/rssi/main.c **** 		if (!rach)
 5434              		.loc 2 1248 0
 5435 0b6c 00C094E5 		ldr	ip, [r4]
1246:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - rach_when;
 5436              		.loc 2 1246 0
 5437 0b70 44119FE5 		ldr	r1, .L521+136
1248:apps/rssi/main.c **** 		if (!rach)
 5438              		.loc 2 1248 0
 5439 0b74 00005CE3 		cmp	ip, #0
1246:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - rach_when;
 5440              		.loc 2 1246 0
 5441 0b78 000098E5 		ldr	r0, [r8]
 5442 0b7c 001091E5 		ldr	r1, [r1]
 5443              	.LVL472:
1248:apps/rssi/main.c **** 		if (!rach)
 5444              		.loc 2 1248 0
 5445 0b80 0700000A 		beq	.L468
1246:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - rach_when;
 5446              		.loc 2 1246 0
 5447 0b84 001061E0 		rsb	r1, r1, r0
 5448              	.LVL473:
1250:apps/rssi/main.c **** 		if (elapsed < HZ * 2)
 5449              		.loc 2 1250 0
 5450 0b88 C70051E3 		cmp	r1, #199
 5451 0b8c 0400009A 		bls	.L468
1252:apps/rssi/main.c **** 		assign = ASSIGN_TIMEOUT;
 5452              		.loc 2 1252 0
 5453 0b90 0020C6E5 		strb	r2, [r6]
1253:apps/rssi/main.c **** 		rach = 0;
 5454              		.loc 2 1253 0
 5455 0b94 003084E5 		str	r3, [r4]
 5456              	.LVL474:
 5457              	.L469:
 5458              	.LBE776:
1256:apps/rssi/main.c **** 	refresh_display();
 5459              		.loc 2 1256 0
 5460 0b98 FEFFFFEB 		bl	refresh_display
 5461              	.LVL475:
1257:apps/rssi/main.c **** 	assign = ASSIGN_NONE;
 5462              		.loc 2 1257 0
 5463 0b9c 0030A0E3 		mov	r3, #0
 5464 0ba0 0030C6E5 		strb	r3, [r6]
 5465              	.L468:
 5466              	.LBE775:
 5467              	.LBE774:
 5468              	.LBB777:
 5469              	.LBB778:
 884:apps/rssi/main.c **** 	unsigned long elapsed = jiffies - tone_time;
 5470              		.loc 2 884 0
 5471 0ba4 002098E5 		ldr	r2, [r8]
 5472 0ba8 003099E5 		ldr	r3, [r9]
 5473 0bac 023063E0 		rsb	r3, r3, r2
 5474              	.LVL476:
 886:apps/rssi/main.c **** 	if (!tone_on) {
 5475              		.loc 2 886 0
 5476 0bb0 302095E5 		ldr	r2, [r5, #48]
 5477 0bb4 000052E3 		cmp	r2, #0
 884:apps/rssi/main.c **** 	unsigned long elapsed = jiffies - tone_time;
 5478              		.loc 2 884 0
 5479 0bb8 1C619FE5 		ldr	r6, .L521+168
 886:apps/rssi/main.c **** 	if (!tone_on) {
 5480              		.loc 2 886 0
 5481 0bbc 1400001A 		bne	.L470
 887:apps/rssi/main.c **** 		if (!tone || mode != MODE_MAIN)
 5482              		.loc 2 887 0
 5483 0bc0 180094E5 		ldr	r0, [r4, #24]
 5484 0bc4 000050E3 		cmp	r0, #0
 5485 0bc8 3EFDFF0A 		beq	.L382
 5486 0bcc 0420D4E5 		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 5487 0bd0 000052E3 		cmp	r2, #0
 5488 0bd4 3BFDFF1A 		bne	.L382
 890:apps/rssi/main.c **** 		if (elapsed < (uint8_t)(63-power))
 5489              		.loc 2 890 0
 5490 0bd8 E4209FE5 		ldr	r2, .L521+144
 5491 0bdc 0020D2E5 		ldrb	r2, [r2]	@ zero_extendqisi2
 5492 0be0 3F2062E2 		rsb	r2, r2, #63
 5493 0be4 FF2002E2 		and	r2, r2, #255
 5494 0be8 020053E1 		cmp	r3, r2
 5495 0bec 35FDFF3A 		bcc	.L382
 892:apps/rssi/main.c **** 		buzzer_volume(tone);
 5496              		.loc 2 892 0
 5497 0bf0 FF0000E2 		and	r0, r0, #255
 5498 0bf4 FEFFFFEB 		bl	buzzer_volume
 5499              	.LVL477:
 893:apps/rssi/main.c **** 		buzzer_note(NOTE(NOTE_C, OCTAVE_5));
 5500              		.loc 2 893 0
 5501 0bf8 1000A0E3 		mov	r0, #16
 5502 0bfc FEFFFFEB 		bl	buzzer_note
 5503              	.LVL478:
 894:apps/rssi/main.c **** 		tone_time = jiffies;
 5504              		.loc 2 894 0
 5505 0c00 003098E5 		ldr	r3, [r8]
 5506 0c04 003086E5 		str	r3, [r6]
 895:apps/rssi/main.c **** 		tone_on = 1;
 5507              		.loc 2 895 0
 5508 0c08 0130A0E3 		mov	r3, #1
 5509 0c0c 303084E5 		str	r3, [r4, #48]
 5510 0c10 2CFDFFEA 		b	.L382
 5511              	.LVL479:
 5512              	.L470:
 899:apps/rssi/main.c **** 	if (elapsed >= TONE_JIFFIES) {
 5513              		.loc 2 899 0
 5514 0c14 030053E3 		cmp	r3, #3
 5515 0c18 2AFDFF9A 		bls	.L382
 901:apps/rssi/main.c **** 		tone_time = jiffies;
 5516              		.loc 2 901 0
 5517 0c1c 003098E5 		ldr	r3, [r8]
 5518              	.LVL480:
 900:apps/rssi/main.c **** 		tone_on = 0;
 5519              		.loc 2 900 0
 5520 0c20 0000A0E3 		mov	r0, #0
 5521 0c24 300084E5 		str	r0, [r4, #48]
 901:apps/rssi/main.c **** 		tone_time = jiffies;
 5522              		.loc 2 901 0
 5523 0c28 003086E5 		str	r3, [r6]
 902:apps/rssi/main.c **** 		buzzer_volume(0);
 5524              		.loc 2 902 0
 5525 0c2c FEFFFFEB 		bl	buzzer_volume
 5526              	.LVL481:
 5527 0c30 24FDFFEA 		b	.L382
 5528              	.L522:
 5529              		.align	2
 5530              	.L521:
 5531 0c34 00000000 		.word	.LANCHOR1
 5532 0c38 38020000 		.word	.LC57
 5533 0c3c 00000000 		.word	key_handler
 5534 0c40 00000000 		.word	console_rx_cb
 5535 0c44 00000000 		.word	l1a_l23_rx_cb
 5536 0c48 00000000 		.word	l1a_l23_tx_cb
 5537 0c4c 00000000 		.word	l1a_l23_tx
 5538 0c50 00000000 		.word	pm_spectrum
 5539 0c54 00000000 		.word	ul_max
 5540 0c58 00000000 		.word	.LANCHOR0
 5541 0c5c 00000000 		.word	jiffies
 5542 0c60 00000000 		.word	key_pressed_when
 5543 0c64 00000000 		.word	key_pressed_delay
 5544 0c68 00000000 		.word	key_pressed_code
 5545 0c6c 00000000 		.word	cursor
 5546 0c70 00000000 		.word	framebuffer
 5547 0c74 00000000 		.word	nb_num
 5548 0c78 00000000 		.word	freq
 5549 0c7c 2A010000 		.word	298
 5550 0c80 00000000 		.word	ul_levels
 5551 0c84 00000000 		.word	ul_new
 5552 0c88 00000000 		.word	si_1
 5553 0c8c 00000000 		.word	si_2
 5554 0c90 00000000 		.word	si_2bis
 5555 0c94 00000000 		.word	si_2ter
 5556 0c98 00000000 		.word	si_3
 5557 0c9c 00000000 		.word	si_4
 5558 0ca0 00000000 		.word	lac
 5559 0ca4 00000000 		.word	mnc
 5560 0ca8 00000000 		.word	mcc
 5561 0cac 00000000 		.word	ccch_conf
 5562 0cb0 7C020000 		.word	.LC58
 5563 0cb4 00000000 		.word	l1s
 5564 0cb8 00000000 		.word	rach_ra
 5565 0cbc 00000000 		.word	rach_when
 5566 0cc0 00000000 		.word	assign
 5567 0cc4 00000000 		.word	power
 5568 0cc8 00000000 		.word	max_power
 5569 0ccc 00000000 		.word	last_mode
 5570 0cd0 00000000 		.word	band
 5571 0cd4 2A830000 		.word	33578
 5572 0cd8 00000000 		.word	pm_meas
 5573 0cdc 00000000 		.word	tone_time
 5574 0ce0 03000000 		.word	si_2ter+3
 5575 0ce4 03000000 		.word	si_4+3
 5576 0ce8 03000000 		.word	si_1+3
 5577 0cec 03000000 		.word	si_2+3
 5578 0cf0 03000000 		.word	si_2bis+3
 5579 0cf4 05000000 		.word	si_3+5
 5580 0cf8 00000000 		.word	cell_id
 5581 0cfc 83020000 		.word	.LC59
 5582              	.LBE778:
 5583              	.LBE777:
 5584              		.cfi_endproc
 5585              	.LFE143:
 5587              		.global	hr
 5588              		.comm	assign,1,1
 5589              		.comm	ta,1,1
 5590              		.comm	rach_when,4,4
 5591              		.comm	rach_ra,1,1
 5592              		.comm	rach_ref,3,1
 5593              		.global	rach
 5594              		.comm	freq,1024,1
 5595              		.comm	nb_num,4,4
 5596              		.comm	ccch_conf,4,4
 5597              		.comm	cell_id,2,2
 5598              		.comm	lac,2,2
 5599              		.comm	mnc,2,2
 5600              		.comm	mcc,2,2
 5601              		.comm	ul_new,2,2
 5602              		.global	si_new
 5603              		.comm	si_4,23,1
 5604              		.comm	si_3,23,1
 5605              		.comm	si_2ter,23,1
 5606              		.comm	si_2bis,23,1
 5607              		.comm	si_2,23,1
 5608              		.comm	si_1,23,1
 5609              		.comm	ul_max,8,1
 5610              		.comm	ul_levels,8,1
 5611              		.comm	bsic,1,1
 5612              		.global	tone_on
 5613              		.comm	tone_time,4,4
 5614              		.global	tone
 5615              		.global	pm_scale
 5616              		.comm	pm_spectrum,1024,1
 5617              		.global	pm_max
 5618              		.global	pm_count
 5619              		.comm	pm_meas,40,4
 5620              		.global	pm_mode
 5621              		.comm	band,4,4
 5622              		.global	sync_msg
 5623              		.global	sync_result
 5624              		.comm	cursor,4,4
 5625              		.comm	input,5,1
 5626              		.comm	max_power,1,1
 5627              		.comm	power,1,1
 5628              		.global	max
 5629              		.global	uplink
 5630              		.global	pcs
 5631              		.comm	last_mode,1,1
 5632              		.global	mode
 5633              		.comm	key_pressed_delay,4,4
 5634              		.comm	key_pressed_when,4,4
 5635              		.comm	key_pressed_code,1,1
 5636              		.global	key_pressed
 5637              		.global	key_code
 5638              		.section	.rodata.str1.1,"aMS",%progbits,1
 5639              	.LC0:
 5640 0000 6C31615F 		.ascii	"l1a_l23_rx_cb (DLCI %d): \000"
 5640      6C32335F 
 5640      72785F63 
 5640      62202844 
 5640      4C434920 
 5641              	.LC1:
 5642 001a 25303278 		.ascii	"%02x \000"
 5642      2000
 5643              	.LC2:
 5644 0020 0A00     		.ascii	"\012\000"
 5645              	.LC3:
 5646 0022 64656C20 		.ascii	"del \000"
 5646      00
 5647              	.LC4:
 5648 0027 656E7465 		.ascii	"enter\000"
 5648      7200
 5649              	.LC5:
 5650 002d 6261636B 		.ascii	"back\000"
 5650      00
 5651              	.LC6:
 5652 0032 20202020 		.ascii	"     \000"
 5652      2000
 5653              	.LC7:
 5654 0038 554C00   		.ascii	"UL\000"
 5655              	.LC8:
 5656 003b 444C00   		.ascii	"DL\000"
 5657              	.LC9:
 5658 003e 50435300 		.ascii	"PCS\000"
 5659              	.LC10:
 5660 0042 44435300 		.ascii	"DCS\000"
 5661              	.LC11:
 5662 0046 76616469 		.ascii	"vadimbetman RSSI\000"
 5662      6D626574 
 5662      6D616E20 
 5662      52535349 
 5662      00
 5663              	.LC12:
 5664 0057 40484842 		.ascii	"@HHBC\000"
 5664      4300
 5665              	.LC13:
 5666 005d 40256325 		.ascii	"@%c%c%cC\000"
 5666      63256343 
 5666      00
 5667              	.LC14:
 5668 0066 25632563 		.ascii	"%c%cE%c%c\000"
 5668      45256325 
 5668      6300
 5669              	.LC15:
 5670 0070 52616368 		.ascii	"Rach sent...\000"
 5670      2073656E 
 5670      742E2E2E 
 5670      00
 5671              	.LC16:
 5672 007d 5441203D 		.ascii	"TA = %d\000"
 5672      20256400 
 5673              	.LC17:
 5674 0085 2825646D 		.ascii	"(%dm)\000"
 5674      2900
 5675              	.LC18:
 5676 008b 52656A65 		.ascii	"Rejected!\000"
 5676      63746564 
 5676      2100
 5677              	.LC19:
 5678 0095 54582064 		.ascii	"TX disabled\000"
 5678      69736162 
 5678      6C656400 
 5679              	.LC20:
 5680 00a1 54696D65 		.ascii	"Timeout\000"
 5680      6F757400 
 5681              	.LC21:
 5682 00a9 44656C61 		.ascii	"Delay:%ldms\000"
 5682      793A256C 
 5682      646D7300 
 5683              	.LC22:
 5684 00b5 25303264 		.ascii	"%02d\000"
 5684      00
 5685              	.LC23:
 5686 00ba 6D617800 		.ascii	"max\000"
 5687              	.LC24:
 5688 00be 25346450 		.ascii	"%4dP\000"
 5688      00
 5689              	.LC25:
 5690 00c3 25346444 		.ascii	"%4dD\000"
 5690      00
 5691              	.LC26:
 5692 00c8 25346420 		.ascii	"%4d \000"
 5692      00
 5693              	.LC27:
 5694 00cd 42534943 		.ascii	"BSIC%d/%d %4d\000"
 5694      25642F25 
 5694      64202534 
 5694      6400
 5695              	.LC28:
 5696 00db 53796E63 		.ascii	"Sync %s\000"
 5696      20257300 
 5697              	.LC29:
 5698 00e3 4D434320 		.ascii	"MCC MNC LAC \000"
 5698      4D4E4320 
 5698      4C414320 
 5698      00
 5699              	.LC30:
 5700 00f0 25337820 		.ascii	"%3x %02x  %04x\000"
 5700      25303278 
 5700      20202530 
 5700      347800
 5701              	.LC31:
 5702 00ff 25337820 		.ascii	"%3x %03x %04x\000"
 5702      25303378 
 5702      20253034 
 5702      7800
 5703              	.LC32:
 5704 010d 2D2D2D20 		.ascii	"--- --- ----\000"
 5704      2D2D2D20 
 5704      2D2D2D2D 
 5704      00
 5705              	.LC33:
 5706 011a 63656C6C 		.ascii	"cell id:%04x\000"
 5706      2069643A 
 5706      25303478 
 5706      00
 5707              	.LC34:
 5708 0127 63656C6C 		.ascii	"cell id:----\000"
 5708      2069643A 
 5708      2D2D2D2D 
 5708      00
 5709              	.LC35:
 5710 0134 533A2025 		.ascii	"S: %4d\000"
 5710      346400
 5711              	.LC36:
 5712 013b 20253464 		.ascii	" %4d\000"
 5712      00
 5713              	.LC37:
 5714 0140 4E3A2025 		.ascii	"N: %4d\000"
 5714      346400
 5715              	.LC38:
 5716 0147 41524643 		.ascii	"ARFCN %s\000"
 5716      4E202573 
 5716      00
 5717              	.LC39:
 5718 0150 41524643 		.ascii	"ARFCN %dPCS\000"
 5718      4E202564 
 5718      50435300 
 5719              	.LC40:
 5720 015c 41524643 		.ascii	"ARFCN %dDCS\000"
 5720      4E202564 
 5720      44435300 
 5721              	.LC41:
 5722 0168 41524643 		.ascii	"ARFCN %d\000"
 5722      4E202564 
 5722      00
 5723              	.LC42:
 5724 0171 2000     		.ascii	" \000"
 5725              	.LC43:
 5726 0173 46726571 		.ascii	"Freq. %d.%d\000"
 5726      2E202564 
 5726      2E256400 
 5727              	.LC44:
 5728 017f 506F7765 		.ascii	"Power %d\000"
 5728      72202564 
 5728      00
 5729              	.LC45:
 5730 0188 20202025 		.ascii	"   %4d\000"
 5730      346400
 5731              	.LC46:
 5732 018f 78256400 		.ascii	"x%d\000"
 5733              	.LC47:
 5734 0193 25732020 		.ascii	"%s   %s\000"
 5734      20257300 
 5735              	.LC48:
 5736 019b 25732020 		.ascii	"%s      %s\000"
 5736      20202020 
 5736      257300
 5737              	.LC49:
 5738 01a6 25732020 		.ascii	"%s        \000"
 5738      20202020 
 5738      202000
 5739              	.LC50:
 5740 01b1 25732020 		.ascii	"%s       %s\000"
 5740      20202020 
 5740      20257300 
 5741              	.LC51:
 5742 01bd 256400   		.ascii	"%d\000"
 5743              	.LC52:
 5744 01c0 6D736762 		.ascii	"msgb(%p): Not enough tailroom msgb_push (%u < %u)\012"
 5744      28257029 
 5744      3A204E6F 
 5744      7420656E 
 5744      6F756768 
 5745 01f2 00       		.ascii	"\000"
 5746              	.LC53:
 5747 01f3 6F6B00   		.ascii	"ok\000"
 5748              	.LC54:
 5749 01f6 6572726F 		.ascii	"error\000"
 5749      7200
 5750              	.LC55:
 5751 01fc 4D657373 		.ascii	"Message for unknown DLCI %u\012\000"
 5751      61676520 
 5751      666F7220 
 5751      756E6B6E 
 5751      6F776E20 
 5752              	.LC56:
 5753 0219 4D657373 		.ascii	"Message on console DLCI: '%s'\012\000"
 5753      61676520 
 5753      6F6E2063 
 5753      6F6E736F 
 5753      6C652044 
 5754              	.LC57:
 5755 0238 0A0A5641 		.ascii	"\012\012VADIMBETMAN Monitor Tool (revision osmocon_"
 5755      44494D42 
 5755      45544D41 
 5755      4E204D6F 
 5755      6E69746F 
 5756 0265 76302E30 		.ascii	"v0.0.0-1766-g9ec3f72)\012\000"
 5756      2E302D31 
 5756      3736362D 
 5756      67396563 
 5756      33663732 
 5757              	.LC58:
 5758 027c 74727969 		.ascii	"trying\000"
 5758      6E6700
 5759              	.LC59:
 5760 0283 63636368 		.ascii	"ccch_mode=%d\012\000"
 5760      5F6D6F64 
 5760      653D2564 
 5760      0A00
 5761              	.LC60:
 5762 0291 3D3D3D3D 		.ascii	"==================================================="
 5762      3D3D3D3D 
 5762      3D3D3D3D 
 5762      3D3D3D3D 
 5762      3D3D3D3D 
 5763 02c4 3D3D3D3D 		.ascii	"===================\012\000"
 5763      3D3D3D3D 
 5763      3D3D3D3D 
 5763      3D3D3D3D 
 5763      3D3D3D0A 
 5764              	.LC61:
 5765 02d9 00       		.ascii	"\000"
 5766              		.data
 5767              		.align	2
 5768              		.set	.LANCHOR1,. + 0
 5771              	sync_msg:
 5772 0000 D9020000 		.word	.LC61
 5775              	pm_scale:
 5776 0004 01000000 		.word	1
 5779              	bands:
 5780 0008 80000000 		.word	128
 5781 000c FB000000 		.word	251
 5782 0010 7C000000 		.word	124
 5783 0014 00020000 		.word	512
 5784 0018 32200000 		.word	8242
 5785 001c F4210000 		.word	8692
 5786 0020 BB030000 		.word	955
 5787 0024 7C000000 		.word	124
 5788 0028 75030000 		.word	885
 5789 002c 80000000 		.word	128
 5790 0030 3A220000 		.word	8762
 5791 0034 FC230000 		.word	9212
 5792 0038 00020000 		.word	512
 5793 003c 75030000 		.word	885
 5794 0040 FB000000 		.word	251
 5795 0044 BB030000 		.word	955
 5796 0048 CE420000 		.word	17102
 5797 004c 84460000 		.word	18052
 5798 0050 00000000 		.word	0
 5799 0054 00000000 		.word	0
 5800 0058 00000000 		.word	0
 5801 005c 00000000 		.word	0
 5802 0060 00000000 		.word	0
 5803 0064 00000000 		.word	0
 5806              	key_code:
 5807 0068 FF       		.byte	-1
 5808 0069 000000   		.space	3
 5811              	hr:
 5812 006c 91020000 		.word	.LC60
 5815              	pm_max:
 5816 0070 02000000 		.word	2
 5817              		.bss
 5818              		.align	2
 5819              		.set	.LANCHOR0,. + 0
 5822              	rach:
 5823 0000 00000000 		.space	4
 5826              	mode:
 5827 0004 00       		.space	1
 5828 0005 000000   		.space	3
 5831              	uplink:
 5832 0008 00000000 		.space	4
 5835              	max:
 5836 000c 00000000 		.space	4
 5839              	pcs:
 5840 0010 00000000 		.space	4
 5843              	ul_arfcn:
 5844 0014 0000     		.space	2
 5847              	arfcn:
 5848 0016 0000     		.space	2
 5851              	tone:
 5852 0018 00000000 		.space	4
 5855              	pm_mode:
 5856 001c 00       		.space	1
 5857 001d 000000   		.space	3
 5860              	pm_count:
 5861 0020 00000000 		.space	4
 5864              	sync_result:
 5865 0024 00000000 		.space	4
 5868              	si_new:
 5869 0028 0000     		.space	2
 5870 002a 0000     		.space	2
 5873              	key_pressed:
 5874 002c 00000000 		.space	4
 5877              	tone_on:
 5878 0030 00000000 		.space	4
 5879              		.text
 5880              	.Letext0:
 5881              		.file 6 "/opt/arm/install/arm-none-eabi/sys-include/stdint.h"
 5882              		.file 7 "../../shared/libosmocore/include/osmocom/gsm/gsm_utils.h"
 5883              		.file 8 "include/keypad.h"
 5884              		.file 9 "../../shared/libosmocore/include/osmocom/core/linuxlist.h"
 5885              		.file 10 "include/comm/sercomm.h"
 5886              		.file 11 "include/fb/font.h"
 5887              		.file 12 "include/layer1/tdma_sched.h"
 5888              		.file 13 "include/layer1/mframe_sched.h"
 5889              		.file 14 "../../../include/l1ctl_proto.h"
 5890              		.file 15 "include/layer1/sync.h"
 5891              		.file 16 "../../shared/libosmocore/include/osmocom/gsm/protocol/gsm_04_08.h"
 5892              		.file 17 "../../shared/libosmocore/include/osmocom/gsm/gsm48_ie.h"
 5893              		.file 18 "include/battery/battery.h"
 5894              		.file 19 "include/comm/timer.h"
 5895              		.file 20 "include/layer1/l23_api.h"
 5896              		.file 21 "include/stdio.h"
 5897              		.file 22 "../../shared/libosmocore/include/osmocom/core/panic.h"
 5898              		.file 23 "../../shared/libosmocore/include/osmocom/gsm/rsl.h"
 5899              		.file 24 "include/calypso/buzzer.h"
 5900              		.file 25 "include/board.h"
 5901              		.file 26 "include/calypso/misc.h"
 5902              		.file 27 "include/calypso/clock.h"
 5903              		.file 28 "include/calypso/tpu.h"
 5904              		.file 29 "include/layer1/async.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccUakS93.s:17     .text.fb_boxto:00000000 $a
     /tmp/ccUakS93.s:19     .text.fb_boxto:00000000 fb_boxto
     /tmp/ccUakS93.s:46     .text.fb_boxto:00000020 $d
     /tmp/ccUakS93.s:51     .text.fb_putstr:00000000 $a
     /tmp/ccUakS93.s:53     .text.fb_putstr:00000000 fb_putstr
     /tmp/ccUakS93.s:79     .text.fb_putstr:00000020 $d
     /tmp/ccUakS93.s:84     .text.print_display:00000000 $a
     /tmp/ccUakS93.s:86     .text.print_display:00000000 print_display
     /tmp/ccUakS93.s:160    .text.print_display:00000070 $d
     /tmp/ccUakS93.s:165    .text.gsm48_match_ra:00000000 $a
     /tmp/ccUakS93.s:167    .text.gsm48_match_ra:00000000 gsm48_match_ra
     /tmp/ccUakS93.s:251    .text.gsm48_match_ra:0000009c $d
                            *COM*:00000001 rach_ra
                            *COM*:00000003 rach_ref
     /tmp/ccUakS93.s:258    .text.l1a_l23_rx_cb:00000000 $a
     /tmp/ccUakS93.s:260    .text.l1a_l23_rx_cb:00000000 l1a_l23_rx_cb
     /tmp/ccUakS93.s:315    .text.l1a_l23_rx_cb:00000050 $d
     /tmp/ccUakS93.s:325    .text.refresh_display:00000000 $a
     /tmp/ccUakS93.s:327    .text.refresh_display:00000000 refresh_display
     /tmp/ccUakS93.s:670    .text.refresh_display:00000210 $d
     /tmp/ccUakS93.s:677    .text.refresh_display:00000224 $a
     /tmp/ccUakS93.s:2473   .text.refresh_display:00000fb8 $d
                            *COM*:00000004 cursor
                            *COM*:00000001 power
                            *COM*:00000001 assign
                            *COM*:00000004 rach_when
                            *COM*:00000001 ta
                            *COM*:00000008 ul_max
                            *COM*:00000008 ul_levels
                            *COM*:00000001 bsic
                            *COM*:00000017 si_1
                            *COM*:00000017 si_2
                            *COM*:00000017 si_2bis
                            *COM*:00000017 si_2ter
                            *COM*:00000017 si_3
                            *COM*:00000017 si_4
                            *COM*:00000002 mcc
                            *COM*:00000002 mnc
                            *COM*:00000002 lac
                            *COM*:00000002 cell_id
                            *COM*:00000400 freq
                            *COM*:00000004 nb_num
                            *COM*:00000005 input
                            *COM*:00000004 band
                            *COM*:00000001 max_power
                            *COM*:00000400 pm_spectrum
     /tmp/ccUakS93.s:2562   .text.inc_dec_arfcn:00000000 $a
     /tmp/ccUakS93.s:2564   .text.inc_dec_arfcn:00000000 inc_dec_arfcn
     /tmp/ccUakS93.s:2729   .text.inc_dec_arfcn:00000158 $d
     /tmp/ccUakS93.s:2737   .text.msgb_put:00000000 $a
     /tmp/ccUakS93.s:2739   .text.msgb_put:00000000 msgb_put
     /tmp/ccUakS93.s:2807   .text.msgb_put:00000058 $d
     /tmp/ccUakS93.s:2812   .text.request_ul_levels:00000000 $a
     /tmp/ccUakS93.s:2814   .text.request_ul_levels:00000000 request_ul_levels
     /tmp/ccUakS93.s:2910   .text.request_ul_levels:000000a8 $d
     /tmp/ccUakS93.s:2916   .text.exit_rach:00000000 $a
     /tmp/ccUakS93.s:2918   .text.exit_rach:00000000 exit_rach
     /tmp/ccUakS93.s:2951   .text.exit_rach:00000028 $d
     /tmp/ccUakS93.s:2956   .text.toggle_spectrum:00000000 $a
     /tmp/ccUakS93.s:2958   .text.toggle_spectrum:00000000 toggle_spectrum
     /tmp/ccUakS93.s:3006   .text.toggle_spectrum:00000048 $d
     /tmp/ccUakS93.s:3011   .text.l1a_l23_tx:00000000 $a
     /tmp/ccUakS93.s:3013   .text.l1a_l23_tx:00000000 l1a_l23_tx
     /tmp/ccUakS93.s:3573   .text.l1a_l23_tx:00000438 $d
                            *COM*:00000002 ul_new
                            *COM*:00000028 pm_meas
     /tmp/ccUakS93.s:3597   .text.key_handler:00000000 $a
     /tmp/ccUakS93.s:3599   .text.key_handler:00000000 key_handler
     /tmp/ccUakS93.s:3646   .text.key_handler:00000058 $d
                            *COM*:00000004 key_pressed_when
                            *COM*:00000001 key_pressed_code
                            *COM*:00000004 key_pressed_delay
     /tmp/ccUakS93.s:3658   .text.console_rx_cb:00000000 $a
     /tmp/ccUakS93.s:3660   .text.console_rx_cb:00000000 console_rx_cb
     /tmp/ccUakS93.s:3715   .text.console_rx_cb:00000040 $d
     /tmp/ccUakS93.s:3721   .text.toggle_up_down:00000000 $a
     /tmp/ccUakS93.s:3723   .text.toggle_up_down:00000000 toggle_up_down
     /tmp/ccUakS93.s:3774   .text.toggle_up_down:00000048 $d
     /tmp/ccUakS93.s:3780   .text.enter_arfcn:00000000 $a
     /tmp/ccUakS93.s:3782   .text.enter_arfcn:00000000 enter_arfcn
     /tmp/ccUakS93.s:3977   .text.enter_arfcn:00000168 $d
                            *COM*:00000001 last_mode
     /tmp/ccUakS93.s:3987   .text.gsm48_decode_lai:00000000 $a
     /tmp/ccUakS93.s:3990   .text.gsm48_decode_lai:00000000 gsm48_decode_lai
     /tmp/ccUakS93.s:4051   .text.startup.main:00000000 $a
     /tmp/ccUakS93.s:4054   .text.startup.main:00000000 main
     /tmp/ccUakS93.s:4233   .text.startup.main:00000148 $d
     /tmp/ccUakS93.s:4256   .text.startup.main:0000019c $a
     /tmp/ccUakS93.s:5531   .text.startup.main:00000c34 $d
                            *COM*:00000004 ccch_conf
                            *COM*:00000004 tone_time
     /tmp/ccUakS93.s:5811   .data:0000006c hr
     /tmp/ccUakS93.s:5822   .bss:00000000 rach
     /tmp/ccUakS93.s:5868   .bss:00000028 si_new
     /tmp/ccUakS93.s:5877   .bss:00000030 tone_on
     /tmp/ccUakS93.s:5851   .bss:00000018 tone
     /tmp/ccUakS93.s:5775   .data:00000004 pm_scale
     /tmp/ccUakS93.s:5815   .data:00000070 pm_max
     /tmp/ccUakS93.s:5860   .bss:00000020 pm_count
     /tmp/ccUakS93.s:5855   .bss:0000001c pm_mode
     /tmp/ccUakS93.s:5771   .data:00000000 sync_msg
     /tmp/ccUakS93.s:5864   .bss:00000024 sync_result
     /tmp/ccUakS93.s:5835   .bss:0000000c max
     /tmp/ccUakS93.s:5831   .bss:00000008 uplink
     /tmp/ccUakS93.s:5839   .bss:00000010 pcs
     /tmp/ccUakS93.s:5826   .bss:00000004 mode
     /tmp/ccUakS93.s:5873   .bss:0000002c key_pressed
     /tmp/ccUakS93.s:5806   .data:00000068 key_code
     /tmp/ccUakS93.s:5767   .data:00000000 $d
     /tmp/ccUakS93.s:5779   .data:00000008 bands
     /tmp/ccUakS93.s:5818   .bss:00000000 $d
     /tmp/ccUakS93.s:5843   .bss:00000014 ul_arfcn
     /tmp/ccUakS93.s:5847   .bss:00000016 arfcn
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
framebuffer
printf
puts
__aeabi_uidiv
__aeabi_idiv
__aeabi_idivmod
sprintf
battery_info
jiffies
osmo_panic
l1ctl_msgb_alloc
l1a_l23_rx
l1s_reset
l1s_reset_hw
rsl_dec_chan_nr
memcpy
sercomm_sendmsg
gsm_fn2gsmtime
msgb_free
l1s
board_init
dump_dev_id
calypso_clk_dump
keypad_set_handler
sercomm_register_rx_cb
layer1_init
tpu_frame_irq_en
buzzer_mode_pwt
buzzer_volume
memset
l1a_compl_execute
osmo_timers_update
l1a_l23_handler
buzzer_note
gsm48_decode_freq_list
l1a_l23_tx_cb
